// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
/// A built-in data structure that holds a sequence of elements.
/// 
/// An array data structure that can contain a sequence of elements of any type. Elements are accessed by a numerical index starting at 0. Negative indices are used to count from the back (-1 is the last element, -2 is the second to last, etc.).
/// 
/// **Example:**
/// 
/// Arrays can be concatenated using the `+` operator:
/// 
/// > Note: Arrays are always passed by reference. To get a copy of an array that can be modified independently of the original array, use ``duplicate(deep:)``.
/// 
/// > Note: Erasing elements while iterating over arrays is **not** supported and will result in unpredictable behavior.
/// 
/// **Differences between packed arrays, typed arrays, and untyped arrays:** Packed arrays are generally faster to iterate on and modify compared to a typed array of the same type (e.g. ``PackedInt64Array`` versus `Arrayinteger`). Also, packed arrays consume less memory. As a downside, packed arrays are less flexible as they don't offer as many convenience methods such as ``Array/map(method:)``. Typed arrays are in turn faster to iterate on and modify than untyped arrays.
/// 
public class GArray: Equatable, Collection, RandomAccessCollection {
    static var destructor: GDExtensionPtrDestructor = {
        return gi.variant_get_ptr_destructor (GDEXTENSION_VARIANT_TYPE_ARRAY)!
    }()
    
    deinit {
        if content != GArray.zero {
            GArray.destructor (&content)
        }
        
    }
    
    // Contains a binary blob where this type information is stored
    public var content: ContentType = 0
    // Used to initialize empty types
    public static let zero: ContentType  = 0
    // Convenience type that matches the build configuration storage needs
    public typealias ContentType = Int64
    // Used to construct objects on virtual proxies
    public required init(content proxyContent: ContentType) {
        withUnsafePointer(to: proxyContent) { pContent in
            withUnsafePointer(to: pContent) { pArgs in
                GArray.constructor1(&content, pArgs)
            }
        }
    }
    // Used to construct objects when the underlying built-in's ref count has already been incremented for me
    public required init(alreadyOwnedContent content: ContentType) {
        self.content = content
    }
    
    static var constructor0: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_ARRAY, 0)!
    
    /// Constructs an empty ``GArray``.
    public required init () {
        GArray.constructor0(&content, nil)
    }
    
    static var constructor1: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_ARRAY, 1)!
    
    /// Returns the same array as `from`. If you need a copy of the array, use ``duplicate(deep:)``.
    public init (from: GArray) {
        withUnsafePointer(to: from.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GArray.constructor1(&content, pArgs)
                }
                
            }
            
        }
        
    }
    
    static var constructor2: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_ARRAY, 2)!
    
    /// Creates a typed array from the `base` array. All arguments are required.
    /// 
    /// - `type` is the built-in type as a ``Variant.GType`` constant, for example ``Variant.GType/int``.
    /// 
    /// - `className` is the **native** class name, for example ``Node``. If `type` is not ``Variant.GType/object``, must be an empty string.
    /// 
    /// - `script` is the associated script. Must be a ``Script`` instance or `null`.
    /// 
    /// Examples:
    /// 
    /// > Note: This constructor can be useful if you want to create a typed array on the fly, but you are not required to use it. In GDScript you can use a temporary variable with the static type you need and then pass it:
    /// 
    public init (base: GArray, type: Int32, className: StringName, script: Variant) {
        withUnsafePointer(to: base.content) { pArg0 in
            withUnsafePointer(to: type) { pArg1 in
                withUnsafePointer(to: className.content) { pArg2 in
                    withUnsafePointer(to: script.content) { pArg3 in
                        withUnsafePointer(to: UnsafeRawPointersN4(pArg0, pArg1, pArg2, pArg3)) { pArgs in
                            pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 4) { pArgs in
                                GArray.constructor2(&content, pArgs)
                            }
                            
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
    }
    
    static var constructor3: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_ARRAY, 3)!
    
    /// Constructs an array from a ``PackedByteArray``.
    public init (from: PackedByteArray) {
        withUnsafePointer(to: from.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GArray.constructor3(&content, pArgs)
                }
                
            }
            
        }
        
    }
    
    static var constructor4: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_ARRAY, 4)!
    
    /// Constructs an array from a ``PackedInt32Array``.
    public init (from: PackedInt32Array) {
        withUnsafePointer(to: from.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GArray.constructor4(&content, pArgs)
                }
                
            }
            
        }
        
    }
    
    static var constructor5: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_ARRAY, 5)!
    
    /// Constructs an array from a ``PackedInt64Array``.
    public init (from: PackedInt64Array) {
        withUnsafePointer(to: from.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GArray.constructor5(&content, pArgs)
                }
                
            }
            
        }
        
    }
    
    static var constructor6: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_ARRAY, 6)!
    
    /// Constructs an array from a ``PackedFloat32Array``.
    public init (from: PackedFloat32Array) {
        withUnsafePointer(to: from.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GArray.constructor6(&content, pArgs)
                }
                
            }
            
        }
        
    }
    
    static var constructor7: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_ARRAY, 7)!
    
    /// Constructs an array from a ``PackedFloat64Array``.
    public init (from: PackedFloat64Array) {
        withUnsafePointer(to: from.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GArray.constructor7(&content, pArgs)
                }
                
            }
            
        }
        
    }
    
    static var constructor8: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_ARRAY, 8)!
    
    /// Constructs an array from a ``PackedStringArray``.
    public init (from: PackedStringArray) {
        withUnsafePointer(to: from.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GArray.constructor8(&content, pArgs)
                }
                
            }
            
        }
        
    }
    
    static var constructor9: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_ARRAY, 9)!
    
    /// Constructs an array from a ``PackedVector2Array``.
    public init (from: PackedVector2Array) {
        withUnsafePointer(to: from.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GArray.constructor9(&content, pArgs)
                }
                
            }
            
        }
        
    }
    
    static var constructor10: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_ARRAY, 10)!
    
    /// Constructs an array from a ``PackedVector3Array``.
    public init (from: PackedVector3Array) {
        withUnsafePointer(to: from.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GArray.constructor10(&content, pArgs)
                }
                
            }
            
        }
        
    }
    
    static var constructor11: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_ARRAY, 11)!
    
    /// Constructs an array from a ``PackedColorArray``.
    public init (from: PackedColorArray) {
        withUnsafePointer(to: from.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GArray.constructor11(&content, pArgs)
                }
                
            }
            
        }
        
    }
    
    static var constructor12: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_ARRAY, 12)!
    
    /// Constructs an array from a ``PackedVector4Array``.
    public init (from: PackedVector4Array) {
        withUnsafePointer(to: from.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GArray.constructor12(&content, pArgs)
                }
                
            }
            
        }
        
    }
    
    
    /* Methods */
    
    static var method_size: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("size")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_ARRAY, &name.content, 3173160232)!
    }()
    
    /// Returns the number of elements in the array.
    public final func size()-> Int64 {
        var result: Int64 = Int64()
        GArray.method_size(&content, nil, &result, 0)
        return result
    }
    
    static var method_is_empty: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("is_empty")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_ARRAY, &name.content, 3918633141)!
    }()
    
    /// Returns `true` if the array is empty.
    public final func isEmpty()-> Bool {
        var result: Bool = Bool()
        GArray.method_is_empty(&content, nil, &result, 0)
        return result
    }
    
    static var method_clear: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("clear")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_ARRAY, &name.content, 3218959716)!
    }()
    
    /// Clears the array. This is equivalent to using ``resize(size:)`` with a size of `0`.
    public final func clear() {
        GArray.method_clear(&content, nil, nil, 0)
    }
    
    static var method_hash: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("hash")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_ARRAY, &name.content, 3173160232)!
    }()
    
    /// Returns a hashed 32-bit integer value representing the array and its contents.
    /// 
    /// > Note: ``GArray``s with equal content will always produce identical hash values. However, the reverse is not true. Returning identical hash values does _not_ imply the arrays are equal, because different arrays can have identical hash values due to hash collisions.
    /// 
    public final func hash()-> Int64 {
        var result: Int64 = Int64()
        GArray.method_hash(&content, nil, &result, 0)
        return result
    }
    
    static var method_assign: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("assign")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_ARRAY, &name.content, 2307260970)!
    }()
    
    /// Assigns elements of another `array` into the array. Resizes the array to match `array`. Performs type conversions if the array is typed.
    public final func assign(array: GArray) {
        withUnsafePointer(to: array.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GArray.method_assign(&content, pArgs, nil, 1)
                }
                
            }
            
        }
        
    }
    
    static var method_push_back: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("push_back")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_ARRAY, &name.content, 3316032543)!
    }()
    
    /// Appends an element at the end of the array. See also ``pushFront(value:)``.
    public final func pushBack(value: Variant) {
        withUnsafePointer(to: value.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GArray.method_push_back(&content, pArgs, nil, 1)
                }
                
            }
            
        }
        
    }
    
    static var method_push_front: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("push_front")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_ARRAY, &name.content, 3316032543)!
    }()
    
    /// Adds an element at the beginning of the array. See also ``pushBack(value:)``.
    /// 
    /// > Note: On large arrays, this method is much slower than ``pushBack(value:)`` as it will reindex all the array's elements every time it's called. The larger the array, the slower ``pushFront(value:)`` will be.
    /// 
    public final func pushFront(value: Variant) {
        withUnsafePointer(to: value.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GArray.method_push_front(&content, pArgs, nil, 1)
                }
                
            }
            
        }
        
    }
    
    static var method_append: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("append")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_ARRAY, &name.content, 3316032543)!
    }()
    
    /// Appends an element at the end of the array (alias of ``pushBack(value:)``).
    public final func append(_ value: Variant) {
        withUnsafePointer(to: value.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GArray.method_append(&content, pArgs, nil, 1)
                }
                
            }
            
        }
        
    }
    
    static var method_append_array: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("append_array")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_ARRAY, &name.content, 2307260970)!
    }()
    
    /// Appends another array at the end of this array.
    /// 
    public final func appendArray(_ array: GArray) {
        withUnsafePointer(to: array.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GArray.method_append_array(&content, pArgs, nil, 1)
                }
                
            }
            
        }
        
    }
    
    static var method_resize: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("resize")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_ARRAY, &name.content, 848867239)!
    }()
    
    /// Resizes the array to contain a different number of elements. If the array size is smaller, elements are cleared, if bigger, new elements are `null`. Returns ``GodotError/ok`` on success, or one of the other ``GodotError`` values if the operation failed.
    /// 
    /// Calling ``resize(size:)`` once and assigning the new values is faster than adding new elements one by one.
    /// 
    /// > Note: This method acts in-place and doesn't return a modified array.
    /// 
    @discardableResult /* 1: resize */ 
    public final func resize(size: Int64)-> Int64 {
        var result: Int64 = Int64()
        withUnsafePointer(to: size) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GArray.method_resize(&content, pArgs, &result, 1)
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_insert: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("insert")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_ARRAY, &name.content, 3176316662)!
    }()
    
    /// Inserts a new element at a given position in the array. The position must be valid, or at the end of the array (`pos == size()`). Returns ``GodotError/ok`` on success, or one of the other ``GodotError`` values if the operation failed.
    /// 
    /// > Note: This method acts in-place and doesn't return a modified array.
    /// 
    /// > Note: On large arrays, this method will be slower if the inserted element is close to the beginning of the array (index 0). This is because all elements placed after the newly inserted element have to be reindexed.
    /// 
    public final func insert(position: Int64, value: Variant)-> Int64 {
        var result: Int64 = Int64()
        withUnsafePointer(to: position) { pArg0 in
            withUnsafePointer(to: value.content) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        GArray.method_insert(&content, pArgs, &result, 2)
                    }
                    
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_remove_at: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("remove_at")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_ARRAY, &name.content, 2823966027)!
    }()
    
    /// Removes an element from the array by index. If the index does not exist in the array, nothing happens. To remove an element by searching for its value, use ``erase(value:)`` instead.
    /// 
    /// > Note: This method acts in-place and doesn't return a modified array.
    /// 
    /// > Note: On large arrays, this method will be slower if the removed element is close to the beginning of the array (index 0). This is because all elements placed after the removed element have to be reindexed.
    /// 
    /// > Note: `position` cannot be negative. To remove an element relative to the end of the array, use `arr.remove_at(arr.size() - (i + 1))`. To remove the last element from the array without returning the value, use `arr.resize(arr.size() - 1)`.
    /// 
    public final func removeAt(position: Int64) {
        withUnsafePointer(to: position) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GArray.method_remove_at(&content, pArgs, nil, 1)
                }
                
            }
            
        }
        
    }
    
    static var method_fill: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("fill")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_ARRAY, &name.content, 3316032543)!
    }()
    
    /// Assigns the given value to all elements in the array. This can typically be used together with ``resize(size:)`` to create an array with a given size and initialized elements:
    /// 
    /// > Note: If `value` is of a reference type (``Object``-derived, ``GArray``, ``GDictionary``, etc.) then the array is filled with the references to the same object, i.e. no duplicates are created.
    /// 
    public final func fill(value: Variant) {
        withUnsafePointer(to: value.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GArray.method_fill(&content, pArgs, nil, 1)
                }
                
            }
            
        }
        
    }
    
    static var method_erase: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("erase")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_ARRAY, &name.content, 3316032543)!
    }()
    
    /// Removes the first occurrence of a value from the array. If the value does not exist in the array, nothing happens. To remove an element by index, use ``removeAt(position:)`` instead.
    /// 
    /// > Note: This method acts in-place and doesn't return a modified array.
    /// 
    /// > Note: On large arrays, this method will be slower if the removed element is close to the beginning of the array (index 0). This is because all elements placed after the removed element have to be reindexed.
    /// 
    /// > Note: Do not erase entries while iterating over the array.
    /// 
    public final func erase(value: Variant) {
        withUnsafePointer(to: value.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GArray.method_erase(&content, pArgs, nil, 1)
                }
                
            }
            
        }
        
    }
    
    static var method_front: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("front")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_ARRAY, &name.content, 1460142086)!
    }()
    
    /// Returns the first element of the array. Prints an error and returns `null` if the array is empty.
    /// 
    /// > Note: Calling this function is not the same as writing `array[0]`. If the array is empty, accessing by index will pause project execution when running from the editor.
    /// 
    public final func front()-> Variant {
        let result: Variant = Variant()
        GArray.method_front(&content, nil, &result.content, 0)
        return result
    }
    
    static var method_back: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("back")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_ARRAY, &name.content, 1460142086)!
    }()
    
    /// Returns the last element of the array. Prints an error and returns `null` if the array is empty.
    /// 
    /// > Note: Calling this function is not the same as writing `array[-1]`. If the array is empty, accessing by index will pause project execution when running from the editor.
    /// 
    public final func back()-> Variant {
        let result: Variant = Variant()
        GArray.method_back(&content, nil, &result.content, 0)
        return result
    }
    
    static var method_pick_random: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("pick_random")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_ARRAY, &name.content, 1460142086)!
    }()
    
    /// Returns a random value from the target array. Prints an error and returns `null` if the array is empty.
    /// 
    public final func pickRandom()-> Variant {
        let result: Variant = Variant()
        GArray.method_pick_random(&content, nil, &result.content, 0)
        return result
    }
    
    static var method_find: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("find")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_ARRAY, &name.content, 2336346817)!
    }()
    
    /// Searches the array for a value and returns its index or `-1` if not found. Optionally, the initial search index can be passed.
    public final func find(what: Variant, from: Int64 = 0)-> Int64 {
        var result: Int64 = Int64()
        withUnsafePointer(to: what.content) { pArg0 in
            withUnsafePointer(to: from) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        GArray.method_find(&content, pArgs, &result, 2)
                    }
                    
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_rfind: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("rfind")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_ARRAY, &name.content, 2336346817)!
    }()
    
    /// Searches the array in reverse order. Optionally, a start search index can be passed. If negative, the start index is considered relative to the end of the array.
    public final func rfind(what: Variant, from: Int64 = -1)-> Int64 {
        var result: Int64 = Int64()
        withUnsafePointer(to: what.content) { pArg0 in
            withUnsafePointer(to: from) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        GArray.method_rfind(&content, pArgs, &result, 2)
                    }
                    
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_count: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("count")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_ARRAY, &name.content, 1481661226)!
    }()
    
    /// Returns the number of times an element is in the array.
    public final func count(value: Variant)-> Int64 {
        var result: Int64 = Int64()
        withUnsafePointer(to: value.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GArray.method_count(&content, pArgs, &result, 1)
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_has: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("has")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_ARRAY, &name.content, 3680194679)!
    }()
    
    /// Returns `true` if the array contains the given value.
    /// 
    /// > Note: This is equivalent to using the `in` operator as follows:
    /// 
    public final func has(value: Variant)-> Bool {
        var result: Bool = Bool()
        withUnsafePointer(to: value.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GArray.method_has(&content, pArgs, &result, 1)
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_pop_back: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("pop_back")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_ARRAY, &name.content, 1321915136)!
    }()
    
    /// Removes and returns the last element of the array. Returns `null` if the array is empty, without printing an error message. See also ``popFront()``.
    public final func popBack()-> Variant {
        let result: Variant = Variant()
        GArray.method_pop_back(&content, nil, &result.content, 0)
        return result
    }
    
    static var method_pop_front: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("pop_front")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_ARRAY, &name.content, 1321915136)!
    }()
    
    /// Removes and returns the first element of the array. Returns `null` if the array is empty, without printing an error message. See also ``popBack()``.
    /// 
    /// > Note: On large arrays, this method is much slower than ``popBack()`` as it will reindex all the array's elements every time it's called. The larger the array, the slower ``popFront()`` will be.
    /// 
    public final func popFront()-> Variant {
        let result: Variant = Variant()
        GArray.method_pop_front(&content, nil, &result.content, 0)
        return result
    }
    
    static var method_pop_at: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("pop_at")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_ARRAY, &name.content, 3518259424)!
    }()
    
    /// Removes and returns the element of the array at index `position`. If negative, `position` is considered relative to the end of the array. Leaves the array unchanged and returns `null` if the array is empty or if it's accessed out of bounds. An error message is printed when the array is accessed out of bounds, but not when the array is empty.
    /// 
    /// > Note: On large arrays, this method can be slower than ``popBack()`` as it will reindex the array's elements that are located after the removed element. The larger the array and the lower the index of the removed element, the slower ``popAt(position:)`` will be.
    /// 
    public final func popAt(position: Int64)-> Variant {
        let result: Variant = Variant()
        withUnsafePointer(to: position) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GArray.method_pop_at(&content, pArgs, &result.content, 1)
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_sort: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("sort")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_ARRAY, &name.content, 3218959716)!
    }()
    
    /// Sorts the array.
    /// 
    /// > Note: The sorting algorithm used is not <a href="https://en.wikipedia.org/wiki/Sorting_algorithm#Stability">stable</a>. This means that values considered equal may have their order changed when using ``sort()``.
    /// 
    /// > Note: Strings are sorted in alphabetical order (as opposed to natural order). This may lead to unexpected behavior when sorting an array of strings ending with a sequence of numbers. Consider the following example:
    /// 
    /// To perform natural order sorting, you can use ``sortCustom(`func`:)`` with ``String/naturalnocasecmpTo(to:)`` as follows:
    /// 
    public final func sort() {
        GArray.method_sort(&content, nil, nil, 0)
    }
    
    static var method_sort_custom: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("sort_custom")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_ARRAY, &name.content, 3470848906)!
    }()
    
    /// Sorts the array using a custom method. The custom method receives two arguments (a pair of elements from the array) and must return either `true` or `false`. For two elements `a` and `b`, if the given method returns `true`, element `b` will be after element `a` in the array.
    /// 
    /// > Note: The sorting algorithm used is not <a href="https://en.wikipedia.org/wiki/Sorting_algorithm#Stability">stable</a>. This means that values considered equal may have their order changed when using ``sortCustom(`func`:)``.
    /// 
    /// > Note: You cannot randomize the return value as the heapsort algorithm expects a deterministic result. Randomizing the return value will result in unexpected behavior.
    /// 
    public final func sortCustom(`func`: Callable) {
        withUnsafePointer(to: `func`.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GArray.method_sort_custom(&content, pArgs, nil, 1)
                }
                
            }
            
        }
        
    }
    
    static var method_shuffle: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("shuffle")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_ARRAY, &name.content, 3218959716)!
    }()
    
    /// Shuffles the array such that the items will have a random order. This method uses the global random number generator common to methods such as ``@GlobalScope.randi``. Call ``@GlobalScope.randomize`` to ensure that a new seed will be used each time if you want non-reproducible shuffling.
    public final func shuffle() {
        GArray.method_shuffle(&content, nil, nil, 0)
    }
    
    static var method_bsearch: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("bsearch")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_ARRAY, &name.content, 3372222236)!
    }()
    
    /// Finds the index of an existing value (or the insertion index that maintains sorting order, if the value is not yet present in the array) using binary search. Optionally, a `before` specifier can be passed. If `false`, the returned index comes after all existing entries of the value in the array.
    /// 
    /// > Note: Calling ``bsearch(value:before:)`` on an unsorted array results in unexpected behavior.
    /// 
    public final func bsearch(value: Variant, before: Bool = true)-> Int64 {
        var result: Int64 = Int64()
        withUnsafePointer(to: value.content) { pArg0 in
            withUnsafePointer(to: before) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        GArray.method_bsearch(&content, pArgs, &result, 2)
                    }
                    
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_bsearch_custom: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("bsearch_custom")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_ARRAY, &name.content, 161317131)!
    }()
    
    /// Finds the index of an existing value (or the insertion index that maintains sorting order, if the value is not yet present in the array) using binary search and a custom comparison method. Optionally, a `before` specifier can be passed. If `false`, the returned index comes after all existing entries of the value in the array. The custom method receives two arguments (an element from the array and the value searched for) and must return `true` if the first argument is less than the second, and return `false` otherwise.
    /// 
    /// > Note: The custom method must accept the two arguments in any order, you cannot rely on that the first argument will always be from the array.
    /// 
    /// > Note: Calling ``bsearchCustom(value:`func`:before:)`` on an unsorted array results in unexpected behavior.
    /// 
    public final func bsearchCustom(value: Variant, `func`: Callable, before: Bool = true)-> Int64 {
        var result: Int64 = Int64()
        withUnsafePointer(to: value.content) { pArg0 in
            withUnsafePointer(to: `func`.content) { pArg1 in
                withUnsafePointer(to: before) { pArg2 in
                    withUnsafePointer(to: UnsafeRawPointersN3(pArg0, pArg1, pArg2)) { pArgs in
                        pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 3) { pArgs in
                            GArray.method_bsearch_custom(&content, pArgs, &result, 3)
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_reverse: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("reverse")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_ARRAY, &name.content, 3218959716)!
    }()
    
    /// Reverses the order of the elements in the array.
    public final func reverse() {
        GArray.method_reverse(&content, nil, nil, 0)
    }
    
    static var method_duplicate: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("duplicate")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_ARRAY, &name.content, 636440122)!
    }()
    
    /// Returns a copy of the array.
    /// 
    /// If `deep` is `true`, a deep copy is performed: all nested arrays and dictionaries are duplicated and will not be shared with the original array. If `false`, a shallow copy is made and references to the original nested arrays and dictionaries are kept, so that modifying a sub-array or dictionary in the copy will also impact those referenced in the source array. Note that any ``Object``-derived elements will be shallow copied regardless of the `deep` setting.
    /// 
    public final func duplicate(deep: Bool = false)-> GArray {
        let result: GArray = GArray()
        withUnsafePointer(to: deep) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GArray.method_duplicate(&content, pArgs, &result.content, 1)
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_slice: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("slice")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_ARRAY, &name.content, 1393718243)!
    }()
    
    /// Returns the slice of the ``GArray``, from `begin` (inclusive) to `end` (exclusive), as a new ``GArray``.
    /// 
    /// The absolute value of `begin` and `end` will be clamped to the array size, so the default value for `end` makes it slice to the size of the array by default (i.e. `arr.slice(1)` is a shorthand for `arr.slice(1, arr.size())`).
    /// 
    /// If either `begin` or `end` are negative, they will be relative to the end of the array (i.e. `arr.slice(0, -2)` is a shorthand for `arr.slice(0, arr.size() - 2)`).
    /// 
    /// If specified, `step` is the relative index between source elements. It can be negative, then `begin` must be higher than `end`. For example, `[0, 1, 2, 3, 4, 5].slice(5, 1, -2)` returns `[5, 3]`.
    /// 
    /// If `deep` is true, each element will be copied by value rather than by reference.
    /// 
    /// > Note: To include the first element when `step` is negative, use `arr.slice(begin, -arr.size() - 1, step)` (i.e. `[0, 1, 2].slice(1, -4, -1)` returns `[1, 0]`).
    /// 
    public final func slice(begin: Int64, end: Int64 = 2147483647, step: Int64 = 1, deep: Bool = false)-> GArray {
        let result: GArray = GArray()
        withUnsafePointer(to: begin) { pArg0 in
            withUnsafePointer(to: end) { pArg1 in
                withUnsafePointer(to: step) { pArg2 in
                    withUnsafePointer(to: deep) { pArg3 in
                        withUnsafePointer(to: UnsafeRawPointersN4(pArg0, pArg1, pArg2, pArg3)) { pArgs in
                            pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 4) { pArgs in
                                GArray.method_slice(&content, pArgs, &result.content, 4)
                            }
                            
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_filter: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("filter")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_ARRAY, &name.content, 4075186556)!
    }()
    
    /// Calls the provided ``Callable`` on each element in the array and returns a new array with the elements for which the method returned `true`.
    /// 
    /// The callable's method should take one ``Variant`` parameter (the current array element) and return a boolean value.
    /// 
    /// See also ``any(method:)``, ``all(method:)``, ``map(method:)`` and ``reduce(method:accum:)``.
    /// 
    public final func filter(method: Callable)-> GArray {
        let result: GArray = GArray()
        withUnsafePointer(to: method.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GArray.method_filter(&content, pArgs, &result.content, 1)
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_map: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("map")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_ARRAY, &name.content, 4075186556)!
    }()
    
    /// Calls the provided ``Callable`` for each element in the array and returns a new array filled with values returned by the method.
    /// 
    /// The callable's method should take one ``Variant`` parameter (the current array element) and can return any ``Variant``.
    /// 
    /// See also ``filter(method:)``, ``reduce(method:accum:)``, ``any(method:)`` and ``all(method:)``.
    /// 
    public final func map(method: Callable)-> GArray {
        let result: GArray = GArray()
        withUnsafePointer(to: method.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GArray.method_map(&content, pArgs, &result.content, 1)
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_reduce: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("reduce")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_ARRAY, &name.content, 4272450342)!
    }()
    
    /// Calls the provided ``Callable`` for each element in array and accumulates the result in `accum`.
    /// 
    /// The callable's method takes two arguments: the current value of `accum` and the current array element. If `accum` is `null` (default value), the iteration will start from the second element, with the first one used as initial value of `accum`.
    /// 
    /// See also ``map(method:)``, ``filter(method:)``, ``any(method:)`` and ``all(method:)``.
    /// 
    public final func reduce(method: Callable, accum: Variant)-> Variant {
        let result: Variant = Variant()
        withUnsafePointer(to: method.content) { pArg0 in
            withUnsafePointer(to: accum.content) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        GArray.method_reduce(&content, pArgs, &result.content, 2)
                    }
                    
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_any: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("any")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_ARRAY, &name.content, 4129521963)!
    }()
    
    /// Calls the provided ``Callable`` on each element in the array and returns `true` if the ``Callable`` returns `true` for _one or more_ elements in the array. If the ``Callable`` returns `false` for all elements in the array, this method returns `false`.
    /// 
    /// The callable's method should take one ``Variant`` parameter (the current array element) and return a boolean value.
    /// 
    /// See also ``all(method:)``, ``filter(method:)``, ``map(method:)`` and ``reduce(method:accum:)``.
    /// 
    /// > Note: Unlike relying on the size of an array returned by ``filter(method:)``, this method will return as early as possible to improve performance (especially with large arrays).
    /// 
    /// > Note: For an empty array, this method always returns `false`.
    /// 
    public final func any(method: Callable)-> Bool {
        var result: Bool = Bool()
        withUnsafePointer(to: method.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GArray.method_any(&content, pArgs, &result, 1)
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_all: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("all")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_ARRAY, &name.content, 4129521963)!
    }()
    
    /// Calls the provided ``Callable`` on each element in the array and returns `true` if the ``Callable`` returns `true` for _all_ elements in the array. If the ``Callable`` returns `false` for one array element or more, this method returns `false`.
    /// 
    /// The callable's method should take one ``Variant`` parameter (the current array element) and return a boolean value.
    /// 
    /// See also ``any(method:)``, ``filter(method:)``, ``map(method:)`` and ``reduce(method:accum:)``.
    /// 
    /// > Note: Unlike relying on the size of an array returned by ``filter(method:)``, this method will return as early as possible to improve performance (especially with large arrays).
    /// 
    /// > Note: For an empty array, this method <a href="https://en.wikipedia.org/wiki/Vacuous_truth">always</a> returns `true`.
    /// 
    public final func all(method: Callable)-> Bool {
        var result: Bool = Bool()
        withUnsafePointer(to: method.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GArray.method_all(&content, pArgs, &result, 1)
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_max: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("max")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_ARRAY, &name.content, 1460142086)!
    }()
    
    /// Returns the maximum value contained in the array if all elements are of comparable types. If the elements can't be compared, `null` is returned.
    /// 
    /// To find the maximum value using a custom comparator, you can use ``reduce(method:accum:)``. In this example every array element is checked and the first maximum value is returned:
    /// 
    public final func max()-> Variant {
        let result: Variant = Variant()
        GArray.method_max(&content, nil, &result.content, 0)
        return result
    }
    
    static var method_min: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("min")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_ARRAY, &name.content, 1460142086)!
    }()
    
    /// Returns the minimum value contained in the array if all elements are of comparable types. If the elements can't be compared, `null` is returned.
    /// 
    /// See also ``max()`` for an example of using a custom comparator.
    /// 
    public final func min()-> Variant {
        let result: Variant = Variant()
        GArray.method_min(&content, nil, &result.content, 0)
        return result
    }
    
    static var method_is_typed: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("is_typed")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_ARRAY, &name.content, 3918633141)!
    }()
    
    /// Returns `true` if the array is typed. Typed arrays can only store elements of their associated type and provide type safety for the `[]` operator. Methods of typed array still return ``Variant``.
    public final func isTyped()-> Bool {
        var result: Bool = Bool()
        GArray.method_is_typed(&content, nil, &result, 0)
        return result
    }
    
    static var method_is_same_typed: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("is_same_typed")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_ARRAY, &name.content, 2988181878)!
    }()
    
    /// Returns `true` if the array is typed the same as `array`.
    public final func isSameTyped(array: GArray)-> Bool {
        var result: Bool = Bool()
        withUnsafePointer(to: array.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GArray.method_is_same_typed(&content, pArgs, &result, 1)
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_get_typed_builtin: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("get_typed_builtin")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_ARRAY, &name.content, 3173160232)!
    }()
    
    /// Returns the built-in type of the typed array as a ``Variant.GType`` constant. If the array is not typed, returns ``Variant.GType/`nil```.
    public final func getTypedBuiltin()-> Int64 {
        var result: Int64 = Int64()
        GArray.method_get_typed_builtin(&content, nil, &result, 0)
        return result
    }
    
    static var method_get_typed_class_name: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("get_typed_class_name")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_ARRAY, &name.content, 1825232092)!
    }()
    
    /// Returns the **native** class name of the typed array if the built-in type is ``Variant.GType/object``. Otherwise, this method returns an empty string.
    public final func getTypedClassName()-> StringName {
        let result: StringName = StringName()
        GArray.method_get_typed_class_name(&content, nil, &result.content, 0)
        return result
    }
    
    static var method_get_typed_script: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("get_typed_script")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_ARRAY, &name.content, 1460142086)!
    }()
    
    /// Returns the script associated with the typed array. This method returns a ``Script`` instance or `null`.
    public final func getTypedScript()-> Variant {
        let result: Variant = Variant()
        GArray.method_get_typed_script(&content, nil, &result.content, 0)
        return result
    }
    
    static var method_make_read_only: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("make_read_only")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_ARRAY, &name.content, 3218959716)!
    }()
    
    /// Makes the array read-only, i.e. disabled modifying of the array's elements. Does not apply to nested content, e.g. content of nested arrays.
    public final func makeReadOnly() {
        GArray.method_make_read_only(&content, nil, nil, 0)
    }
    
    static var method_is_read_only: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("is_read_only")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_ARRAY, &name.content, 3918633141)!
    }()
    
    /// Returns `true` if the array is read-only. See ``makeReadOnly()``. Arrays are automatically read-only if declared with `const` keyword.
    public final func isReadOnly()-> Bool {
        var result: Bool = Bool()
        GArray.method_is_read_only(&content, nil, &result, 0)
        return result
    }
    
    static var operator_4: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_ARRAY, GDEXTENSION_VARIANT_TYPE_ARRAY)!
    }()
    
    /// Compares the left operand ``GArray`` against the `right` ``GArray``. Returns `true` if the sizes and contents of the arrays are equal, `false` otherwise.
    public static func == (lhs: GArray, rhs: GArray) -> Bool  {
        var result: Bool = Bool()
        withUnsafePointer(to: lhs.content) { pArg0 in
            withUnsafePointer(to: rhs.content) { pArg1 in
                GArray.operator_4(pArg0, pArg1, &result)
            }
            
        }
        
        return result
    }
    
    static var operator_5: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_ARRAY, GDEXTENSION_VARIANT_TYPE_ARRAY)!
    }()
    
    /// Compares the left operand ``GArray`` against the `right` ``GArray``. Returns `true` if the sizes or contents of the arrays are _not_ equal, `false` otherwise.
    public static func != (lhs: GArray, rhs: GArray) -> Bool  {
        var result: Bool = Bool()
        withUnsafePointer(to: lhs.content) { pArg0 in
            withUnsafePointer(to: rhs.content) { pArg1 in
                GArray.operator_5(pArg0, pArg1, &result)
            }
            
        }
        
        return result
    }
    
    static var operator_6: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDEXTENSION_VARIANT_TYPE_ARRAY, GDEXTENSION_VARIANT_TYPE_ARRAY)!
    }()
    
    /// Performs a comparison for each index between the left operand ``GArray`` and the `right` ``GArray``, considering the highest common index of both arrays for this comparison: Returns `true` on the first occurrence of an element that is less, or `false` if the element is greater. Note that depending on the type of data stored, this function may be recursive. If all elements are equal, it compares the length of both arrays and returns `false` if the left operand ``GArray`` has fewer elements, otherwise it returns `true`.
    public static func < (lhs: GArray, rhs: GArray) -> Bool  {
        var result: Bool = Bool()
        withUnsafePointer(to: lhs.content) { pArg0 in
            withUnsafePointer(to: rhs.content) { pArg1 in
                GArray.operator_6(pArg0, pArg1, &result)
            }
            
        }
        
        return result
    }
    
    static var operator_7: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_LESS, GDEXTENSION_VARIANT_TYPE_ARRAY, GDEXTENSION_VARIANT_TYPE_ARRAY)!
    }()
    
    /// Performs a comparison for each index between the left operand ``GArray`` and the `right` ``GArray``, considering the highest common index of both arrays for this comparison: Returns `true` on the first occurrence of an element that is less, or `false` if the element is greater. Note that depending on the type of data stored, this function may be recursive. If all elements are equal, it compares the length of both arrays and returns `true` if the left operand ``GArray`` has the same number of elements or fewer, otherwise it returns `false`.
    public static func <= (lhs: GArray, rhs: GArray) -> Bool  {
        var result: Bool = Bool()
        withUnsafePointer(to: lhs.content) { pArg0 in
            withUnsafePointer(to: rhs.content) { pArg1 in
                GArray.operator_7(pArg0, pArg1, &result)
            }
            
        }
        
        return result
    }
    
    static var operator_8: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_GREATER, GDEXTENSION_VARIANT_TYPE_ARRAY, GDEXTENSION_VARIANT_TYPE_ARRAY)!
    }()
    
    /// Performs a comparison for each index between the left operand ``GArray`` and the `right` ``GArray``, considering the highest common index of both arrays for this comparison: Returns `true` on the first occurrence of an element that is greater, or `false` if the element is less. Note that depending on the type of data stored, this function may be recursive. If all elements are equal, it compares the length of both arrays and returns `true` if the `right` ``GArray`` has more elements, otherwise it returns `false`.
    public static func > (lhs: GArray, rhs: GArray) -> Bool  {
        var result: Bool = Bool()
        withUnsafePointer(to: lhs.content) { pArg0 in
            withUnsafePointer(to: rhs.content) { pArg1 in
                GArray.operator_8(pArg0, pArg1, &result)
            }
            
        }
        
        return result
    }
    
    static var operator_9: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDEXTENSION_VARIANT_TYPE_ARRAY, GDEXTENSION_VARIANT_TYPE_ARRAY)!
    }()
    
    /// Performs a comparison for each index between the left operand ``GArray`` and the `right` ``GArray``, considering the highest common index of both arrays for this comparison: Returns `true` on the first occurrence of an element that is greater, or `false` if the element is less. Note that depending on the type of data stored, this function may be recursive. If all elements are equal, it compares the length of both arrays and returns `true` if the `right` ``GArray`` has more or the same number of elements, otherwise it returns `false`.
    public static func >= (lhs: GArray, rhs: GArray) -> Bool  {
        var result: Bool = Bool()
        withUnsafePointer(to: lhs.content) { pArg0 in
            withUnsafePointer(to: rhs.content) { pArg1 in
                GArray.operator_9(pArg0, pArg1, &result)
            }
            
        }
        
        return result
    }
    
    static var operator_10: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_ADD, GDEXTENSION_VARIANT_TYPE_ARRAY, GDEXTENSION_VARIANT_TYPE_ARRAY)!
    }()
    
    /// Concatenates two ``GArray``s together, with the `right` ``GArray`` being added to the end of the ``GArray`` specified in the left operand. For example, `[1, 2] + [3, 4]` results in `[1, 2, 3, 4]`.
    public static func + (lhs: GArray, rhs: GArray) -> GArray  {
        let result: GArray = GArray()
        withUnsafePointer(to: lhs.content) { pArg0 in
            withUnsafePointer(to: rhs.content) { pArg1 in
                GArray.operator_10(pArg0, pArg1, &result.content)
            }
            
        }
        
        return result
    }
    
    public var startIndex: Int {
        0
    }
    
    public var endIndex: Int {
        Int (size ())
    }
    
    public func index(after i: Int) -> Int {
        i+1
    }
    
    public func index(before i: Int) -> Int {
        return i-1
    }
    
}


// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
/// A built-in type for strings.
/// 
/// This is the built-in string Variant type (and the one used by GDScript). Strings may contain any number of Unicode characters, and expose methods useful for manipulating and generating strings. Strings are reference-counted and use a copy-on-write approach (every modification to a string returns a new ``String``), so passing them around is cheap in resources.
/// 
/// Some string methods have corresponding variations. Variations suffixed with `n` (``countn(what:from:to:)``, ``findn(what:from:)``, ``replacen(what:forwhat:)``, etc.) are **case-insensitive** (they make no distinction between uppercase and lowercase letters). Method variations prefixed with `r` (``rfind(what:from:)``, ``rsplit(delimiter:allowEmpty:maxsplit:)``, etc.) are reversed, and start from the end of the string, instead of the beginning.
/// 
/// > Note: In a boolean context, a string will evaluate to `false` if it is empty (`""`). Otherwise, a string will always evaluate to `true`. The `not` operator cannot be used. Instead, ``isEmpty()`` should be used to check for empty strings.
/// 
public class GString: Equatable, ExpressibleByStringLiteral, ExpressibleByStringInterpolation, LosslessStringConvertible {
    public required init(_ string: String) {
        gi.string_new_with_utf8_chars(&content, string)
    }
    // ExpressibleByStringLiteral conformance
    public required init(stringLiteral value: String) {
        gi.string_new_with_utf8_chars(&content, value)
    }
    static var destructor: GDExtensionPtrDestructor = {
        return gi.variant_get_ptr_destructor (GDEXTENSION_VARIANT_TYPE_STRING)!
    }()
    
    deinit {
        if content != GString.zero {
            GString.destructor (&content)
        }
        
    }
    
    // Contains a binary blob where this type information is stored
    public var content: ContentType = 0
    // Used to initialize empty types
    public static let zero: ContentType  = 0
    // Convenience type that matches the build configuration storage needs
    public typealias ContentType = Int64
    // Used to construct objects on virtual proxies
    public required init(content proxyContent: ContentType) {
        withUnsafePointer(to: proxyContent) { pContent in
            withUnsafePointer(to: pContent) { pArgs in
                GString.constructor1(&content, pArgs)
            }
        }
    }
    // Used to construct objects when the underlying built-in's ref count has already been incremented for me
    public required init(alreadyOwnedContent content: ContentType) {
        self.content = content
    }
    
    static var constructor0: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_STRING, 0)!
    
    /// Constructs an empty ``String`` (`""`).
    public required init () {
        GString.constructor0(&content, nil)
    }
    
    static var constructor1: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_STRING, 1)!
    
    /// Constructs a ``String`` as a copy of the given ``String``.
    public init (from: GString) {
        withUnsafePointer(to: from.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GString.constructor1(&content, pArgs)
                }
                
            }
            
        }
        
    }
    
    static var constructor2: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_STRING, 2)!
    
    /// Constructs a new ``String`` from the given ``StringName``.
    public init (from: StringName) {
        withUnsafePointer(to: from.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GString.constructor2(&content, pArgs)
                }
                
            }
            
        }
        
    }
    
    static var constructor3: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_STRING, 3)!
    
    /// Constructs a new ``String`` from the given ``NodePath``.
    public init (from: NodePath) {
        withUnsafePointer(to: from.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GString.constructor3(&content, pArgs)
                }
                
            }
            
        }
        
    }
    
    
    /* Methods */
    
    static var method_casecmp_to: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("casecmp_to")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 2920860731)!
    }()
    
    /// Performs a case-sensitive comparison to another string. Returns `-1` if less than, `1` if greater than, or `0` if equal. "Less than" and "greater than" are determined by the <a href="https://en.wikipedia.org/wiki/List_of_Unicode_characters">Unicode code points</a> of each string, which roughly matches the alphabetical order.
    /// 
    /// With different string lengths, returns `1` if this string is longer than the `to` string, or `-1` if shorter. Note that the length of empty strings is _always_ `0`.
    /// 
    /// To get a [bool] result from a string comparison, use the `==` operator instead. See also ``nocasecmpTo(to:)``, ``filecasecmpTo(to:)``, and ``naturalcasecmpTo(to:)``.
    /// 
    public final func casecmpTo(_ to: GString)-> Int64 {
        var result: Int64 = Int64()
        withUnsafePointer(to: to.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GString.method_casecmp_to(&content, pArgs, &result, 1)
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_nocasecmp_to: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("nocasecmp_to")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 2920860731)!
    }()
    
    /// Performs a **case-insensitive** comparison to another string. Returns `-1` if less than, `1` if greater than, or `0` if equal. "Less than" or "greater than" are determined by the <a href="https://en.wikipedia.org/wiki/List_of_Unicode_characters">Unicode code points</a> of each string, which roughly matches the alphabetical order. Internally, lowercase characters are converted to uppercase for the comparison.
    /// 
    /// With different string lengths, returns `1` if this string is longer than the `to` string, or `-1` if shorter. Note that the length of empty strings is _always_ `0`.
    /// 
    /// To get a [bool] result from a string comparison, use the `==` operator instead. See also ``casecmpTo(to:)``, ``filenocasecmpTo(to:)``, and ``naturalnocasecmpTo(to:)``.
    /// 
    public final func nocasecmpTo(_ to: GString)-> Int64 {
        var result: Int64 = Int64()
        withUnsafePointer(to: to.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GString.method_nocasecmp_to(&content, pArgs, &result, 1)
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_naturalcasecmp_to: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("naturalcasecmp_to")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 2920860731)!
    }()
    
    /// Performs a **case-sensitive**, _natural order_ comparison to another string. Returns `-1` if less than, `1` if greater than, or `0` if equal. "Less than" or "greater than" are determined by the <a href="https://en.wikipedia.org/wiki/List_of_Unicode_characters">Unicode code points</a> of each string, which roughly matches the alphabetical order.
    /// 
    /// When used for sorting, natural order comparison orders sequences of numbers by the combined value of each digit as is often expected, instead of the single digit's value. A sorted sequence of numbered strings will be `["1", "2", "3", ...]`, not `["1", "10", "2", "3", ...]`.
    /// 
    /// With different string lengths, returns `1` if this string is longer than the `to` string, or `-1` if shorter. Note that the length of empty strings is _always_ `0`.
    /// 
    /// To get a [bool] result from a string comparison, use the `==` operator instead. See also ``naturalnocasecmpTo(to:)``, ``filecasecmpTo(to:)``, and ``nocasecmpTo(to:)``.
    /// 
    public final func naturalcasecmpTo(_ to: GString)-> Int64 {
        var result: Int64 = Int64()
        withUnsafePointer(to: to.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GString.method_naturalcasecmp_to(&content, pArgs, &result, 1)
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_naturalnocasecmp_to: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("naturalnocasecmp_to")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 2920860731)!
    }()
    
    /// Performs a **case-insensitive**, _natural order_ comparison to another string. Returns `-1` if less than, `1` if greater than, or `0` if equal. "Less than" or "greater than" are determined by the <a href="https://en.wikipedia.org/wiki/List_of_Unicode_characters">Unicode code points</a> of each string, which roughly matches the alphabetical order. Internally, lowercase characters are converted to uppercase for the comparison.
    /// 
    /// When used for sorting, natural order comparison orders sequences of numbers by the combined value of each digit as is often expected, instead of the single digit's value. A sorted sequence of numbered strings will be `["1", "2", "3", ...]`, not `["1", "10", "2", "3", ...]`.
    /// 
    /// With different string lengths, returns `1` if this string is longer than the `to` string, or `-1` if shorter. Note that the length of empty strings is _always_ `0`.
    /// 
    /// To get a [bool] result from a string comparison, use the `==` operator instead. See also ``naturalcasecmpTo(to:)``, ``filenocasecmpTo(to:)``, and ``casecmpTo(to:)``.
    /// 
    public final func naturalnocasecmpTo(_ to: GString)-> Int64 {
        var result: Int64 = Int64()
        withUnsafePointer(to: to.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GString.method_naturalnocasecmp_to(&content, pArgs, &result, 1)
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_filecasecmp_to: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("filecasecmp_to")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 2920860731)!
    }()
    
    /// Like ``naturalcasecmpTo(to:)`` but prioritizes strings that begin with periods (`.`) and underscores (`_`) before any other character. Useful when sorting folders or file names.
    /// 
    /// To get a [bool] result from a string comparison, use the `==` operator instead. See also ``filenocasecmpTo(to:)``, ``naturalcasecmpTo(to:)``, and ``casecmpTo(to:)``.
    /// 
    public final func filecasecmpTo(_ to: GString)-> Int64 {
        var result: Int64 = Int64()
        withUnsafePointer(to: to.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GString.method_filecasecmp_to(&content, pArgs, &result, 1)
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_filenocasecmp_to: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("filenocasecmp_to")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 2920860731)!
    }()
    
    /// Like ``naturalnocasecmpTo(to:)`` but prioritizes strings that begin with periods (`.`) and underscores (`_`) before any other character. Useful when sorting folders or file names.
    /// 
    /// To get a [bool] result from a string comparison, use the `==` operator instead. See also ``filecasecmpTo(to:)``, ``naturalnocasecmpTo(to:)``, and ``nocasecmpTo(to:)``.
    /// 
    public final func filenocasecmpTo(_ to: GString)-> Int64 {
        var result: Int64 = Int64()
        withUnsafePointer(to: to.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GString.method_filenocasecmp_to(&content, pArgs, &result, 1)
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_length: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("length")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 3173160232)!
    }()
    
    /// Returns the number of characters in the string. Empty strings (`""`) always return `0`. See also ``isEmpty()``.
    public final func length()-> Int64 {
        var result: Int64 = Int64()
        GString.method_length(&content, nil, &result, 0)
        return result
    }
    
    static var method_substr: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("substr")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 787537301)!
    }()
    
    /// Returns part of the string from the position `from` with length `len`. If `len` is `-1` (as by default), returns the rest of the string starting from the given position.
    public final func substr(from: Int64, len: Int64 = -1)-> GString {
        let result: GString = GString()
        withUnsafePointer(to: from) { pArg0 in
            withUnsafePointer(to: len) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        GString.method_substr(&content, pArgs, &result.content, 2)
                    }
                    
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_get_slice: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("get_slice")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 3535100402)!
    }()
    
    /// Splits the string using a `delimiter` and returns the substring at index `slice`. Returns the original string if `delimiter` does not occur in the string. Returns an empty string if the `slice` does not exist.
    /// 
    /// This is faster than ``split(delimiter:allowEmpty:maxsplit:)``, if you only need one substring.
    /// 
    /// **Example:**
    /// 
    public final func getSlice(delimiter: GString, slice: Int64)-> GString {
        let result: GString = GString()
        withUnsafePointer(to: delimiter.content) { pArg0 in
            withUnsafePointer(to: slice) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        GString.method_get_slice(&content, pArgs, &result.content, 2)
                    }
                    
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_get_slicec: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("get_slicec")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 787537301)!
    }()
    
    /// Splits the string using a Unicode character with code `delimiter` and returns the substring at index `slice`. Returns an empty string if the `slice` does not exist.
    /// 
    /// This is faster than ``split(delimiter:allowEmpty:maxsplit:)``, if you only need one substring.
    /// 
    public final func getSlicec(delimiter: Int64, slice: Int64)-> GString {
        let result: GString = GString()
        withUnsafePointer(to: delimiter) { pArg0 in
            withUnsafePointer(to: slice) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        GString.method_get_slicec(&content, pArgs, &result.content, 2)
                    }
                    
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_get_slice_count: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("get_slice_count")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 2920860731)!
    }()
    
    /// Returns the total number of slices when the string is split with the given `delimiter` (see ``split(delimiter:allowEmpty:maxsplit:)``).
    public final func getSliceCount(delimiter: GString)-> Int64 {
        var result: Int64 = Int64()
        withUnsafePointer(to: delimiter.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GString.method_get_slice_count(&content, pArgs, &result, 1)
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_find: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("find")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 1760645412)!
    }()
    
    /// Returns the index of the **first** occurrence of `what` in this string, or `-1` if there are none. The search's start can be specified with `from`, continuing to the end of the string.
    /// 
    /// > Note: If you just want to know whether the string contains `what`, use ``contains(what:)``. In GDScript, you may also use the `in` operator.
    /// 
    public final func find(what: GString, from: Int64 = 0)-> Int64 {
        var result: Int64 = Int64()
        withUnsafePointer(to: what.content) { pArg0 in
            withUnsafePointer(to: from) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        GString.method_find(&content, pArgs, &result, 2)
                    }
                    
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_findn: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("findn")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 1760645412)!
    }()
    
    /// Returns the index of the **first** **case-insensitive** occurrence of `what` in this string, or `-1` if there are none. The starting search index can be specified with `from`, continuing to the end of the string.
    public final func findn(what: GString, from: Int64 = 0)-> Int64 {
        var result: Int64 = Int64()
        withUnsafePointer(to: what.content) { pArg0 in
            withUnsafePointer(to: from) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        GString.method_findn(&content, pArgs, &result, 2)
                    }
                    
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_count: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("count")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 2343087891)!
    }()
    
    /// Returns the number of occurrences of the substring `what` between `from` and `to` positions. If `to` is 0, the search continues until the end of the string.
    public final func count(what: GString, from: Int64 = 0, to: Int64 = 0)-> Int64 {
        var result: Int64 = Int64()
        withUnsafePointer(to: what.content) { pArg0 in
            withUnsafePointer(to: from) { pArg1 in
                withUnsafePointer(to: to) { pArg2 in
                    withUnsafePointer(to: UnsafeRawPointersN3(pArg0, pArg1, pArg2)) { pArgs in
                        pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 3) { pArgs in
                            GString.method_count(&content, pArgs, &result, 3)
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_countn: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("countn")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 2343087891)!
    }()
    
    /// Returns the number of occurrences of the substring `what` between `from` and `to` positions, **ignoring case**. If `to` is 0, the search continues until the end of the string.
    public final func countn(what: GString, from: Int64 = 0, to: Int64 = 0)-> Int64 {
        var result: Int64 = Int64()
        withUnsafePointer(to: what.content) { pArg0 in
            withUnsafePointer(to: from) { pArg1 in
                withUnsafePointer(to: to) { pArg2 in
                    withUnsafePointer(to: UnsafeRawPointersN3(pArg0, pArg1, pArg2)) { pArgs in
                        pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 3) { pArgs in
                            GString.method_countn(&content, pArgs, &result, 3)
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_rfind: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("rfind")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 1760645412)!
    }()
    
    /// Returns the index of the **last** occurrence of `what` in this string, or `-1` if there are none. The search's start can be specified with `from`, continuing to the beginning of the string. This method is the reverse of ``find(what:from:)``.
    public final func rfind(what: GString, from: Int64 = -1)-> Int64 {
        var result: Int64 = Int64()
        withUnsafePointer(to: what.content) { pArg0 in
            withUnsafePointer(to: from) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        GString.method_rfind(&content, pArgs, &result, 2)
                    }
                    
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_rfindn: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("rfindn")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 1760645412)!
    }()
    
    /// Returns the index of the **last** **case-insensitive** occurrence of `what` in this string, or `-1` if there are none. The starting search index can be specified with `from`, continuing to the beginning of the string. This method is the reverse of ``findn(what:from:)``.
    public final func rfindn(what: GString, from: Int64 = -1)-> Int64 {
        var result: Int64 = Int64()
        withUnsafePointer(to: what.content) { pArg0 in
            withUnsafePointer(to: from) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        GString.method_rfindn(&content, pArgs, &result, 2)
                    }
                    
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_match: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("match")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 2566493496)!
    }()
    
    /// Does a simple expression match (also called "glob" or "globbing"), where `*` matches zero or more arbitrary characters and `?` matches any single character except a period (`.`). An empty string or empty expression always evaluates to `false`.
    public final func match(expr: GString)-> Bool {
        var result: Bool = Bool()
        withUnsafePointer(to: expr.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GString.method_match(&content, pArgs, &result, 1)
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_matchn: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("matchn")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 2566493496)!
    }()
    
    /// Does a simple **case-insensitive** expression match, where `*` matches zero or more arbitrary characters and `?` matches any single character except a period (`.`). An empty string or empty expression always evaluates to `false`.
    public final func matchn(expr: GString)-> Bool {
        var result: Bool = Bool()
        withUnsafePointer(to: expr.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GString.method_matchn(&content, pArgs, &result, 1)
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_begins_with: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("begins_with")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 2566493496)!
    }()
    
    /// Returns `true` if the string begins with the given `text`. See also ``endsWith(text:)``.
    public final func beginsWith(text: GString)-> Bool {
        var result: Bool = Bool()
        withUnsafePointer(to: text.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GString.method_begins_with(&content, pArgs, &result, 1)
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_ends_with: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("ends_with")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 2566493496)!
    }()
    
    /// Returns `true` if the string ends with the given `text`. See also ``beginsWith(text:)``.
    public final func endsWith(text: GString)-> Bool {
        var result: Bool = Bool()
        withUnsafePointer(to: text.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GString.method_ends_with(&content, pArgs, &result, 1)
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_is_subsequence_of: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("is_subsequence_of")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 2566493496)!
    }()
    
    /// Returns `true` if all characters of this string can be found in `text` in their original order.
    /// 
    public final func isSubsequenceOf(text: GString)-> Bool {
        var result: Bool = Bool()
        withUnsafePointer(to: text.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GString.method_is_subsequence_of(&content, pArgs, &result, 1)
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_is_subsequence_ofn: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("is_subsequence_ofn")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 2566493496)!
    }()
    
    /// Returns `true` if all characters of this string can be found in `text` in their original order, **ignoring case**.
    public final func isSubsequenceOfn(text: GString)-> Bool {
        var result: Bool = Bool()
        withUnsafePointer(to: text.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GString.method_is_subsequence_ofn(&content, pArgs, &result, 1)
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_bigrams: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("bigrams")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 747180633)!
    }()
    
    /// Returns an array containing the bigrams (pairs of consecutive characters) of this string.
    /// 
    public final func bigrams()-> PackedStringArray {
        let result: PackedStringArray = PackedStringArray()
        GString.method_bigrams(&content, nil, &result.content, 0)
        return result
    }
    
    static var method_similarity: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("similarity")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 2697460964)!
    }()
    
    /// Returns the similarity index (<a href="https://en.wikipedia.org/wiki/S%C3%B8rensen%E2%80%93Dice_coefficient">Sorensen-Dice coefficient</a>) of this string compared to another. A result of `1.0` means totally similar, while `0.0` means totally dissimilar.
    /// 
    public final func similarity(text: GString)-> Double {
        var result: Double = Double()
        withUnsafePointer(to: text.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GString.method_similarity(&content, pArgs, &result, 1)
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_format: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("format")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 3212199029)!
    }()
    
    /// Formats the string by replacing all occurrences of `placeholder` with the elements of `values`.
    /// 
    /// `values` can be a ``GDictionary`` or an ``GArray``. Any underscores in `placeholder` will be replaced with the corresponding keys in advance. Array elements use their index as keys.
    /// 
    /// Some additional handling is performed when `values` is an ``GArray``. If `placeholder` does not contain an underscore, the elements of the `values` array will be used to replace one occurrence of the placeholder in order; If an element of `values` is another 2-element array, it'll be interpreted as a key-value pair.
    /// 
    /// See also the <a href="https://docs.godotengine.org/en//tutorials/scripting/gdscript/gdscript_format_string.html">GDScript format string</a> tutorial.
    /// 
    /// > Note: The replacement of placeholders is not done all at once, instead each placeholder is replaced in the order they are passed, this means that if one of the replacement strings contains a key it will also be replaced. This can be very powerful, but can also cause unexpected results if you are not careful. If you do not need to perform replacement in the replacement strings, make sure your replacements do not contain placeholders to ensure reliable results.
    /// 
    /// > Note: In C#, it's recommended to <a href="https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated">interpolate strings with "$"</a>, instead.
    /// 
    public final func format(values: Variant, placeholder: GString = "{_}")-> GString {
        let result: GString = GString()
        withUnsafePointer(to: values.content) { pArg0 in
            withUnsafePointer(to: placeholder.content) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        GString.method_format(&content, pArgs, &result.content, 2)
                    }
                    
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_replace: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("replace")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 1340436205)!
    }()
    
    /// Replaces all occurrences of `what` inside the string with the given `forwhat`.
    public final func replace(what: GString, forwhat: GString)-> GString {
        let result: GString = GString()
        withUnsafePointer(to: what.content) { pArg0 in
            withUnsafePointer(to: forwhat.content) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        GString.method_replace(&content, pArgs, &result.content, 2)
                    }
                    
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_replacen: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("replacen")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 1340436205)!
    }()
    
    /// Replaces all **case-insensitive** occurrences of `what` inside the string with the given `forwhat`.
    public final func replacen(what: GString, forwhat: GString)-> GString {
        let result: GString = GString()
        withUnsafePointer(to: what.content) { pArg0 in
            withUnsafePointer(to: forwhat.content) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        GString.method_replacen(&content, pArgs, &result.content, 2)
                    }
                    
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_reverse: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("reverse")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 3942272618)!
    }()
    
    /// Returns the copy of this string in reverse order. This operation works on unicode codepoints, rather than sequences of codepoints, and may break things like compound letters or emojis.
    public final func reverse()-> GString {
        let result: GString = GString()
        GString.method_reverse(&content, nil, &result.content, 0)
        return result
    }
    
    static var method_insert: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("insert")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 248737229)!
    }()
    
    /// Inserts `what` at the given `position` in the string.
    public final func insert(position: Int64, what: GString)-> GString {
        let result: GString = GString()
        withUnsafePointer(to: position) { pArg0 in
            withUnsafePointer(to: what.content) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        GString.method_insert(&content, pArgs, &result.content, 2)
                    }
                    
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_erase: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("erase")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 787537301)!
    }()
    
    /// Returns a string with `chars` characters erased starting from `position`. If `chars` goes beyond the string's length given the specified `position`, fewer characters will be erased from the returned string. Returns an empty string if either `position` or `chars` is negative. Returns the original string unmodified if `chars` is `0`.
    public final func erase(position: Int64, chars: Int64 = 1)-> GString {
        let result: GString = GString()
        withUnsafePointer(to: position) { pArg0 in
            withUnsafePointer(to: chars) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        GString.method_erase(&content, pArgs, &result.content, 2)
                    }
                    
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_capitalize: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("capitalize")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 3942272618)!
    }()
    
    /// Changes the appearance of the string: replaces underscores (`_`) with spaces, adds spaces before uppercase letters in the middle of a word, converts all letters to lowercase, then converts the first one and each one following a space to uppercase.
    /// 
    public final func capitalize()-> GString {
        let result: GString = GString()
        GString.method_capitalize(&content, nil, &result.content, 0)
        return result
    }
    
    static var method_to_camel_case: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("to_camel_case")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 3942272618)!
    }()
    
    /// Returns the string converted to `camelCase`.
    public final func toCamelCase()-> GString {
        let result: GString = GString()
        GString.method_to_camel_case(&content, nil, &result.content, 0)
        return result
    }
    
    static var method_to_pascal_case: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("to_pascal_case")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 3942272618)!
    }()
    
    /// Returns the string converted to `PascalCase`.
    public final func toPascalCase()-> GString {
        let result: GString = GString()
        GString.method_to_pascal_case(&content, nil, &result.content, 0)
        return result
    }
    
    static var method_to_snake_case: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("to_snake_case")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 3942272618)!
    }()
    
    /// Returns the string converted to `snake_case`.
    /// 
    /// > Note: Numbers followed by a _single_ letter are not separated in the conversion to keep some words (such as "2D") together.
    /// 
    public final func toSnakeCase()-> GString {
        let result: GString = GString()
        GString.method_to_snake_case(&content, nil, &result.content, 0)
        return result
    }
    
    static var method_split: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("split")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 1252735785)!
    }()
    
    /// Splits the string using a `delimiter` and returns an array of the substrings. If `delimiter` is an empty string, each substring will be a single character. This method is the opposite of ``join(parts:)``.
    /// 
    /// If `allowEmpty` is `false`, empty strings between adjacent delimiters are excluded from the array.
    /// 
    /// If `maxsplit` is greater than `0`, the number of splits may not exceed `maxsplit`. By default, the entire string is split.
    /// 
    /// **Example:**
    /// 
    /// > Note: If you only need one substring from the array, consider using ``getSlice(delimiter:slice:)`` which is faster. If you need to split strings with more complex rules, use the ``RegEx`` class instead.
    /// 
    public final func split(delimiter: GString = "", allowEmpty: Bool = true, maxsplit: Int64 = 0)-> PackedStringArray {
        let result: PackedStringArray = PackedStringArray()
        withUnsafePointer(to: delimiter.content) { pArg0 in
            withUnsafePointer(to: allowEmpty) { pArg1 in
                withUnsafePointer(to: maxsplit) { pArg2 in
                    withUnsafePointer(to: UnsafeRawPointersN3(pArg0, pArg1, pArg2)) { pArgs in
                        pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 3) { pArgs in
                            GString.method_split(&content, pArgs, &result.content, 3)
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_rsplit: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("rsplit")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 1252735785)!
    }()
    
    /// Splits the string using a `delimiter` and returns an array of the substrings, starting from the end of the string. The splits in the returned array appear in the same order as the original string. If `delimiter` is an empty string, each substring will be a single character.
    /// 
    /// If `allowEmpty` is `false`, empty strings between adjacent delimiters are excluded from the array.
    /// 
    /// If `maxsplit` is greater than `0`, the number of splits may not exceed `maxsplit`. By default, the entire string is split, which is mostly identical to ``split(delimiter:allowEmpty:maxsplit:)``.
    /// 
    /// **Example:**
    /// 
    public final func rsplit(delimiter: GString = "", allowEmpty: Bool = true, maxsplit: Int64 = 0)-> PackedStringArray {
        let result: PackedStringArray = PackedStringArray()
        withUnsafePointer(to: delimiter.content) { pArg0 in
            withUnsafePointer(to: allowEmpty) { pArg1 in
                withUnsafePointer(to: maxsplit) { pArg2 in
                    withUnsafePointer(to: UnsafeRawPointersN3(pArg0, pArg1, pArg2)) { pArgs in
                        pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 3) { pArgs in
                            GString.method_rsplit(&content, pArgs, &result.content, 3)
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_split_floats: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("split_floats")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 2092079095)!
    }()
    
    /// Splits the string into floats by using a `delimiter` and returns a ``PackedFloat64Array``.
    /// 
    /// If `allowEmpty` is `false`, empty or invalid float conversions between adjacent delimiters are excluded.
    /// 
    public final func splitFloats(delimiter: GString, allowEmpty: Bool = true)-> PackedFloat64Array {
        let result: PackedFloat64Array = PackedFloat64Array()
        withUnsafePointer(to: delimiter.content) { pArg0 in
            withUnsafePointer(to: allowEmpty) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        GString.method_split_floats(&content, pArgs, &result.content, 2)
                    }
                    
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_join: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("join")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 3595973238)!
    }()
    
    /// Returns the concatenation of `parts`' elements, with each element separated by the string calling this method. This method is the opposite of ``split(delimiter:allowEmpty:maxsplit:)``.
    /// 
    /// **Example:**
    /// 
    public final func join(parts: PackedStringArray)-> GString {
        let result: GString = GString()
        withUnsafePointer(to: parts.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GString.method_join(&content, pArgs, &result.content, 1)
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_to_upper: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("to_upper")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 3942272618)!
    }()
    
    /// Returns the string converted to `UPPERCASE`.
    public final func toUpper()-> GString {
        let result: GString = GString()
        GString.method_to_upper(&content, nil, &result.content, 0)
        return result
    }
    
    static var method_to_lower: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("to_lower")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 3942272618)!
    }()
    
    /// Returns the string converted to `lowercase`.
    public final func toLower()-> GString {
        let result: GString = GString()
        GString.method_to_lower(&content, nil, &result.content, 0)
        return result
    }
    
    static var method_left: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("left")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 2162347432)!
    }()
    
    /// Returns the first `length` characters from the beginning of the string. If `length` is negative, strips the last `length` characters from the string's end.
    /// 
    public final func left(length: Int64)-> GString {
        let result: GString = GString()
        withUnsafePointer(to: length) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GString.method_left(&content, pArgs, &result.content, 1)
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_right: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("right")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 2162347432)!
    }()
    
    /// Returns the last `length` characters from the end of the string. If `length` is negative, strips the first `length` characters from the string's beginning.
    /// 
    public final func right(length: Int64)-> GString {
        let result: GString = GString()
        withUnsafePointer(to: length) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GString.method_right(&content, pArgs, &result.content, 1)
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_strip_edges: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("strip_edges")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 907855311)!
    }()
    
    /// Strips all non-printable characters from the beginning and the end of the string. These include spaces, tabulations (`\t`), and newlines (`\n` `\r`).
    /// 
    /// If `left` is `false`, ignores the string's beginning. Likewise, if `right` is `false`, ignores the string's end.
    /// 
    public final func stripEdges(left: Bool = true, right: Bool = true)-> GString {
        let result: GString = GString()
        withUnsafePointer(to: left) { pArg0 in
            withUnsafePointer(to: right) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        GString.method_strip_edges(&content, pArgs, &result.content, 2)
                    }
                    
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_strip_escapes: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("strip_escapes")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 3942272618)!
    }()
    
    /// Strips all escape characters from the string. These include all non-printable control characters of the first page of the ASCII table (values from 0 to 31), such as tabulation (`\t`) and newline (`\n`, `\r`) characters, but _not_ spaces.
    public final func stripEscapes()-> GString {
        let result: GString = GString()
        GString.method_strip_escapes(&content, nil, &result.content, 0)
        return result
    }
    
    static var method_lstrip: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("lstrip")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 3134094431)!
    }()
    
    /// Removes a set of characters defined in `chars` from the string's beginning. See also ``rstrip(chars:)``.
    /// 
    /// > Note: `chars` is not a prefix. Use ``trimPrefix(prefix:)`` to remove a single prefix, rather than a set of characters.
    /// 
    public final func lstrip(chars: GString)-> GString {
        let result: GString = GString()
        withUnsafePointer(to: chars.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GString.method_lstrip(&content, pArgs, &result.content, 1)
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_rstrip: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("rstrip")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 3134094431)!
    }()
    
    /// Removes a set of characters defined in `chars` from the string's end. See also ``lstrip(chars:)``.
    /// 
    /// > Note: `chars` is not a suffix. Use ``trimSuffix(suffix:)`` to remove a single suffix, rather than a set of characters.
    /// 
    public final func rstrip(chars: GString)-> GString {
        let result: GString = GString()
        withUnsafePointer(to: chars.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GString.method_rstrip(&content, pArgs, &result.content, 1)
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_get_extension: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("get_extension")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 3942272618)!
    }()
    
    /// If the string is a valid file name or path, returns the file extension without the leading period (`.`). Otherwise, returns an empty string.
    /// 
    public final func getExtension()-> GString {
        let result: GString = GString()
        GString.method_get_extension(&content, nil, &result.content, 0)
        return result
    }
    
    static var method_get_basename: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("get_basename")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 3942272618)!
    }()
    
    /// If the string is a valid file path, returns the full file path, without the extension.
    /// 
    public final func getBasename()-> GString {
        let result: GString = GString()
        GString.method_get_basename(&content, nil, &result.content, 0)
        return result
    }
    
    static var method_path_join: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("path_join")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 3134094431)!
    }()
    
    /// Concatenates `file` at the end of the string as a subpath, adding `/` if necessary.
    /// 
    /// **Example:** `"this/is".path_join("path") == "this/is/path"`.
    /// 
    public final func pathJoin(file: GString)-> GString {
        let result: GString = GString()
        withUnsafePointer(to: file.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GString.method_path_join(&content, pArgs, &result.content, 1)
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_unicode_at: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("unicode_at")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 4103005248)!
    }()
    
    /// Returns the character code at position `at`.
    public final func unicodeAt(_ at: Int64)-> Int64 {
        var result: Int64 = Int64()
        withUnsafePointer(to: at) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GString.method_unicode_at(&content, pArgs, &result, 1)
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_indent: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("indent")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 3134094431)!
    }()
    
    /// Indents every line of the string with the given `prefix`. Empty lines are not indented. See also ``dedent()`` to remove indentation.
    /// 
    /// For example, the string can be indented with two tabulations using `"\t\t"`, or four spaces using `"    "`.
    /// 
    public final func indent(prefix: GString)-> GString {
        let result: GString = GString()
        withUnsafePointer(to: prefix.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GString.method_indent(&content, pArgs, &result.content, 1)
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_dedent: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("dedent")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 3942272618)!
    }()
    
    /// Returns a copy of the string with indentation (leading tabs and spaces) removed. See also ``indent(prefix:)`` to add indentation.
    public final func dedent()-> GString {
        let result: GString = GString()
        GString.method_dedent(&content, nil, &result.content, 0)
        return result
    }
    
    static var method_hash: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("hash")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 3173160232)!
    }()
    
    /// Returns the 32-bit hash value representing the string's contents.
    /// 
    /// > Note: Strings with equal hash values are _not_ guaranteed to be the same, as a result of hash collisions. On the contrary, strings with different hash values are guaranteed to be different.
    /// 
    public final func hash()-> Int64 {
        var result: Int64 = Int64()
        GString.method_hash(&content, nil, &result, 0)
        return result
    }
    
    static var method_md5_text: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("md5_text")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 3942272618)!
    }()
    
    /// Returns the <a href="https://en.wikipedia.org/wiki/MD5">MD5 hash</a> of the string as another ``String``.
    public final func md5Text()-> GString {
        let result: GString = GString()
        GString.method_md5_text(&content, nil, &result.content, 0)
        return result
    }
    
    static var method_sha1_text: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("sha1_text")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 3942272618)!
    }()
    
    /// Returns the <a href="https://en.wikipedia.org/wiki/SHA-1">SHA-1</a> hash of the string as another ``String``.
    public final func sha1Text()-> GString {
        let result: GString = GString()
        GString.method_sha1_text(&content, nil, &result.content, 0)
        return result
    }
    
    static var method_sha256_text: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("sha256_text")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 3942272618)!
    }()
    
    /// Returns the <a href="https://en.wikipedia.org/wiki/SHA-2">SHA-256</a> hash of the string as another ``String``.
    public final func sha256Text()-> GString {
        let result: GString = GString()
        GString.method_sha256_text(&content, nil, &result.content, 0)
        return result
    }
    
    static var method_md5_buffer: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("md5_buffer")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 247621236)!
    }()
    
    /// Returns the <a href="https://en.wikipedia.org/wiki/MD5">MD5 hash</a> of the string as a ``PackedByteArray``.
    public final func md5Buffer()-> PackedByteArray {
        let result: PackedByteArray = PackedByteArray()
        GString.method_md5_buffer(&content, nil, &result.content, 0)
        return result
    }
    
    static var method_sha1_buffer: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("sha1_buffer")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 247621236)!
    }()
    
    /// Returns the <a href="https://en.wikipedia.org/wiki/SHA-1">SHA-1</a> hash of the string as a ``PackedByteArray``.
    public final func sha1Buffer()-> PackedByteArray {
        let result: PackedByteArray = PackedByteArray()
        GString.method_sha1_buffer(&content, nil, &result.content, 0)
        return result
    }
    
    static var method_sha256_buffer: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("sha256_buffer")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 247621236)!
    }()
    
    /// Returns the <a href="https://en.wikipedia.org/wiki/SHA-2">SHA-256</a> hash of the string as a ``PackedByteArray``.
    public final func sha256Buffer()-> PackedByteArray {
        let result: PackedByteArray = PackedByteArray()
        GString.method_sha256_buffer(&content, nil, &result.content, 0)
        return result
    }
    
    static var method_is_empty: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("is_empty")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 3918633141)!
    }()
    
    /// Returns `true` if the string's length is `0` (`""`). See also ``length()``.
    public final func isEmpty()-> Bool {
        var result: Bool = Bool()
        GString.method_is_empty(&content, nil, &result, 0)
        return result
    }
    
    static var method_contains: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("contains")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 2566493496)!
    }()
    
    /// Returns `true` if the string contains `what`. In GDScript, this corresponds to the `in` operator.
    /// 
    /// If you need to know where `what` is within the string, use ``find(what:from:)``. See also ``containsn(what:)``.
    /// 
    public final func contains(what: GString)-> Bool {
        var result: Bool = Bool()
        withUnsafePointer(to: what.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GString.method_contains(&content, pArgs, &result, 1)
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_containsn: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("containsn")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 2566493496)!
    }()
    
    /// Returns `true` if the string contains `what`, **ignoring case**.
    /// 
    /// If you need to know where `what` is within the string, use ``findn(what:from:)``. See also ``contains(what:)``.
    /// 
    public final func containsn(what: GString)-> Bool {
        var result: Bool = Bool()
        withUnsafePointer(to: what.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GString.method_containsn(&content, pArgs, &result, 1)
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_is_absolute_path: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("is_absolute_path")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 3918633141)!
    }()
    
    /// Returns `true` if the string is a path to a file or directory, and its starting point is explicitly defined. This method is the opposite of ``isRelativePath()``.
    /// 
    /// This includes all paths starting with `"res://"`, `"user://"`, `"C:\"`, `"/"`, etc.
    /// 
    public final func isAbsolutePath()-> Bool {
        var result: Bool = Bool()
        GString.method_is_absolute_path(&content, nil, &result, 0)
        return result
    }
    
    static var method_is_relative_path: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("is_relative_path")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 3918633141)!
    }()
    
    /// Returns `true` if the string is a path, and its starting point is dependent on context. The path could begin from the current directory, or the current ``Node`` (if the string is derived from a ``NodePath``), and may sometimes be prefixed with `"./"`. This method is the opposite of ``isAbsolutePath()``.
    public final func isRelativePath()-> Bool {
        var result: Bool = Bool()
        GString.method_is_relative_path(&content, nil, &result, 0)
        return result
    }
    
    static var method_simplify_path: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("simplify_path")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 3942272618)!
    }()
    
    /// If the string is a valid file path, converts the string into a canonical path. This is the shortest possible path, without `"./"`, and all the unnecessary `".."` and `"/"`.
    /// 
    public final func simplifyPath()-> GString {
        let result: GString = GString()
        GString.method_simplify_path(&content, nil, &result.content, 0)
        return result
    }
    
    static var method_get_base_dir: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("get_base_dir")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 3942272618)!
    }()
    
    /// If the string is a valid file path, returns the base directory name.
    /// 
    public final func getBaseDir()-> GString {
        let result: GString = GString()
        GString.method_get_base_dir(&content, nil, &result.content, 0)
        return result
    }
    
    static var method_get_file: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("get_file")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 3942272618)!
    }()
    
    /// If the string is a valid file path, returns the file name, including the extension.
    /// 
    public final func getFile()-> GString {
        let result: GString = GString()
        GString.method_get_file(&content, nil, &result.content, 0)
        return result
    }
    
    static var method_xml_escape: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("xml_escape")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 3429816538)!
    }()
    
    /// Returns a copy of the string with special characters escaped using the XML standard. If `escapeQuotes` is `true`, the single quote (`'`) and double quote (`"`) characters are also escaped.
    public final func xmlEscape(escapeQuotes: Bool = false)-> GString {
        let result: GString = GString()
        withUnsafePointer(to: escapeQuotes) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GString.method_xml_escape(&content, pArgs, &result.content, 1)
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_xml_unescape: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("xml_unescape")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 3942272618)!
    }()
    
    /// Returns a copy of the string with escaped characters replaced by their meanings according to the XML standard.
    public final func xmlUnescape()-> GString {
        let result: GString = GString()
        GString.method_xml_unescape(&content, nil, &result.content, 0)
        return result
    }
    
    static var method_uri_encode: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("uri_encode")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 3942272618)!
    }()
    
    /// Encodes the string to URL-friendly format. This method is meant to properly encode the parameters in a URL when sending an HTTP request. See also ``uriDecode()``.
    /// 
    public final func uriEncode()-> GString {
        let result: GString = GString()
        GString.method_uri_encode(&content, nil, &result.content, 0)
        return result
    }
    
    static var method_uri_decode: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("uri_decode")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 3942272618)!
    }()
    
    /// Decodes the string from its URL-encoded format. This method is meant to properly decode the parameters in a URL when receiving an HTTP request. See also ``uriEncode()``.
    /// 
    public final func uriDecode()-> GString {
        let result: GString = GString()
        GString.method_uri_decode(&content, nil, &result.content, 0)
        return result
    }
    
    static var method_c_escape: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("c_escape")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 3942272618)!
    }()
    
    /// Returns a copy of the string with special characters escaped using the C language standard.
    public final func cEscape()-> GString {
        let result: GString = GString()
        GString.method_c_escape(&content, nil, &result.content, 0)
        return result
    }
    
    static var method_c_unescape: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("c_unescape")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 3942272618)!
    }()
    
    /// Returns a copy of the string with escaped characters replaced by their meanings. Supported escape sequences are `\'`, `\"`, `\\`, `\a`, `\b`, `\f`, `\n`, `\r`, `\t`, `\v`.
    /// 
    /// > Note: Unlike the GDScript parser, this method doesn't support the `\uXXXX` escape sequence.
    /// 
    public final func cUnescape()-> GString {
        let result: GString = GString()
        GString.method_c_unescape(&content, nil, &result.content, 0)
        return result
    }
    
    static var method_json_escape: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("json_escape")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 3942272618)!
    }()
    
    /// Returns a copy of the string with special characters escaped using the JSON standard. Because it closely matches the C standard, it is possible to use ``cUnescape()`` to unescape the string, if necessary.
    public final func jsonEscape()-> GString {
        let result: GString = GString()
        GString.method_json_escape(&content, nil, &result.content, 0)
        return result
    }
    
    static var method_validate_node_name: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("validate_node_name")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 3942272618)!
    }()
    
    /// Returns a copy of the string with all characters that are not allowed in ``Node/name`` (`.` `:` `@` `/` `"` `%`) replaced with underscores.
    public final func validateNodeName()-> GString {
        let result: GString = GString()
        GString.method_validate_node_name(&content, nil, &result.content, 0)
        return result
    }
    
    static var method_validate_filename: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("validate_filename")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 3942272618)!
    }()
    
    /// Returns a copy of the string with all characters that are not allowed in ``isValidFilename()`` replaced with underscores.
    public final func validateFilename()-> GString {
        let result: GString = GString()
        GString.method_validate_filename(&content, nil, &result.content, 0)
        return result
    }
    
    static var method_is_valid_identifier: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("is_valid_identifier")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 3918633141)!
    }()
    
    /// Returns `true` if this string is a valid identifier. A valid identifier may contain only letters, digits and underscores (`_`), and the first character may not be a digit.
    /// 
    public final func isValidIdentifier()-> Bool {
        var result: Bool = Bool()
        GString.method_is_valid_identifier(&content, nil, &result, 0)
        return result
    }
    
    static var method_is_valid_int: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("is_valid_int")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 3918633141)!
    }()
    
    /// Returns `true` if this string represents a valid integer. A valid integer only contains digits, and may be prefixed with a positive (`+`) or negative (`-`) sign. See also ``toInt()``.
    /// 
    public final func isValidInt()-> Bool {
        var result: Bool = Bool()
        GString.method_is_valid_int(&content, nil, &result, 0)
        return result
    }
    
    static var method_is_valid_float: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("is_valid_float")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 3918633141)!
    }()
    
    /// Returns `true` if this string represents a valid floating-point number. A valid float may contain only digits, one decimal point (`.`), and the exponent letter (`e`). It may also be prefixed with a positive (`+`) or negative (`-`) sign. Any valid integer is also a valid float (see ``isValidInt()``). See also ``toFloat()``.
    /// 
    public final func isValidFloat()-> Bool {
        var result: Bool = Bool()
        GString.method_is_valid_float(&content, nil, &result, 0)
        return result
    }
    
    static var method_is_valid_hex_number: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("is_valid_hex_number")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 593672999)!
    }()
    
    /// Returns `true` if this string is a valid hexadecimal number. A valid hexadecimal number only contains digits or letters `A` to `F` (either uppercase or lowercase), and may be prefixed with a positive (`+`) or negative (`-`) sign.
    /// 
    /// If `withPrefix` is `true`, the hexadecimal number needs to prefixed by `"0x"` to be considered valid.
    /// 
    public final func isValidHexNumber(withPrefix: Bool = false)-> Bool {
        var result: Bool = Bool()
        withUnsafePointer(to: withPrefix) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GString.method_is_valid_hex_number(&content, pArgs, &result, 1)
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_is_valid_html_color: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("is_valid_html_color")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 3918633141)!
    }()
    
    /// Returns `true` if this string is a valid color in hexadecimal HTML notation. The string must be a hexadecimal value (see ``isValidHexNumber(withPrefix:)``) of either 3, 4, 6 or 8 digits, and may be prefixed by a hash sign (`#`). Other HTML notations for colors, such as names or `hsl()`, are not considered valid. See also ``Color/html(rgba:)``.
    public final func isValidHtmlColor()-> Bool {
        var result: Bool = Bool()
        GString.method_is_valid_html_color(&content, nil, &result, 0)
        return result
    }
    
    static var method_is_valid_ip_address: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("is_valid_ip_address")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 3918633141)!
    }()
    
    /// Returns `true` if this string represents a well-formatted IPv4 or IPv6 address. This method considers <a href="https://en.wikipedia.org/wiki/Reserved_IP_addresses">reserved IP addresses</a> such as `"0.0.0.0"` and `"ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff"` as valid.
    public final func isValidIpAddress()-> Bool {
        var result: Bool = Bool()
        GString.method_is_valid_ip_address(&content, nil, &result, 0)
        return result
    }
    
    static var method_is_valid_filename: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("is_valid_filename")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 3918633141)!
    }()
    
    /// Returns `true` if this string does not contain characters that are not allowed in file names (`:` `/` `\` `?` `*` `"` `|` `%` `<` `>`).
    public final func isValidFilename()-> Bool {
        var result: Bool = Bool()
        GString.method_is_valid_filename(&content, nil, &result, 0)
        return result
    }
    
    static var method_to_int: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("to_int")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 3173160232)!
    }()
    
    /// Converts the string representing an integer number into an integer. This method removes any non-number character and stops at the first decimal point (`.`). See also ``isValidInt()``.
    /// 
    public final func toInt()-> Int64 {
        var result: Int64 = Int64()
        GString.method_to_int(&content, nil, &result, 0)
        return result
    }
    
    static var method_to_float: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("to_float")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 466405837)!
    }()
    
    /// Converts the string representing a decimal number into a float. This method stops on the first non-number character, except the first decimal point (`.`) and the exponent letter (`e`). See also ``isValidFloat()``.
    /// 
    public final func toFloat()-> Double {
        var result: Double = Double()
        GString.method_to_float(&content, nil, &result, 0)
        return result
    }
    
    static var method_hex_to_int: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("hex_to_int")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 3173160232)!
    }()
    
    /// Converts the string representing a hexadecimal number into an integer. The string may be optionally prefixed with `"0x"`, and an additional `-` prefix for negative numbers.
    /// 
    public final func hexToInt()-> Int64 {
        var result: Int64 = Int64()
        GString.method_hex_to_int(&content, nil, &result, 0)
        return result
    }
    
    static var method_bin_to_int: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("bin_to_int")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 3173160232)!
    }()
    
    /// Converts the string representing a binary number into an integer. The string may optionally be prefixed with `"0b"`, and an additional `-` prefix for negative numbers.
    /// 
    public final func binToInt()-> Int64 {
        var result: Int64 = Int64()
        GString.method_bin_to_int(&content, nil, &result, 0)
        return result
    }
    
    static var method_lpad: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("lpad")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 248737229)!
    }()
    
    /// Formats the string to be at least `minLength` long by adding `character`s to the left of the string, if necessary. See also ``rpad(minLength:character:)``.
    public final func lpad(minLength: Int64, character: GString = " ")-> GString {
        let result: GString = GString()
        withUnsafePointer(to: minLength) { pArg0 in
            withUnsafePointer(to: character.content) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        GString.method_lpad(&content, pArgs, &result.content, 2)
                    }
                    
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_rpad: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("rpad")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 248737229)!
    }()
    
    /// Formats the string to be at least `minLength` long, by adding `character`s to the right of the string, if necessary. See also ``lpad(minLength:character:)``.
    public final func rpad(minLength: Int64, character: GString = " ")-> GString {
        let result: GString = GString()
        withUnsafePointer(to: minLength) { pArg0 in
            withUnsafePointer(to: character.content) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        GString.method_rpad(&content, pArgs, &result.content, 2)
                    }
                    
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_pad_decimals: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("pad_decimals")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 2162347432)!
    }()
    
    /// Formats the string representing a number to have an exact number of `digits` _after_ the decimal point.
    public final func padDecimals(digits: Int64)-> GString {
        let result: GString = GString()
        withUnsafePointer(to: digits) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GString.method_pad_decimals(&content, pArgs, &result.content, 1)
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_pad_zeros: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("pad_zeros")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 2162347432)!
    }()
    
    /// Formats the string representing a number to have an exact number of `digits` _before_ the decimal point.
    public final func padZeros(digits: Int64)-> GString {
        let result: GString = GString()
        withUnsafePointer(to: digits) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GString.method_pad_zeros(&content, pArgs, &result.content, 1)
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_trim_prefix: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("trim_prefix")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 3134094431)!
    }()
    
    /// Removes the given `prefix` from the start of the string, or returns the string unchanged.
    public final func trimPrefix(_ prefix: GString)-> GString {
        let result: GString = GString()
        withUnsafePointer(to: prefix.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GString.method_trim_prefix(&content, pArgs, &result.content, 1)
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_trim_suffix: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("trim_suffix")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 3134094431)!
    }()
    
    /// Removes the given `suffix` from the end of the string, or returns the string unchanged.
    public final func trimSuffix(_ suffix: GString)-> GString {
        let result: GString = GString()
        withUnsafePointer(to: suffix.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GString.method_trim_suffix(&content, pArgs, &result.content, 1)
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_to_ascii_buffer: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("to_ascii_buffer")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 247621236)!
    }()
    
    /// Converts the string to an <a href="https://en.wikipedia.org/wiki/ASCII">ASCII</a>/Latin-1 encoded ``PackedByteArray``. This method is slightly faster than ``toUtf8Buffer()``, but replaces all unsupported characters with spaces. This is the inverse of ``PackedByteArray/getStringFromAscii()``.
    public final func toAsciiBuffer()-> PackedByteArray {
        let result: PackedByteArray = PackedByteArray()
        GString.method_to_ascii_buffer(&content, nil, &result.content, 0)
        return result
    }
    
    static var method_to_utf8_buffer: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("to_utf8_buffer")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 247621236)!
    }()
    
    /// Converts the string to a <a href="https://en.wikipedia.org/wiki/UTF-8">UTF-8</a> encoded ``PackedByteArray``. This method is slightly slower than ``toAsciiBuffer()``, but supports all UTF-8 characters. For most cases, prefer using this method. This is the inverse of ``PackedByteArray/getStringFromUtf8()``.
    public final func toUtf8Buffer()-> PackedByteArray {
        let result: PackedByteArray = PackedByteArray()
        GString.method_to_utf8_buffer(&content, nil, &result.content, 0)
        return result
    }
    
    static var method_to_utf16_buffer: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("to_utf16_buffer")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 247621236)!
    }()
    
    /// Converts the string to a <a href="https://en.wikipedia.org/wiki/UTF-16">UTF-16</a> encoded ``PackedByteArray``. This is the inverse of ``PackedByteArray/getStringFromUtf16()``.
    public final func toUtf16Buffer()-> PackedByteArray {
        let result: PackedByteArray = PackedByteArray()
        GString.method_to_utf16_buffer(&content, nil, &result.content, 0)
        return result
    }
    
    static var method_to_utf32_buffer: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("to_utf32_buffer")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 247621236)!
    }()
    
    /// Converts the string to a <a href="https://en.wikipedia.org/wiki/UTF-32">UTF-32</a> encoded ``PackedByteArray``. This is the inverse of ``PackedByteArray/getStringFromUtf32()``.
    public final func toUtf32Buffer()-> PackedByteArray {
        let result: PackedByteArray = PackedByteArray()
        GString.method_to_utf32_buffer(&content, nil, &result.content, 0)
        return result
    }
    
    static var method_hex_decode: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("hex_decode")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 247621236)!
    }()
    
    /// Decodes a hexadecimal string as a ``PackedByteArray``.
    /// 
    public final func hexDecode()-> PackedByteArray {
        let result: PackedByteArray = PackedByteArray()
        GString.method_hex_decode(&content, nil, &result.content, 0)
        return result
    }
    
    static var method_to_wchar_buffer: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("to_wchar_buffer")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 247621236)!
    }()
    
    /// Converts the string to a <a href="https://en.wikipedia.org/wiki/Wide_character">wide character</a> (`wchar_t`, UTF-16 on Windows, UTF-32 on other platforms) encoded ``PackedByteArray``. This is the inverse of ``PackedByteArray/getStringFromWchar()``.
    public final func toWcharBuffer()-> PackedByteArray {
        let result: PackedByteArray = PackedByteArray()
        GString.method_to_wchar_buffer(&content, nil, &result.content, 0)
        return result
    }
    
    static var method_num_scientific: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("num_scientific")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 2710373411)!
    }()
    
    /// Converts the given `number` to a string representation, in scientific notation.
    /// 
    /// > Note: In C#, this method is not implemented. To achieve similar results, see C#'s <a href="https://learn.microsoft.com/en-us/dotnet/standard/base-types/standard-numeric-format-strings">Standard numeric format strings</a>
    /// 
    public static func numScientific(number: Double)-> GString {
        let result: GString = GString()
        let number = Double(number)
        withUnsafePointer(to: number) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GString.method_num_scientific(nil, pArgs, &result.content, 1)
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_num: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("num")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 1555901022)!
    }()
    
    /// Converts a float to a string representation of a decimal number, with the number of decimal places specified in `decimals`.
    /// 
    /// If `decimals` is `-1` as by default, the string representation may only have up to 14 significant digits, with digits before the decimal point having priority over digits after.
    /// 
    /// Trailing zeros are not included in the string. The last digit is rounded, not truncated.
    /// 
    /// **Example:**
    /// 
    public static func num(number: Double, decimals: Int64 = -1)-> GString {
        let result: GString = GString()
        let number = Double(number)
        withUnsafePointer(to: number) { pArg0 in
            withUnsafePointer(to: decimals) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        GString.method_num(nil, pArgs, &result.content, 2)
                    }
                    
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_num_int64: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("num_int64")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 2111271071)!
    }()
    
    /// Converts the given `number` to a string representation, with the given `base`.
    /// 
    /// By default, `base` is set to decimal (`10`). Other common bases in programming include binary (`2`), <a href="https://en.wikipedia.org/wiki/Octal">octal</a> (`8`), hexadecimal (`16`).
    /// 
    /// If `capitalizeHex` is `true`, digits higher than 9 are represented in uppercase.
    /// 
    public static func numInt64(number: Int64, base: Int64 = 10, capitalizeHex: Bool = false)-> GString {
        let result: GString = GString()
        withUnsafePointer(to: number) { pArg0 in
            withUnsafePointer(to: base) { pArg1 in
                withUnsafePointer(to: capitalizeHex) { pArg2 in
                    withUnsafePointer(to: UnsafeRawPointersN3(pArg0, pArg1, pArg2)) { pArgs in
                        pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 3) { pArgs in
                            GString.method_num_int64(nil, pArgs, &result.content, 3)
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_num_uint64: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("num_uint64")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 2111271071)!
    }()
    
    /// Converts the given unsigned integer to a string representation, with the given `base`.
    /// 
    /// By default, `base` is set to decimal (`10`). Other common bases in programming include binary (`2`), <a href="https://en.wikipedia.org/wiki/Octal">octal</a> (`8`), hexadecimal (`16`).
    /// 
    /// If `capitalizeHex` is `true`, digits higher than 9 are represented in uppercase.
    /// 
    public static func numUint64(number: Int64, base: Int64 = 10, capitalizeHex: Bool = false)-> GString {
        let result: GString = GString()
        withUnsafePointer(to: number) { pArg0 in
            withUnsafePointer(to: base) { pArg1 in
                withUnsafePointer(to: capitalizeHex) { pArg2 in
                    withUnsafePointer(to: UnsafeRawPointersN3(pArg0, pArg1, pArg2)) { pArgs in
                        pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 3) { pArgs in
                            GString.method_num_uint64(nil, pArgs, &result.content, 3)
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_chr: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("chr")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 897497541)!
    }()
    
    /// Returns a single Unicode character from the decimal `char`. You may use <a href="https://unicodelookup.com/">unicodelookup.com</a> or <a href="https://www.unicode.org/charts/">unicode.org</a> as points of reference.
    /// 
    public static func chr(char: Int64)-> GString {
        let result: GString = GString()
        withUnsafePointer(to: char) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GString.method_chr(nil, pArgs, &result.content, 1)
                }
                
            }
            
        }
        
        return result
    }
    
    static var method_humanize_size: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("humanize_size")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING, &name.content, 897497541)!
    }()
    
    /// Converts `size` which represents a number of bytes into a human-readable form.
    /// 
    /// The result is in <a href="https://en.wikipedia.org/wiki/Binary_prefix#IEC_prefixes">IEC prefix format</a>, which may end in either `"B"`, `"KiB"`, `"MiB"`, `"GiB"`, `"TiB"`, `"PiB"`, or `"EiB"`.
    /// 
    public static func humanizeSize(_ size: Int64)-> GString {
        let result: GString = GString()
        withUnsafePointer(to: size) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    GString.method_humanize_size(nil, pArgs, &result.content, 1)
                }
                
            }
            
        }
        
        return result
    }
    
    static var operator_4: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_BOOL)!
    }()
    
    public static func % (lhs: GString, rhs: Bool) -> GString  {
        let result: GString = GString()
        withUnsafePointer(to: lhs.content) { pArg0 in
            withUnsafePointer(to: rhs) { pArg1 in
                GString.operator_4(pArg0, pArg1, &result.content)
            }
            
        }
        
        return result
    }
    
    static var operator_5: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_INT)!
    }()
    
    public static func % (lhs: GString, rhs: Int64) -> GString  {
        let result: GString = GString()
        withUnsafePointer(to: lhs.content) { pArg0 in
            withUnsafePointer(to: rhs) { pArg1 in
                GString.operator_5(pArg0, pArg1, &result.content)
            }
            
        }
        
        return result
    }
    
    static var operator_6: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_FLOAT)!
    }()
    
    public static func % (lhs: GString, rhs: Double) -> GString  {
        let result: GString = GString()
        withUnsafePointer(to: lhs.content) { pArg0 in
            let rhs = Double(rhs)
            withUnsafePointer(to: rhs) { pArg1 in
                GString.operator_6(pArg0, pArg1, &result.content)
            }
            
        }
        
        return result
    }
    
    static var operator_7: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_STRING)!
    }()
    
    /// Returns `true` if both strings contain the same sequence of characters.
    public static func == (lhs: GString, rhs: GString) -> Bool  {
        var result: Bool = Bool()
        withUnsafePointer(to: lhs.content) { pArg0 in
            withUnsafePointer(to: rhs.content) { pArg1 in
                GString.operator_7(pArg0, pArg1, &result)
            }
            
        }
        
        return result
    }
    
    static var operator_8: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_STRING)!
    }()
    
    /// Returns `true` if both strings do not contain the same sequence of characters.
    public static func != (lhs: GString, rhs: GString) -> Bool  {
        var result: Bool = Bool()
        withUnsafePointer(to: lhs.content) { pArg0 in
            withUnsafePointer(to: rhs.content) { pArg1 in
                GString.operator_8(pArg0, pArg1, &result)
            }
            
        }
        
        return result
    }
    
    static var operator_9: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_STRING)!
    }()
    
    /// Returns `true` if the left ``String`` comes before `right` in <a href="https://en.wikipedia.org/wiki/List_of_Unicode_characters">Unicode order</a>, which roughly matches the alphabetical order. Useful for sorting.
    public static func < (lhs: GString, rhs: GString) -> Bool  {
        var result: Bool = Bool()
        withUnsafePointer(to: lhs.content) { pArg0 in
            withUnsafePointer(to: rhs.content) { pArg1 in
                GString.operator_9(pArg0, pArg1, &result)
            }
            
        }
        
        return result
    }
    
    static var operator_10: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_LESS, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_STRING)!
    }()
    
    /// Returns `true` if the left ``String`` comes before `right` in <a href="https://en.wikipedia.org/wiki/List_of_Unicode_characters">Unicode order</a>, which roughly matches the alphabetical order, or if both are equal.
    public static func <= (lhs: GString, rhs: GString) -> Bool  {
        var result: Bool = Bool()
        withUnsafePointer(to: lhs.content) { pArg0 in
            withUnsafePointer(to: rhs.content) { pArg1 in
                GString.operator_10(pArg0, pArg1, &result)
            }
            
        }
        
        return result
    }
    
    static var operator_11: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_GREATER, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_STRING)!
    }()
    
    /// Returns `true` if the left ``String`` comes after `right` in <a href="https://en.wikipedia.org/wiki/List_of_Unicode_characters">Unicode order</a>, which roughly matches the alphabetical order. Useful for sorting.
    public static func > (lhs: GString, rhs: GString) -> Bool  {
        var result: Bool = Bool()
        withUnsafePointer(to: lhs.content) { pArg0 in
            withUnsafePointer(to: rhs.content) { pArg1 in
                GString.operator_11(pArg0, pArg1, &result)
            }
            
        }
        
        return result
    }
    
    static var operator_12: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_STRING)!
    }()
    
    /// Returns `true` if the left ``String`` comes after `right` in <a href="https://en.wikipedia.org/wiki/List_of_Unicode_characters">Unicode order</a>, which roughly matches the alphabetical order, or if both are equal.
    public static func >= (lhs: GString, rhs: GString) -> Bool  {
        var result: Bool = Bool()
        withUnsafePointer(to: lhs.content) { pArg0 in
            withUnsafePointer(to: rhs.content) { pArg1 in
                GString.operator_12(pArg0, pArg1, &result)
            }
            
        }
        
        return result
    }
    
    static var operator_13: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_ADD, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_STRING)!
    }()
    
    /// Appends `right` at the end of this ``String``, also known as a string concatenation.
    public static func + (lhs: GString, rhs: GString) -> GString  {
        let result: GString = GString()
        withUnsafePointer(to: lhs.content) { pArg0 in
            withUnsafePointer(to: rhs.content) { pArg1 in
                GString.operator_13(pArg0, pArg1, &result.content)
            }
            
        }
        
        return result
    }
    
    static var operator_14: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_STRING)!
    }()
    
    public static func % (lhs: GString, rhs: GString) -> GString  {
        let result: GString = GString()
        withUnsafePointer(to: lhs.content) { pArg0 in
            withUnsafePointer(to: rhs.content) { pArg1 in
                GString.operator_14(pArg0, pArg1, &result.content)
            }
            
        }
        
        return result
    }
    
    static var operator_16: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_VECTOR2)!
    }()
    
    public static func % (lhs: GString, rhs: Vector2) -> GString  {
        let result: GString = GString()
        withUnsafePointer(to: lhs.content) { pArg0 in
            withUnsafePointer(to: rhs) { pArg1 in
                GString.operator_16(pArg0, pArg1, &result.content)
            }
            
        }
        
        return result
    }
    
    static var operator_17: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_VECTOR2I)!
    }()
    
    public static func % (lhs: GString, rhs: Vector2i) -> GString  {
        let result: GString = GString()
        withUnsafePointer(to: lhs.content) { pArg0 in
            withUnsafePointer(to: rhs) { pArg1 in
                GString.operator_17(pArg0, pArg1, &result.content)
            }
            
        }
        
        return result
    }
    
    static var operator_18: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_RECT2)!
    }()
    
    public static func % (lhs: GString, rhs: Rect2) -> GString  {
        let result: GString = GString()
        withUnsafePointer(to: lhs.content) { pArg0 in
            withUnsafePointer(to: rhs) { pArg1 in
                GString.operator_18(pArg0, pArg1, &result.content)
            }
            
        }
        
        return result
    }
    
    static var operator_19: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_RECT2I)!
    }()
    
    public static func % (lhs: GString, rhs: Rect2i) -> GString  {
        let result: GString = GString()
        withUnsafePointer(to: lhs.content) { pArg0 in
            withUnsafePointer(to: rhs) { pArg1 in
                GString.operator_19(pArg0, pArg1, &result.content)
            }
            
        }
        
        return result
    }
    
    static var operator_20: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_VECTOR3)!
    }()
    
    public static func % (lhs: GString, rhs: Vector3) -> GString  {
        let result: GString = GString()
        withUnsafePointer(to: lhs.content) { pArg0 in
            withUnsafePointer(to: rhs) { pArg1 in
                GString.operator_20(pArg0, pArg1, &result.content)
            }
            
        }
        
        return result
    }
    
    static var operator_21: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_VECTOR3I)!
    }()
    
    public static func % (lhs: GString, rhs: Vector3i) -> GString  {
        let result: GString = GString()
        withUnsafePointer(to: lhs.content) { pArg0 in
            withUnsafePointer(to: rhs) { pArg1 in
                GString.operator_21(pArg0, pArg1, &result.content)
            }
            
        }
        
        return result
    }
    
    static var operator_22: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_TRANSFORM2D)!
    }()
    
    public static func % (lhs: GString, rhs: Transform2D) -> GString  {
        let result: GString = GString()
        withUnsafePointer(to: lhs.content) { pArg0 in
            withUnsafePointer(to: rhs) { pArg1 in
                GString.operator_22(pArg0, pArg1, &result.content)
            }
            
        }
        
        return result
    }
    
    static var operator_23: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_VECTOR4)!
    }()
    
    public static func % (lhs: GString, rhs: Vector4) -> GString  {
        let result: GString = GString()
        withUnsafePointer(to: lhs.content) { pArg0 in
            withUnsafePointer(to: rhs) { pArg1 in
                GString.operator_23(pArg0, pArg1, &result.content)
            }
            
        }
        
        return result
    }
    
    static var operator_24: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_VECTOR4I)!
    }()
    
    public static func % (lhs: GString, rhs: Vector4i) -> GString  {
        let result: GString = GString()
        withUnsafePointer(to: lhs.content) { pArg0 in
            withUnsafePointer(to: rhs) { pArg1 in
                GString.operator_24(pArg0, pArg1, &result.content)
            }
            
        }
        
        return result
    }
    
    static var operator_25: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_PLANE)!
    }()
    
    public static func % (lhs: GString, rhs: Plane) -> GString  {
        let result: GString = GString()
        withUnsafePointer(to: lhs.content) { pArg0 in
            withUnsafePointer(to: rhs) { pArg1 in
                GString.operator_25(pArg0, pArg1, &result.content)
            }
            
        }
        
        return result
    }
    
    static var operator_26: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_QUATERNION)!
    }()
    
    public static func % (lhs: GString, rhs: Quaternion) -> GString  {
        let result: GString = GString()
        withUnsafePointer(to: lhs.content) { pArg0 in
            withUnsafePointer(to: rhs) { pArg1 in
                GString.operator_26(pArg0, pArg1, &result.content)
            }
            
        }
        
        return result
    }
    
    static var operator_27: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_AABB)!
    }()
    
    public static func % (lhs: GString, rhs: AABB) -> GString  {
        let result: GString = GString()
        withUnsafePointer(to: lhs.content) { pArg0 in
            withUnsafePointer(to: rhs) { pArg1 in
                GString.operator_27(pArg0, pArg1, &result.content)
            }
            
        }
        
        return result
    }
    
    static var operator_28: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_BASIS)!
    }()
    
    public static func % (lhs: GString, rhs: Basis) -> GString  {
        let result: GString = GString()
        withUnsafePointer(to: lhs.content) { pArg0 in
            withUnsafePointer(to: rhs) { pArg1 in
                GString.operator_28(pArg0, pArg1, &result.content)
            }
            
        }
        
        return result
    }
    
    static var operator_29: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_TRANSFORM3D)!
    }()
    
    public static func % (lhs: GString, rhs: Transform3D) -> GString  {
        let result: GString = GString()
        withUnsafePointer(to: lhs.content) { pArg0 in
            withUnsafePointer(to: rhs) { pArg1 in
                GString.operator_29(pArg0, pArg1, &result.content)
            }
            
        }
        
        return result
    }
    
    static var operator_30: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_PROJECTION)!
    }()
    
    public static func % (lhs: GString, rhs: Projection) -> GString  {
        let result: GString = GString()
        withUnsafePointer(to: lhs.content) { pArg0 in
            withUnsafePointer(to: rhs) { pArg1 in
                GString.operator_30(pArg0, pArg1, &result.content)
            }
            
        }
        
        return result
    }
    
    static var operator_31: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_COLOR)!
    }()
    
    public static func % (lhs: GString, rhs: Color) -> GString  {
        let result: GString = GString()
        withUnsafePointer(to: lhs.content) { pArg0 in
            withUnsafePointer(to: rhs) { pArg1 in
                GString.operator_31(pArg0, pArg1, &result.content)
            }
            
        }
        
        return result
    }
    
    static var operator_32: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_STRING_NAME)!
    }()
    
    /// Returns `true` if this ``String`` is equivalent to the given ``StringName``.
    public static func == (lhs: GString, rhs: StringName) -> Bool  {
        var result: Bool = Bool()
        withUnsafePointer(to: lhs.content) { pArg0 in
            withUnsafePointer(to: rhs.content) { pArg1 in
                GString.operator_32(pArg0, pArg1, &result)
            }
            
        }
        
        return result
    }
    
    static var operator_33: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_STRING_NAME)!
    }()
    
    /// Returns `true` if this ``String`` is not equivalent to the given ``StringName``.
    public static func != (lhs: GString, rhs: StringName) -> Bool  {
        var result: Bool = Bool()
        withUnsafePointer(to: lhs.content) { pArg0 in
            withUnsafePointer(to: rhs.content) { pArg1 in
                GString.operator_33(pArg0, pArg1, &result)
            }
            
        }
        
        return result
    }
    
    static var operator_34: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_ADD, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_STRING_NAME)!
    }()
    
    /// Appends `right` at the end of this ``String``, returning a ``String``. This is also known as a string concatenation.
    public static func + (lhs: GString, rhs: StringName) -> GString  {
        let result: GString = GString()
        withUnsafePointer(to: lhs.content) { pArg0 in
            withUnsafePointer(to: rhs.content) { pArg1 in
                GString.operator_34(pArg0, pArg1, &result.content)
            }
            
        }
        
        return result
    }
    
    static var operator_35: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_STRING_NAME)!
    }()
    
    public static func % (lhs: GString, rhs: StringName) -> GString  {
        let result: GString = GString()
        withUnsafePointer(to: lhs.content) { pArg0 in
            withUnsafePointer(to: rhs.content) { pArg1 in
                GString.operator_35(pArg0, pArg1, &result.content)
            }
            
        }
        
        return result
    }
    
    static var operator_37: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_NODE_PATH)!
    }()
    
    public static func % (lhs: GString, rhs: NodePath) -> GString  {
        let result: GString = GString()
        withUnsafePointer(to: lhs.content) { pArg0 in
            withUnsafePointer(to: rhs.content) { pArg1 in
                GString.operator_37(pArg0, pArg1, &result.content)
            }
            
        }
        
        return result
    }
    
    static var operator_38: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_OBJECT)!
    }()
    
    public static func % (lhs: GString, rhs: Object) -> GString  {
        let result: GString = GString()
        withUnsafePointer(to: lhs.content) { pArg0 in
            withUnsafePointer(to: rhs.handle) { pArg1 in
                GString.operator_38(pArg0, pArg1, &result.content)
            }
            
        }
        
        return result
    }
    
    static var operator_40: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_CALLABLE)!
    }()
    
    public static func % (lhs: GString, rhs: Callable) -> GString  {
        let result: GString = GString()
        withUnsafePointer(to: lhs.content) { pArg0 in
            withUnsafePointer(to: rhs.content) { pArg1 in
                GString.operator_40(pArg0, pArg1, &result.content)
            }
            
        }
        
        return result
    }
    
    static var operator_41: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_SIGNAL)!
    }()
    
    public static func % (lhs: GString, rhs: Signal) -> GString  {
        let result: GString = GString()
        withUnsafePointer(to: lhs.content) { pArg0 in
            withUnsafePointer(to: rhs.content) { pArg1 in
                GString.operator_41(pArg0, pArg1, &result.content)
            }
            
        }
        
        return result
    }
    
    static var operator_42: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_DICTIONARY)!
    }()
    
    public static func % (lhs: GString, rhs: GDictionary) -> GString  {
        let result: GString = GString()
        withUnsafePointer(to: lhs.content) { pArg0 in
            withUnsafePointer(to: rhs.content) { pArg1 in
                GString.operator_42(pArg0, pArg1, &result.content)
            }
            
        }
        
        return result
    }
    
    static var operator_44: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_ARRAY)!
    }()
    
    public static func % (lhs: GString, rhs: GArray) -> GString  {
        let result: GString = GString()
        withUnsafePointer(to: lhs.content) { pArg0 in
            withUnsafePointer(to: rhs.content) { pArg1 in
                GString.operator_44(pArg0, pArg1, &result.content)
            }
            
        }
        
        return result
    }
    
    static var operator_46: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY)!
    }()
    
    public static func % (lhs: GString, rhs: PackedByteArray) -> GString  {
        let result: GString = GString()
        withUnsafePointer(to: lhs.content) { pArg0 in
            withUnsafePointer(to: rhs.content) { pArg1 in
                GString.operator_46(pArg0, pArg1, &result.content)
            }
            
        }
        
        return result
    }
    
    static var operator_47: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_PACKED_INT32_ARRAY)!
    }()
    
    public static func % (lhs: GString, rhs: PackedInt32Array) -> GString  {
        let result: GString = GString()
        withUnsafePointer(to: lhs.content) { pArg0 in
            withUnsafePointer(to: rhs.content) { pArg1 in
                GString.operator_47(pArg0, pArg1, &result.content)
            }
            
        }
        
        return result
    }
    
    static var operator_48: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_PACKED_INT64_ARRAY)!
    }()
    
    public static func % (lhs: GString, rhs: PackedInt64Array) -> GString  {
        let result: GString = GString()
        withUnsafePointer(to: lhs.content) { pArg0 in
            withUnsafePointer(to: rhs.content) { pArg1 in
                GString.operator_48(pArg0, pArg1, &result.content)
            }
            
        }
        
        return result
    }
    
    static var operator_49: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT32_ARRAY)!
    }()
    
    public static func % (lhs: GString, rhs: PackedFloat32Array) -> GString  {
        let result: GString = GString()
        withUnsafePointer(to: lhs.content) { pArg0 in
            withUnsafePointer(to: rhs.content) { pArg1 in
                GString.operator_49(pArg0, pArg1, &result.content)
            }
            
        }
        
        return result
    }
    
    static var operator_50: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT64_ARRAY)!
    }()
    
    public static func % (lhs: GString, rhs: PackedFloat64Array) -> GString  {
        let result: GString = GString()
        withUnsafePointer(to: lhs.content) { pArg0 in
            withUnsafePointer(to: rhs.content) { pArg1 in
                GString.operator_50(pArg0, pArg1, &result.content)
            }
            
        }
        
        return result
    }
    
    static var operator_51: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_PACKED_STRING_ARRAY)!
    }()
    
    public static func % (lhs: GString, rhs: PackedStringArray) -> GString  {
        let result: GString = GString()
        withUnsafePointer(to: lhs.content) { pArg0 in
            withUnsafePointer(to: rhs.content) { pArg1 in
                GString.operator_51(pArg0, pArg1, &result.content)
            }
            
        }
        
        return result
    }
    
    static var operator_53: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR2_ARRAY)!
    }()
    
    public static func % (lhs: GString, rhs: PackedVector2Array) -> GString  {
        let result: GString = GString()
        withUnsafePointer(to: lhs.content) { pArg0 in
            withUnsafePointer(to: rhs.content) { pArg1 in
                GString.operator_53(pArg0, pArg1, &result.content)
            }
            
        }
        
        return result
    }
    
    static var operator_54: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR3_ARRAY)!
    }()
    
    public static func % (lhs: GString, rhs: PackedVector3Array) -> GString  {
        let result: GString = GString()
        withUnsafePointer(to: lhs.content) { pArg0 in
            withUnsafePointer(to: rhs.content) { pArg1 in
                GString.operator_54(pArg0, pArg1, &result.content)
            }
            
        }
        
        return result
    }
    
    static var operator_55: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_PACKED_COLOR_ARRAY)!
    }()
    
    public static func % (lhs: GString, rhs: PackedColorArray) -> GString  {
        let result: GString = GString()
        withUnsafePointer(to: lhs.content) { pArg0 in
            withUnsafePointer(to: rhs.content) { pArg1 in
                GString.operator_55(pArg0, pArg1, &result.content)
            }
            
        }
        
        return result
    }
    
    static var operator_56: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR4_ARRAY)!
    }()
    
    public static func % (lhs: GString, rhs: PackedVector4Array) -> GString  {
        let result: GString = GString()
        withUnsafePointer(to: lhs.content) { pArg0 in
            withUnsafePointer(to: rhs.content) { pArg1 in
                GString.operator_56(pArg0, pArg1, &result.content)
            }
            
        }
        
        return result
    }
    
}


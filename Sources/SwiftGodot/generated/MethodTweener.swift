// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Interpolates an abstract value and supplies it to a method called over time.
/// 
/// ``MethodTweener`` is similar to a combination of ``CallbackTweener`` and ``PropertyTweener``. It calls a method providing an interpolated value as a parameter. See ``Tween/tweenMethod(_:from:to:duration:)`` for more usage information.
/// 
/// The tweener will finish automatically if the callback's target object is freed.
/// 
/// > Note: ``Tween/tweenMethod(_:from:to:duration:)`` is the only correct way to create ``MethodTweener``. Any ``MethodTweener`` created manually will not function correctly.
/// 
open class MethodTweener: Tweener {
    override open class var godotClassName: StringName { "MethodTweener" }
    /* Methods */
    fileprivate static var method_set_delay: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_delay")
        return withUnsafePointer(to: &MethodTweener.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 266477812)!
            }
            
        }
        
    }()
    
    /// Sets the time in seconds after which the ``MethodTweener`` will start interpolating. By default there's no delay.
    public final func setDelay(_ delay: Double) -> MethodTweener? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        withUnsafePointer(to: delay) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(MethodTweener.method_set_delay, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                }
                
            }
            
        }
        
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_trans: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_trans")
        return withUnsafePointer(to: &MethodTweener.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3740975367)!
            }
            
        }
        
    }()
    
    /// Sets the type of used transition from ``Tween.TransitionType``. If not set, the default transition is used from the ``Tween`` that contains this Tweener.
    public final func setTrans(_ trans: Tween.TransitionType) -> MethodTweener? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        withUnsafePointer(to: trans.rawValue) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(MethodTweener.method_set_trans, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                }
                
            }
            
        }
        
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_ease: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_ease")
        return withUnsafePointer(to: &MethodTweener.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 315540545)!
            }
            
        }
        
    }()
    
    /// Sets the type of used easing from ``Tween.EaseType``. If not set, the default easing is used from the ``Tween`` that contains this Tweener.
    public final func setEase(_ ease: Tween.EaseType) -> MethodTweener? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        withUnsafePointer(to: ease.rawValue) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(MethodTweener.method_set_ease, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                }
                
            }
            
        }
        
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
}


// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Holds physics-related properties of a surface, namely its roughness and bounciness.
/// 
/// Holds physics-related properties of a surface, namely its roughness and bounciness. This class is used to apply these properties to a physics body.
open class PhysicsMaterial: Resource {
    override open class var godotClassName: StringName { "PhysicsMaterial" }
    
    /* Properties */
    
    /// The body's friction. Values range from `0` (frictionless) to `1` (maximum friction).
    final public var friction: Double {
        get {
            return get_friction ()
        }
        
        set {
            set_friction (newValue)
        }
        
    }
    
    /// If `true`, the physics engine will use the friction of the object marked as "rough" when two objects collide. If `false`, the physics engine will use the lowest friction of all colliding objects instead. If `true` for both colliding objects, the physics engine will use the highest friction.
    final public var rough: Bool {
        get {
            return is_rough ()
        }
        
        set {
            set_rough (newValue)
        }
        
    }
    
    /// The body's bounciness. Values range from `0` (no bounce) to `1` (full bounciness).
    /// 
    /// > Note: Even with ``bounce`` set to `1.0`, some energy will be lost over time due to linear and angular damping. To have a physics body that preserves all its energy over time, set ``bounce`` to `1.0`, the body's linear damp mode to **Replace** (if applicable), its linear damp to `0.0`, its angular damp mode to **Replace** (if applicable), and its angular damp to `0.0`.
    /// 
    final public var bounce: Double {
        get {
            return get_bounce ()
        }
        
        set {
            set_bounce (newValue)
        }
        
    }
    
    /// If `true`, subtracts the bounciness from the colliding object's bounciness instead of adding it.
    final public var absorbent: Bool {
        get {
            return is_absorbent ()
        }
        
        set {
            set_absorbent (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_friction: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_friction")
        return withUnsafePointer(to: &PhysicsMaterial.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_friction(_ friction: Double) {
        withUnsafePointer(to: friction) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(PhysicsMaterial.method_set_friction, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_friction: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_friction")
        return withUnsafePointer(to: &PhysicsMaterial.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_friction() -> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall(PhysicsMaterial.method_get_friction, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_rough: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_rough")
        return withUnsafePointer(to: &PhysicsMaterial.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_rough(_ rough: Bool) {
        withUnsafePointer(to: rough) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(PhysicsMaterial.method_set_rough, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_is_rough: GDExtensionMethodBindPtr = {
        let methodName = StringName("is_rough")
        return withUnsafePointer(to: &PhysicsMaterial.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_rough() -> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall(PhysicsMaterial.method_is_rough, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_bounce: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_bounce")
        return withUnsafePointer(to: &PhysicsMaterial.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_bounce(_ bounce: Double) {
        withUnsafePointer(to: bounce) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(PhysicsMaterial.method_set_bounce, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_bounce: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_bounce")
        return withUnsafePointer(to: &PhysicsMaterial.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_bounce() -> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall(PhysicsMaterial.method_get_bounce, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_absorbent: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_absorbent")
        return withUnsafePointer(to: &PhysicsMaterial.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_absorbent(_ absorbent: Bool) {
        withUnsafePointer(to: absorbent) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(PhysicsMaterial.method_set_absorbent, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_is_absorbent: GDExtensionMethodBindPtr = {
        let methodName = StringName("is_absorbent")
        return withUnsafePointer(to: &PhysicsMaterial.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_absorbent() -> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall(PhysicsMaterial.method_is_absorbent, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
}


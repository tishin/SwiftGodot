// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A 3D particle emitter.
/// 
/// 3D particle node used to create a variety of particle systems and effects. ``GPUParticles3D`` features an emitter that generates some number of particles at a given rate.
/// 
/// Use ``processMaterial`` to add a ``ParticleProcessMaterial`` to configure particle appearance and behavior. Alternatively, you can add a ``ShaderMaterial`` which will be applied to all particles.
/// 
/// 
/// 
/// This object emits the following signals:
/// 
/// - ``finished``
open class GPUParticles3D: GeometryInstance3D {
    override open class var godotClassName: StringName { "GPUParticles3D" }
    public enum DrawOrder: Int64, CaseIterable, CustomDebugStringConvertible {
        /// Particles are drawn in the order emitted.
        case index = 0 // DRAW_ORDER_INDEX
        /// Particles are drawn in order of remaining lifetime. In other words, the particle with the highest lifetime is drawn at the front.
        case lifetime = 1 // DRAW_ORDER_LIFETIME
        /// Particles are drawn in reverse order of remaining lifetime. In other words, the particle with the lowest lifetime is drawn at the front.
        case reverseLifetime = 2 // DRAW_ORDER_REVERSE_LIFETIME
        /// Particles are drawn in order of depth.
        case viewDepth = 3 // DRAW_ORDER_VIEW_DEPTH
        /// A textual representation of this instance, suitable for debugging
        public var debugDescription: String {
            switch self {
                case .index: return ".index"
                case .lifetime: return ".lifetime"
                case .reverseLifetime: return ".reverseLifetime"
                case .viewDepth: return ".viewDepth"
            }
            
        }
        
    }
    
    public enum EmitFlags: Int64, CaseIterable, CustomDebugStringConvertible {
        /// Particle starts at the specified position.
        case position = 1 // EMIT_FLAG_POSITION
        /// Particle starts with specified rotation and scale.
        case rotationScale = 2 // EMIT_FLAG_ROTATION_SCALE
        /// Particle starts with the specified velocity vector, which defines the emission direction and speed.
        case velocity = 4 // EMIT_FLAG_VELOCITY
        /// Particle starts with specified color.
        case color = 8 // EMIT_FLAG_COLOR
        /// Particle starts with specified `CUSTOM` data.
        case custom = 16 // EMIT_FLAG_CUSTOM
        /// A textual representation of this instance, suitable for debugging
        public var debugDescription: String {
            switch self {
                case .position: return ".position"
                case .rotationScale: return ".rotationScale"
                case .velocity: return ".velocity"
                case .color: return ".color"
                case .custom: return ".custom"
            }
            
        }
        
    }
    
    public enum TransformAlign: Int64, CaseIterable, CustomDebugStringConvertible {
        /// 
        case disabled = 0 // TRANSFORM_ALIGN_DISABLED
        /// 
        case zBillboard = 1 // TRANSFORM_ALIGN_Z_BILLBOARD
        /// 
        case yToVelocity = 2 // TRANSFORM_ALIGN_Y_TO_VELOCITY
        /// 
        case zBillboardYToVelocity = 3 // TRANSFORM_ALIGN_Z_BILLBOARD_Y_TO_VELOCITY
        /// A textual representation of this instance, suitable for debugging
        public var debugDescription: String {
            switch self {
                case .disabled: return ".disabled"
                case .zBillboard: return ".zBillboard"
                case .yToVelocity: return ".yToVelocity"
                case .zBillboardYToVelocity: return ".zBillboardYToVelocity"
            }
            
        }
        
    }
    
    /* Constants */
    /// Maximum number of draw passes supported.
    public static let maxDrawPasses = 4
    
    /* Properties */
    
    /// If `true`, particles are being emitted. ``emitting`` can be used to start and stop particles from emitting. However, if ``oneShot`` is `true` setting ``emitting`` to `true` will not restart the emission cycle unless all active particles have finished processing. Use the [signal finished] signal to be notified once all active particles finish processing.
    /// 
    /// > Note: For ``oneShot`` emitters, due to the particles being computed on the GPU, there may be a short period after receiving the [signal finished] signal during which setting this to `true` will not restart the emission cycle.
    /// 
    /// **Tip:** If your ``oneShot`` emitter needs to immediately restart emitting particles once [signal finished] signal is received, consider calling ``restart()`` instead of setting ``emitting``.
    /// 
    final public var emitting: Bool {
        get {
            return is_emitting ()
        }
        
        set {
            set_emitting (newValue)
        }
        
    }
    
    /// The number of particles to emit in one emission cycle. The effective emission rate is `(amount * amount_ratio) / lifetime` particles per second. Higher values will increase GPU requirements, even if not all particles are visible at a given time or if ``amountRatio`` is decreased.
    /// 
    /// > Note: Changing this value will cause the particle system to restart. To avoid this, change ``amountRatio`` instead.
    /// 
    final public var amount: Int32 {
        get {
            return get_amount ()
        }
        
        set {
            set_amount (newValue)
        }
        
    }
    
    /// The ratio of particles that should actually be emitted. If set to a value lower than `1.0`, this will set the amount of emitted particles throughout the lifetime to `amount * amount_ratio`. Unlike changing ``amount``, changing ``amountRatio`` while emitting does not affect already-emitted particles and doesn't cause the particle system to restart. ``amountRatio`` can be used to create effects that make the number of emitted particles vary over time.
    /// 
    /// > Note: Reducing the ``amountRatio`` has no performance benefit, since resources need to be allocated and processed for the total ``amount`` of particles regardless of the ``amountRatio``. If you don't intend to change the number of particles emitted while the particles are emitting, make sure ``amountRatio`` is set to `1` and change ``amount`` to your liking instead.
    /// 
    final public var amountRatio: Double {
        get {
            return get_amount_ratio ()
        }
        
        set {
            set_amount_ratio (newValue)
        }
        
    }
    
    /// Path to another ``GPUParticles3D`` node that will be used as a subemitter (see ``ParticleProcessMaterial/subEmitterMode``). Subemitters can be used to achieve effects such as fireworks, sparks on collision, bubbles popping into water drops, and more.
    /// 
    /// > Note: When ``subEmitter`` is set, the target ``GPUParticles3D`` node will no longer emit particles on its own.
    /// 
    final public var subEmitter: NodePath {
        get {
            return get_sub_emitter ()
        }
        
        set {
            set_sub_emitter (newValue)
        }
        
    }
    
    /// The amount of time each particle will exist (in seconds). The effective emission rate is `(amount * amount_ratio) / lifetime` particles per second.
    final public var lifetime: Double {
        get {
            return get_lifetime ()
        }
        
        set {
            set_lifetime (newValue)
        }
        
    }
    
    /// Causes all the particles in this node to interpolate towards the end of their lifetime.
    /// 
    /// > Note: This only works when used with a ``ParticleProcessMaterial``. It needs to be manually implemented for custom process shaders.
    /// 
    final public var interpToEnd: Double {
        get {
            return get_interp_to_end ()
        }
        
        set {
            set_interp_to_end (newValue)
        }
        
    }
    
    /// If `true`, only the number of particles equal to ``amount`` will be emitted.
    final public var oneShot: Bool {
        get {
            return get_one_shot ()
        }
        
        set {
            set_one_shot (newValue)
        }
        
    }
    
    /// Amount of time to preprocess the particles before animation starts. Lets you start the animation some time after particles have started emitting.
    final public var preprocess: Double {
        get {
            return get_pre_process_time ()
        }
        
        set {
            set_pre_process_time (newValue)
        }
        
    }
    
    /// Speed scaling ratio. A value of `0` can be used to pause the particles.
    final public var speedScale: Double {
        get {
            return get_speed_scale ()
        }
        
        set {
            set_speed_scale (newValue)
        }
        
    }
    
    /// Time ratio between each emission. If `0`, particles are emitted continuously. If `1`, all particles are emitted simultaneously.
    final public var explosiveness: Double {
        get {
            return get_explosiveness_ratio ()
        }
        
        set {
            set_explosiveness_ratio (newValue)
        }
        
    }
    
    /// Emission randomness ratio.
    final public var randomness: Double {
        get {
            return get_randomness_ratio ()
        }
        
        set {
            set_randomness_ratio (newValue)
        }
        
    }
    
    /// The particle system's frame rate is fixed to a value. For example, changing the value to 2 will make the particles render at 2 frames per second. Note this does not slow down the simulation of the particle system itself.
    final public var fixedFps: Int32 {
        get {
            return get_fixed_fps ()
        }
        
        set {
            set_fixed_fps (newValue)
        }
        
    }
    
    /// Enables particle interpolation, which makes the particle movement smoother when their ``fixedFps`` is lower than the screen refresh rate.
    final public var interpolate: Bool {
        get {
            return get_interpolate ()
        }
        
        set {
            set_interpolate (newValue)
        }
        
    }
    
    /// If `true`, results in fractional delta calculation which has a smoother particles display effect.
    final public var fractDelta: Bool {
        get {
            return get_fractional_delta ()
        }
        
        set {
            set_fractional_delta (newValue)
        }
        
    }
    
    /// The base diameter for particle collision in meters. If particles appear to sink into the ground when colliding, increase this value. If particles appear to float when colliding, decrease this value. Only effective if ``ParticleProcessMaterial/collisionMode`` is ``ParticleProcessMaterial/CollisionMode/collisionRigid`` or ``ParticleProcessMaterial/CollisionMode/collisionHideOnContact``.
    /// 
    /// > Note: Particles always have a spherical collision shape.
    /// 
    final public var collisionBaseSize: Double {
        get {
            return get_collision_base_size ()
        }
        
        set {
            set_collision_base_size (newValue)
        }
        
    }
    
    /// The ``AABB`` that determines the node's region which needs to be visible on screen for the particle system to be active. ``GeometryInstance3D/extraCullMargin`` is added on each of the AABB's axes. Particle collisions and attraction will only occur within this area.
    /// 
    /// Grow the box if particles suddenly appear/disappear when the node enters/exits the screen. The ``AABB`` can be grown via code or with the **Particles → Generate AABB** editor tool.
    /// 
    /// > Note: ``visibilityAabb`` is overridden by ``GeometryInstance3D/customAabb`` if that property is set to a non-default value.
    /// 
    final public var visibilityAabb: AABB {
        get {
            return get_visibility_aabb ()
        }
        
        set {
            set_visibility_aabb (newValue)
        }
        
    }
    
    /// If `true`, particles use the parent node's coordinate space (known as local coordinates). This will cause particles to move and rotate along the ``GPUParticles3D`` node (and its parents) when it is moved or rotated. If `false`, particles use global coordinates; they will not move or rotate along the ``GPUParticles3D`` node (and its parents) when it is moved or rotated.
    final public var localCoords: Bool {
        get {
            return get_use_local_coordinates ()
        }
        
        set {
            set_use_local_coordinates (newValue)
        }
        
    }
    
    /// Particle draw order. Uses ``GPUParticles3D/DrawOrder`` values.
    /// 
    /// > Note: .index is the only option that supports motion vectors for effects like TAA. It is suggested to use this draw order if the particles are opaque to fix ghosting artifacts.
    /// 
    final public var drawOrder: GPUParticles3D.DrawOrder {
        get {
            return get_draw_order ()
        }
        
        set {
            set_draw_order (newValue)
        }
        
    }
    
    final public var transformAlign: GPUParticles3D.TransformAlign {
        get {
            return get_transform_align ()
        }
        
        set {
            set_transform_align (newValue)
        }
        
    }
    
    /// If `true`, enables particle trails using a mesh skinning system. Designed to work with ``RibbonTrailMesh`` and ``TubeTrailMesh``.
    /// 
    /// > Note: ``BaseMaterial3D/useParticleTrails`` must also be enabled on the particle mesh's material. Otherwise, setting ``trailEnabled`` to `true` will have no effect.
    /// 
    /// > Note: Unlike ``GPUParticles2D``, the number of trail sections and subdivisions is set in the ``RibbonTrailMesh`` or the ``TubeTrailMesh``'s properties.
    /// 
    final public var trailEnabled: Bool {
        get {
            return is_trail_enabled ()
        }
        
        set {
            set_trail_enabled (newValue)
        }
        
    }
    
    /// The amount of time the particle's trail should represent (in seconds). Only effective if ``trailEnabled`` is `true`.
    final public var trailLifetime: Double {
        get {
            return get_trail_lifetime ()
        }
        
        set {
            set_trail_lifetime (newValue)
        }
        
    }
    
    /// ``Material`` for processing particles. Can be a ``ParticleProcessMaterial`` or a ``ShaderMaterial``.
    final public var processMaterial: Material? {
        get {
            return get_process_material ()
        }
        
        set {
            set_process_material (newValue)
        }
        
    }
    
    /// The number of draw passes when rendering particles.
    final public var drawPasses: Int32 {
        get {
            return get_draw_passes ()
        }
        
        set {
            set_draw_passes (newValue)
        }
        
    }
    
    /// ``Mesh`` that is drawn for the first draw pass.
    final public var drawPass1: Mesh? {
        get {
            return get_draw_pass_mesh (0)
        }
        
        set {
            set_draw_pass_mesh (0, newValue)
        }
        
    }
    
    /// ``Mesh`` that is drawn for the second draw pass.
    final public var drawPass2: Mesh? {
        get {
            return get_draw_pass_mesh (1)
        }
        
        set {
            set_draw_pass_mesh (1, newValue)
        }
        
    }
    
    /// ``Mesh`` that is drawn for the third draw pass.
    final public var drawPass3: Mesh? {
        get {
            return get_draw_pass_mesh (2)
        }
        
        set {
            set_draw_pass_mesh (2, newValue)
        }
        
    }
    
    /// ``Mesh`` that is drawn for the fourth draw pass.
    final public var drawPass4: Mesh? {
        get {
            return get_draw_pass_mesh (3)
        }
        
        set {
            set_draw_pass_mesh (3, newValue)
        }
        
    }
    
    final public var drawSkin: Skin? {
        get {
            return get_skin ()
        }
        
        set {
            set_skin (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_emitting: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_emitting")
        return withUnsafePointer(to: &GPUParticles3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_emitting(_ emitting: Bool) {
        withUnsafePointer(to: emitting) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(GPUParticles3D.method_set_emitting, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_set_amount: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_amount")
        return withUnsafePointer(to: &GPUParticles3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_amount(_ amount: Int32) {
        withUnsafePointer(to: amount) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(GPUParticles3D.method_set_amount, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_set_lifetime: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_lifetime")
        return withUnsafePointer(to: &GPUParticles3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_lifetime(_ secs: Double) {
        withUnsafePointer(to: secs) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(GPUParticles3D.method_set_lifetime, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_set_one_shot: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_one_shot")
        return withUnsafePointer(to: &GPUParticles3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_one_shot(_ enable: Bool) {
        withUnsafePointer(to: enable) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(GPUParticles3D.method_set_one_shot, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_set_pre_process_time: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_pre_process_time")
        return withUnsafePointer(to: &GPUParticles3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_pre_process_time(_ secs: Double) {
        withUnsafePointer(to: secs) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(GPUParticles3D.method_set_pre_process_time, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_set_explosiveness_ratio: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_explosiveness_ratio")
        return withUnsafePointer(to: &GPUParticles3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_explosiveness_ratio(_ ratio: Double) {
        withUnsafePointer(to: ratio) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(GPUParticles3D.method_set_explosiveness_ratio, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_set_randomness_ratio: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_randomness_ratio")
        return withUnsafePointer(to: &GPUParticles3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_randomness_ratio(_ ratio: Double) {
        withUnsafePointer(to: ratio) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(GPUParticles3D.method_set_randomness_ratio, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_set_visibility_aabb: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_visibility_aabb")
        return withUnsafePointer(to: &GPUParticles3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 259215842)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_visibility_aabb(_ aabb: AABB) {
        withUnsafePointer(to: aabb) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(GPUParticles3D.method_set_visibility_aabb, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_set_use_local_coordinates: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_use_local_coordinates")
        return withUnsafePointer(to: &GPUParticles3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_use_local_coordinates(_ enable: Bool) {
        withUnsafePointer(to: enable) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(GPUParticles3D.method_set_use_local_coordinates, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_set_fixed_fps: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_fixed_fps")
        return withUnsafePointer(to: &GPUParticles3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_fixed_fps(_ fps: Int32) {
        withUnsafePointer(to: fps) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(GPUParticles3D.method_set_fixed_fps, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_set_fractional_delta: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_fractional_delta")
        return withUnsafePointer(to: &GPUParticles3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_fractional_delta(_ enable: Bool) {
        withUnsafePointer(to: enable) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(GPUParticles3D.method_set_fractional_delta, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_set_interpolate: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_interpolate")
        return withUnsafePointer(to: &GPUParticles3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_interpolate(_ enable: Bool) {
        withUnsafePointer(to: enable) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(GPUParticles3D.method_set_interpolate, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_set_process_material: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_process_material")
        return withUnsafePointer(to: &GPUParticles3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2757459619)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_process_material(_ material: Material?) {
        withUnsafePointer(to: material?.handle) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(GPUParticles3D.method_set_process_material, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_set_speed_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_speed_scale")
        return withUnsafePointer(to: &GPUParticles3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_speed_scale(_ scale: Double) {
        withUnsafePointer(to: scale) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(GPUParticles3D.method_set_speed_scale, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_set_collision_base_size: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_collision_base_size")
        return withUnsafePointer(to: &GPUParticles3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_collision_base_size(_ size: Double) {
        withUnsafePointer(to: size) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(GPUParticles3D.method_set_collision_base_size, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_set_interp_to_end: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_interp_to_end")
        return withUnsafePointer(to: &GPUParticles3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_interp_to_end(_ interp: Double) {
        withUnsafePointer(to: interp) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(GPUParticles3D.method_set_interp_to_end, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_is_emitting: GDExtensionMethodBindPtr = {
        let methodName = StringName("is_emitting")
        return withUnsafePointer(to: &GPUParticles3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_emitting() -> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall(GPUParticles3D.method_is_emitting, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_amount: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_amount")
        return withUnsafePointer(to: &GPUParticles3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_amount() -> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall(GPUParticles3D.method_get_amount, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_lifetime: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_lifetime")
        return withUnsafePointer(to: &GPUParticles3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_lifetime() -> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall(GPUParticles3D.method_get_lifetime, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_one_shot: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_one_shot")
        return withUnsafePointer(to: &GPUParticles3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_one_shot() -> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall(GPUParticles3D.method_get_one_shot, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_pre_process_time: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_pre_process_time")
        return withUnsafePointer(to: &GPUParticles3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_pre_process_time() -> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall(GPUParticles3D.method_get_pre_process_time, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_explosiveness_ratio: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_explosiveness_ratio")
        return withUnsafePointer(to: &GPUParticles3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_explosiveness_ratio() -> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall(GPUParticles3D.method_get_explosiveness_ratio, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_randomness_ratio: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_randomness_ratio")
        return withUnsafePointer(to: &GPUParticles3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_randomness_ratio() -> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall(GPUParticles3D.method_get_randomness_ratio, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_visibility_aabb: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_visibility_aabb")
        return withUnsafePointer(to: &GPUParticles3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1068685055)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_visibility_aabb() -> AABB {
        var _result: AABB = AABB ()
        gi.object_method_bind_ptrcall(GPUParticles3D.method_get_visibility_aabb, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_use_local_coordinates: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_use_local_coordinates")
        return withUnsafePointer(to: &GPUParticles3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_use_local_coordinates() -> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall(GPUParticles3D.method_get_use_local_coordinates, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_fixed_fps: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_fixed_fps")
        return withUnsafePointer(to: &GPUParticles3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_fixed_fps() -> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall(GPUParticles3D.method_get_fixed_fps, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_fractional_delta: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_fractional_delta")
        return withUnsafePointer(to: &GPUParticles3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_fractional_delta() -> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall(GPUParticles3D.method_get_fractional_delta, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_interpolate: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_interpolate")
        return withUnsafePointer(to: &GPUParticles3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_interpolate() -> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall(GPUParticles3D.method_get_interpolate, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_process_material: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_process_material")
        return withUnsafePointer(to: &GPUParticles3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 5934680)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_process_material() -> Material? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall(GPUParticles3D.method_get_process_material, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_get_speed_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_speed_scale")
        return withUnsafePointer(to: &GPUParticles3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_speed_scale() -> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall(GPUParticles3D.method_get_speed_scale, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_collision_base_size: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_collision_base_size")
        return withUnsafePointer(to: &GPUParticles3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_collision_base_size() -> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall(GPUParticles3D.method_get_collision_base_size, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_interp_to_end: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_interp_to_end")
        return withUnsafePointer(to: &GPUParticles3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_interp_to_end() -> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall(GPUParticles3D.method_get_interp_to_end, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_draw_order: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_draw_order")
        return withUnsafePointer(to: &GPUParticles3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1208074815)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_draw_order(_ order: GPUParticles3D.DrawOrder) {
        withUnsafePointer(to: order.rawValue) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(GPUParticles3D.method_set_draw_order, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_draw_order: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_draw_order")
        return withUnsafePointer(to: &GPUParticles3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3770381780)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_draw_order() -> GPUParticles3D.DrawOrder {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall(GPUParticles3D.method_get_draw_order, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return GPUParticles3D.DrawOrder (rawValue: _result)!
    }
    
    fileprivate static var method_set_draw_passes: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_draw_passes")
        return withUnsafePointer(to: &GPUParticles3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_draw_passes(_ passes: Int32) {
        withUnsafePointer(to: passes) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(GPUParticles3D.method_set_draw_passes, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_set_draw_pass_mesh: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_draw_pass_mesh")
        return withUnsafePointer(to: &GPUParticles3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 969122797)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Sets the ``Mesh`` that is drawn at index `pass`.
    fileprivate final func set_draw_pass_mesh(_ pass: Int32, _ mesh: Mesh?) {
        withUnsafePointer(to: pass) { pArg0 in
            withUnsafePointer(to: mesh?.handle) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(GPUParticles3D.method_set_draw_pass_mesh, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_draw_passes: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_draw_passes")
        return withUnsafePointer(to: &GPUParticles3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_draw_passes() -> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall(GPUParticles3D.method_get_draw_passes, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_draw_pass_mesh: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_draw_pass_mesh")
        return withUnsafePointer(to: &GPUParticles3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1576363275)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Returns the ``Mesh`` that is drawn at index `pass`.
    fileprivate final func get_draw_pass_mesh(_ pass: Int32) -> Mesh? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        withUnsafePointer(to: pass) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(GPUParticles3D.method_get_draw_pass_mesh, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                }
                
            }
            
        }
        
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_skin: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_skin")
        return withUnsafePointer(to: &GPUParticles3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3971435618)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_skin(_ skin: Skin?) {
        withUnsafePointer(to: skin?.handle) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(GPUParticles3D.method_set_skin, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_skin: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_skin")
        return withUnsafePointer(to: &GPUParticles3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2074563878)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_skin() -> Skin? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall(GPUParticles3D.method_get_skin, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_restart: GDExtensionMethodBindPtr = {
        let methodName = StringName("restart")
        return withUnsafePointer(to: &GPUParticles3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Restarts the particle emission cycle, clearing existing particles. To avoid particles vanishing from the viewport, wait for the [signal finished] signal before calling.
    /// 
    /// > Note: The [signal finished] signal is only emitted by ``oneShot`` emitters.
    /// 
    public final func restart() {
        gi.object_method_bind_ptrcall(GPUParticles3D.method_restart, UnsafeMutableRawPointer(mutating: handle), nil, nil)
        
    }
    
    fileprivate static var method_capture_aabb: GDExtensionMethodBindPtr = {
        let methodName = StringName("capture_aabb")
        return withUnsafePointer(to: &GPUParticles3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1068685055)!
            }
            
        }
        
    }()
    
    /// Returns the axis-aligned bounding box that contains all the particles that are active in the current frame.
    public final func captureAabb() -> AABB {
        var _result: AABB = AABB ()
        gi.object_method_bind_ptrcall(GPUParticles3D.method_capture_aabb, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_sub_emitter: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_sub_emitter")
        return withUnsafePointer(to: &GPUParticles3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1348162250)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_sub_emitter(_ path: NodePath) {
        withUnsafePointer(to: path.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(GPUParticles3D.method_set_sub_emitter, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_sub_emitter: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_sub_emitter")
        return withUnsafePointer(to: &GPUParticles3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 4075236667)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_sub_emitter() -> NodePath {
        let _result: NodePath = NodePath ()
        gi.object_method_bind_ptrcall(GPUParticles3D.method_get_sub_emitter, UnsafeMutableRawPointer(mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_emit_particle: GDExtensionMethodBindPtr = {
        let methodName = StringName("emit_particle")
        return withUnsafePointer(to: &GPUParticles3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 992173727)!
            }
            
        }
        
    }()
    
    /// Emits a single particle. Whether `xform`, `velocity`, `color` and `custom` are applied depends on the value of `flags`. See ``GPUParticles3D/EmitFlags``.
    /// 
    /// The default ParticleProcessMaterial will overwrite `color` and use the contents of `custom` as `(rotation, age, animation, lifetime)`.
    /// 
    public final func emitParticle(xform: Transform3D, velocity: Vector3, color: Color, custom: Color, flags: UInt32) {
        withUnsafePointer(to: xform) { pArg0 in
            withUnsafePointer(to: velocity) { pArg1 in
                withUnsafePointer(to: color) { pArg2 in
                    withUnsafePointer(to: custom) { pArg3 in
                        withUnsafePointer(to: flags) { pArg4 in
                            withUnsafePointer(to: UnsafeRawPointersN5(pArg0, pArg1, pArg2, pArg3, pArg4)) { pArgs in
                                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 5) { pArgs in
                                    gi.object_method_bind_ptrcall(GPUParticles3D.method_emit_particle, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                                }
                                
                            }
                            
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_set_trail_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_trail_enabled")
        return withUnsafePointer(to: &GPUParticles3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_trail_enabled(_ enabled: Bool) {
        withUnsafePointer(to: enabled) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(GPUParticles3D.method_set_trail_enabled, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_set_trail_lifetime: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_trail_lifetime")
        return withUnsafePointer(to: &GPUParticles3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_trail_lifetime(_ secs: Double) {
        withUnsafePointer(to: secs) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(GPUParticles3D.method_set_trail_lifetime, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_is_trail_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName("is_trail_enabled")
        return withUnsafePointer(to: &GPUParticles3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_trail_enabled() -> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall(GPUParticles3D.method_is_trail_enabled, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_trail_lifetime: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_trail_lifetime")
        return withUnsafePointer(to: &GPUParticles3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_trail_lifetime() -> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall(GPUParticles3D.method_get_trail_lifetime, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_transform_align: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_transform_align")
        return withUnsafePointer(to: &GPUParticles3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3892425954)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_transform_align(_ align: GPUParticles3D.TransformAlign) {
        withUnsafePointer(to: align.rawValue) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(GPUParticles3D.method_set_transform_align, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_transform_align: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_transform_align")
        return withUnsafePointer(to: &GPUParticles3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2100992166)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_transform_align() -> GPUParticles3D.TransformAlign {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall(GPUParticles3D.method_get_transform_align, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return GPUParticles3D.TransformAlign (rawValue: _result)!
    }
    
    fileprivate static var method_convert_from_particles: GDExtensionMethodBindPtr = {
        let methodName = StringName("convert_from_particles")
        return withUnsafePointer(to: &GPUParticles3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1078189570)!
            }
            
        }
        
    }()
    
    /// Sets this node's properties to match a given ``CPUParticles3D`` node.
    public final func convertFromParticles(_ particles: Node?) {
        withUnsafePointer(to: particles?.handle) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(GPUParticles3D.method_convert_from_particles, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_set_amount_ratio: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_amount_ratio")
        return withUnsafePointer(to: &GPUParticles3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_amount_ratio(_ ratio: Double) {
        withUnsafePointer(to: ratio) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(GPUParticles3D.method_set_amount_ratio, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_amount_ratio: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_amount_ratio")
        return withUnsafePointer(to: &GPUParticles3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_amount_ratio() -> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall(GPUParticles3D.method_get_amount_ratio, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    // Signals 
    /// Emitted when all active particles have finished processing. To immediately emit new particles, call ``restart()``.
    /// 
    /// Never emitted when ``oneShot`` is disabled, as particles will be emitted and processed continuously.
    /// 
    /// > Note: For ``oneShot`` emitters, due to the particles being computed on the GPU, there may be a short period after receiving the signal during which setting ``emitting`` to `true` will not restart the emission cycle. This delay is avoided by instead calling ``restart()``.
    /// 
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.finished.connect {
    ///    print ("caught signal")
    /// }
    /// ```
    public var finished: SimpleSignal { SimpleSignal (target: self, signalName: "finished") }
    
}


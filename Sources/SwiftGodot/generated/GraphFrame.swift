// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// GraphFrame is a special ``GraphElement`` that can be used to organize other ``GraphElement``s inside a ``GraphEdit``.
/// 
/// GraphFrame is a special ``GraphElement`` to which other ``GraphElement``s can be attached. It can be configured to automatically resize to enclose all attached ``GraphElement``s. If the frame is moved, all the attached ``GraphElement``s inside it will be moved as well.
/// 
/// A GraphFrame is always kept behind the connection layer and other ``GraphElement``s inside a ``GraphEdit``.
/// 
/// 
/// 
/// This object emits the following signals:
/// 
/// - ``autoshrinkChanged``
open class GraphFrame: GraphElement {
    override open class var godotClassName: StringName { "GraphFrame" }
    
    /* Properties */
    
    /// Title of the frame.
    final public var title: String {
        get {
            return get_title ()
        }
        
        set {
            set_title (newValue)
        }
        
    }
    
    /// If `true`, the frame's rect will be adjusted automatically to enclose all attached ``GraphElement``s.
    final public var autoshrinkEnabled: Bool {
        get {
            return is_autoshrink_enabled ()
        }
        
        set {
            set_autoshrink_enabled (newValue)
        }
        
    }
    
    /// The margin around the attached nodes that is used to calculate the size of the frame when ``autoshrinkEnabled`` is `true`.
    final public var autoshrinkMargin: Int32 {
        get {
            return get_autoshrink_margin ()
        }
        
        set {
            set_autoshrink_margin (newValue)
        }
        
    }
    
    /// The margin inside the frame that can be used to drag the frame.
    final public var dragMargin: Int32 {
        get {
            return get_drag_margin ()
        }
        
        set {
            set_drag_margin (newValue)
        }
        
    }
    
    /// If `true`, the tint color will be used to tint the frame.
    final public var tintColorEnabled: Bool {
        get {
            return is_tint_color_enabled ()
        }
        
        set {
            set_tint_color_enabled (newValue)
        }
        
    }
    
    /// The color of the frame when ``tintColorEnabled`` is `true`.
    final public var tintColor: Color {
        get {
            return get_tint_color ()
        }
        
        set {
            set_tint_color (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_title: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_title")
        return withUnsafePointer(to: &GraphFrame.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_title(_ title: String) {
        let title = GString(title)
        withUnsafePointer(to: title.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(GraphFrame.method_set_title, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_title: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_title")
        return withUnsafePointer(to: &GraphFrame.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_title() -> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall(GraphFrame.method_get_title, UnsafeMutableRawPointer(mutating: handle), nil, &_result.content)
        return _result.description
    }
    
    fileprivate static var method_get_titlebar_hbox: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_titlebar_hbox")
        return withUnsafePointer(to: &GraphFrame.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3590609951)!
            }
            
        }
        
    }()
    
    /// Returns the ``HBoxContainer`` used for the title bar, only containing a ``Label`` for displaying the title by default.
    /// 
    /// This can be used to add custom controls to the title bar such as option or close buttons.
    /// 
    public final func getTitlebarHbox() -> HBoxContainer? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall(GraphFrame.method_get_titlebar_hbox, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_autoshrink_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_autoshrink_enabled")
        return withUnsafePointer(to: &GraphFrame.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_autoshrink_enabled(_ shrink: Bool) {
        withUnsafePointer(to: shrink) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(GraphFrame.method_set_autoshrink_enabled, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_is_autoshrink_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName("is_autoshrink_enabled")
        return withUnsafePointer(to: &GraphFrame.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_autoshrink_enabled() -> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall(GraphFrame.method_is_autoshrink_enabled, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_autoshrink_margin: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_autoshrink_margin")
        return withUnsafePointer(to: &GraphFrame.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_autoshrink_margin(_ autoshrinkMargin: Int32) {
        withUnsafePointer(to: autoshrinkMargin) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(GraphFrame.method_set_autoshrink_margin, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_autoshrink_margin: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_autoshrink_margin")
        return withUnsafePointer(to: &GraphFrame.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_autoshrink_margin() -> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall(GraphFrame.method_get_autoshrink_margin, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_drag_margin: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_drag_margin")
        return withUnsafePointer(to: &GraphFrame.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_drag_margin(_ dragMargin: Int32) {
        withUnsafePointer(to: dragMargin) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(GraphFrame.method_set_drag_margin, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_drag_margin: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_drag_margin")
        return withUnsafePointer(to: &GraphFrame.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_drag_margin() -> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall(GraphFrame.method_get_drag_margin, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_tint_color_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_tint_color_enabled")
        return withUnsafePointer(to: &GraphFrame.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_tint_color_enabled(_ enable: Bool) {
        withUnsafePointer(to: enable) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(GraphFrame.method_set_tint_color_enabled, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_is_tint_color_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName("is_tint_color_enabled")
        return withUnsafePointer(to: &GraphFrame.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_tint_color_enabled() -> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall(GraphFrame.method_is_tint_color_enabled, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_tint_color: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_tint_color")
        return withUnsafePointer(to: &GraphFrame.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2920490490)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_tint_color(_ color: Color) {
        withUnsafePointer(to: color) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(GraphFrame.method_set_tint_color, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_tint_color: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_tint_color")
        return withUnsafePointer(to: &GraphFrame.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3444240500)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_tint_color() -> Color {
        var _result: Color = Color ()
        gi.object_method_bind_ptrcall(GraphFrame.method_get_tint_color, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    // Signals 
    /// Emitted when ``autoshrinkEnabled`` or ``autoshrinkMargin`` changes.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.autoshrinkChanged.connect {
    ///    print ("caught signal")
    /// }
    /// ```
    public var autoshrinkChanged: SimpleSignal { SimpleSignal (target: self, signalName: "autoshrink_changed") }
    
}


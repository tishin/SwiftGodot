// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Base class for custom ``TextServer`` implementations (plugins).
/// 
/// External ``TextServer`` implementations should inherit from this class.
open class TextServerExtension: TextServer {
    override open class var godotClassName: StringName { "TextServerExtension" }
    /* Methods */
    /// **Required.**
    /// 
    /// Returns `true` if the server supports a feature.
    /// 
    @_documentation(visibility: public)
    open func _hasFeature(_ feature: TextServer.Feature) -> Bool {
        return false
    }
    
    /// **Required.**
    /// 
    /// Returns the name of the server interface.
    /// 
    @_documentation(visibility: public)
    open func _getName() -> String {
        return String ()
    }
    
    /// **Required.**
    /// 
    /// Returns text server features, see ``TextServer.Feature``.
    /// 
    @_documentation(visibility: public)
    open func _getFeatures() -> Int {
        return 0
    }
    
    /// **Required.**
    /// 
    /// Frees an object created by this ``TextServer``.
    /// 
    @_documentation(visibility: public)
    open func _freeRid(_ rid: RID) {
    }
    
    /// **Required.**
    /// 
    /// Returns `true` if `rid` is valid resource owned by this text server.
    /// 
    @_documentation(visibility: public)
    open func _has(rid: RID) -> Bool {
        return false
    }
    
    /// **Optional.**
    /// 
    /// Loads optional TextServer database (e.g. ICU break iterators and dictionaries).
    /// 
    @_documentation(visibility: public)
    open func _loadSupportData(filename: String) -> Bool {
        return false
    }
    
    /// **Optional.**
    /// 
    /// Returns default TextServer database (e.g. ICU break iterators and dictionaries) filename.
    /// 
    @_documentation(visibility: public)
    open func _getSupportDataFilename() -> String {
        return String ()
    }
    
    /// **Optional.**
    /// 
    /// Returns TextServer database (e.g. ICU break iterators and dictionaries) description.
    /// 
    @_documentation(visibility: public)
    open func _getSupportDataInfo() -> String {
        return String ()
    }
    
    /// **Optional.**
    /// 
    /// Saves optional TextServer database (e.g. ICU break iterators and dictionaries) to the file.
    /// 
    @_documentation(visibility: public)
    open func _saveSupportData(filename: String) -> Bool {
        return false
    }
    
    /// **Required.**
    /// 
    /// Returns `true` if locale is right-to-left.
    /// 
    @_documentation(visibility: public)
    open func _isLocaleRightToLeft(locale: String) -> Bool {
        return false
    }
    
    /// **Optional.**
    /// 
    /// Converts readable feature, variation, script, or language name to OpenType tag.
    /// 
    @_documentation(visibility: public)
    open func _nameToTag(name: String) -> Int {
        return 0
    }
    
    /// **Optional.**
    /// 
    /// Converts OpenType tag to readable feature, variation, script, or language name.
    /// 
    @_documentation(visibility: public)
    open func _tagToName(tag: Int) -> String {
        return String ()
    }
    
    /// **Required.**
    /// 
    /// Creates a new, empty font cache entry resource.
    /// 
    @_documentation(visibility: public)
    open func _createFont() -> RID {
        return RID ()
    }
    
    /// Optional, implement if font supports extra spacing or baseline offset.
    /// 
    /// Creates a new variation existing font which is reusing the same glyph cache and font data.
    /// 
    @_documentation(visibility: public)
    open func _createFontLinkedVariation(fontRid: RID) -> RID {
        return RID ()
    }
    
    /// **Optional.**
    /// 
    /// Sets font source data, e.g contents of the dynamic font source file.
    /// 
    @_documentation(visibility: public)
    open func _fontSetData(fontRid: RID, data: PackedByteArray) {
    }
    
    /// **Optional.**
    /// 
    /// Sets an active face index in the TrueType / OpenType collection.
    /// 
    @_documentation(visibility: public)
    open func _fontSetFaceIndex(fontRid: RID, faceIndex: Int) {
    }
    
    /// **Optional.**
    /// 
    /// Returns an active face index in the TrueType / OpenType collection.
    /// 
    @_documentation(visibility: public)
    open func _fontGetFaceIndex(fontRid: RID) -> Int {
        return 0
    }
    
    /// **Optional.**
    /// 
    /// Returns number of faces in the TrueType / OpenType collection.
    /// 
    @_documentation(visibility: public)
    open func _fontGetFaceCount(fontRid: RID) -> Int {
        return 0
    }
    
    /// **Optional.**
    /// 
    /// Sets the font style flags, see ``TextServer.FontStyle``.
    /// 
    @_documentation(visibility: public)
    open func _fontSetStyle(fontRid: RID, style: TextServer.FontStyle) {
    }
    
    /// **Optional.**
    /// 
    /// Returns font style flags, see ``TextServer.FontStyle``.
    /// 
    @_documentation(visibility: public)
    open func _fontGetStyle(fontRid: RID) -> TextServer.FontStyle {
        return TextServer.FontStyle ()
    }
    
    /// **Optional.**
    /// 
    /// Sets the font family name.
    /// 
    @_documentation(visibility: public)
    open func _fontSetName(fontRid: RID, name: String) {
    }
    
    /// **Optional.**
    /// 
    /// Returns font family name.
    /// 
    @_documentation(visibility: public)
    open func _fontGetName(fontRid: RID) -> String {
        return String ()
    }
    
    /// **Optional.**
    /// 
    /// Returns ``GDictionary`` with OpenType font name strings (localized font names, version, description, license information, sample text, etc.).
    /// 
    @_documentation(visibility: public)
    open func _fontGetOtNameStrings(fontRid: RID) -> GDictionary {
        return GDictionary ()
    }
    
    /// **Optional.**
    /// 
    /// Sets the font style name.
    /// 
    @_documentation(visibility: public)
    open func _fontSetStyleName(fontRid: RID, nameStyle: String) {
    }
    
    /// **Optional.**
    /// 
    /// Returns font style name.
    /// 
    @_documentation(visibility: public)
    open func _fontGetStyleName(fontRid: RID) -> String {
        return String ()
    }
    
    /// **Optional.**
    /// 
    /// Sets weight (boldness) of the font. A value in the `100...999` range, normal font weight is `400`, bold font weight is `700`.
    /// 
    @_documentation(visibility: public)
    open func _fontSetWeight(fontRid: RID, weight: Int) {
    }
    
    /// **Optional.**
    /// 
    /// Returns weight (boldness) of the font. A value in the `100...999` range, normal font weight is `400`, bold font weight is `700`.
    /// 
    @_documentation(visibility: public)
    open func _fontGetWeight(fontRid: RID) -> Int {
        return 0
    }
    
    /// **Optional.**
    /// 
    /// Sets font stretch amount, compared to a normal width. A percentage value between `50%` and `200%`.
    /// 
    @_documentation(visibility: public)
    open func _fontSetStretch(fontRid: RID, stretch: Int) {
    }
    
    /// **Optional.**
    /// 
    /// Returns font stretch amount, compared to a normal width. A percentage value between `50%` and `200%`.
    /// 
    @_documentation(visibility: public)
    open func _fontGetStretch(fontRid: RID) -> Int {
        return 0
    }
    
    /// **Optional.**
    /// 
    /// Sets font anti-aliasing mode.
    /// 
    @_documentation(visibility: public)
    open func _fontSetAntialiasing(fontRid: RID, antialiasing: TextServer.FontAntialiasing) {
    }
    
    /// **Optional.**
    /// 
    /// Returns font anti-aliasing mode.
    /// 
    @_documentation(visibility: public)
    open func _fontGetAntialiasing(fontRid: RID) -> TextServer.FontAntialiasing {
        return TextServer.FontAntialiasing(rawValue: 0)!
    }
    
    /// **Optional.**
    /// 
    /// If set to `true`, embedded font bitmap loading is disabled.
    /// 
    @_documentation(visibility: public)
    open func _fontSetDisableEmbeddedBitmaps(fontRid: RID, disableEmbeddedBitmaps: Bool) {
    }
    
    /// **Optional.**
    /// 
    /// Returns whether the font's embedded bitmap loading is disabled.
    /// 
    @_documentation(visibility: public)
    open func _fontGetDisableEmbeddedBitmaps(fontRid: RID) -> Bool {
        return false
    }
    
    /// **Optional.**
    /// 
    /// If set to `true` font texture mipmap generation is enabled.
    /// 
    @_documentation(visibility: public)
    open func _fontSetGenerateMipmaps(fontRid: RID, generateMipmaps: Bool) {
    }
    
    /// **Optional.**
    /// 
    /// Returns `true` if font texture mipmap generation is enabled.
    /// 
    @_documentation(visibility: public)
    open func _fontGetGenerateMipmaps(fontRid: RID) -> Bool {
        return false
    }
    
    /// **Optional.**
    /// 
    /// If set to `true`, glyphs of all sizes are rendered using single multichannel signed distance field generated from the dynamic font vector data. MSDF rendering allows displaying the font at any scaling factor without blurriness, and without incurring a CPU cost when the font size changes (since the font no longer needs to be rasterized on the CPU). As a downside, font hinting is not available with MSDF. The lack of font hinting may result in less crisp and less readable fonts at small sizes.
    /// 
    @_documentation(visibility: public)
    open func _fontSetMultichannelSignedDistanceField(fontRid: RID, msdf: Bool) {
    }
    
    /// **Optional.**
    /// 
    /// Returns `true` if glyphs of all sizes are rendered using single multichannel signed distance field generated from the dynamic font vector data.
    /// 
    @_documentation(visibility: public)
    open func _fontIsMultichannelSignedDistanceField(fontRid: RID) -> Bool {
        return false
    }
    
    /// **Optional.**
    /// 
    /// Sets the width of the range around the shape between the minimum and maximum representable signed distance.
    /// 
    @_documentation(visibility: public)
    open func _fontSetMsdfPixelRange(fontRid: RID, msdfPixelRange: Int) {
    }
    
    /// **Optional.**
    /// 
    /// Returns the width of the range around the shape between the minimum and maximum representable signed distance.
    /// 
    @_documentation(visibility: public)
    open func _fontGetMsdfPixelRange(fontRid: RID) -> Int {
        return 0
    }
    
    /// **Optional.**
    /// 
    /// Sets source font size used to generate MSDF textures.
    /// 
    @_documentation(visibility: public)
    open func _fontSetMsdfSize(fontRid: RID, msdfSize: Int) {
    }
    
    /// **Optional.**
    /// 
    /// Returns source font size used to generate MSDF textures.
    /// 
    @_documentation(visibility: public)
    open func _fontGetMsdfSize(fontRid: RID) -> Int {
        return 0
    }
    
    /// **Required.**
    /// 
    /// Sets bitmap font fixed size. If set to value greater than zero, same cache entry will be used for all font sizes.
    /// 
    @_documentation(visibility: public)
    open func _fontSetFixedSize(fontRid: RID, fixedSize: Int) {
    }
    
    /// **Required.**
    /// 
    /// Returns bitmap font fixed size.
    /// 
    @_documentation(visibility: public)
    open func _fontGetFixedSize(fontRid: RID) -> Int {
        return 0
    }
    
    /// **Required.**
    /// 
    /// Sets bitmap font scaling mode. This property is used only if `fixed_size` is greater than zero.
    /// 
    @_documentation(visibility: public)
    open func _fontSetFixedSizeScaleMode(fontRid: RID, fixedSizeScaleMode: TextServer.FixedSizeScaleMode) {
    }
    
    /// **Required.**
    /// 
    /// Returns bitmap font scaling mode.
    /// 
    @_documentation(visibility: public)
    open func _fontGetFixedSizeScaleMode(fontRid: RID) -> TextServer.FixedSizeScaleMode {
        return TextServer.FixedSizeScaleMode(rawValue: 0)!
    }
    
    /// **Optional.**
    /// 
    /// If set to `true`, system fonts can be automatically used as fallbacks.
    /// 
    @_documentation(visibility: public)
    open func _fontSetAllowSystemFallback(fontRid: RID, allowSystemFallback: Bool) {
    }
    
    /// **Optional.**
    /// 
    /// Returns `true` if system fonts can be automatically used as fallbacks.
    /// 
    @_documentation(visibility: public)
    open func _fontIsAllowSystemFallback(fontRid: RID) -> Bool {
        return false
    }
    
    /// **Optional.**
    /// 
    /// If set to `true` auto-hinting is preferred over font built-in hinting.
    /// 
    @_documentation(visibility: public)
    open func _fontSetForceAutohinter(fontRid: RID, forceAutohinter: Bool) {
    }
    
    /// **Optional.**
    /// 
    /// Returns `true` if auto-hinting is supported and preferred over font built-in hinting.
    /// 
    @_documentation(visibility: public)
    open func _fontIsForceAutohinter(fontRid: RID) -> Bool {
        return false
    }
    
    /// **Optional.**
    /// 
    /// Sets font hinting mode. Used by dynamic fonts only.
    /// 
    @_documentation(visibility: public)
    open func _fontSetHinting(fontRid: RID, hinting: TextServer.Hinting) {
    }
    
    /// **Optional.**
    /// 
    /// Returns the font hinting mode. Used by dynamic fonts only.
    /// 
    @_documentation(visibility: public)
    open func _fontGetHinting(fontRid: RID) -> TextServer.Hinting {
        return TextServer.Hinting(rawValue: 0)!
    }
    
    /// **Optional.**
    /// 
    /// Sets font subpixel glyph positioning mode.
    /// 
    @_documentation(visibility: public)
    open func _fontSetSubpixelPositioning(fontRid: RID, subpixelPositioning: TextServer.SubpixelPositioning) {
    }
    
    /// **Optional.**
    /// 
    /// Returns font subpixel glyph positioning mode.
    /// 
    @_documentation(visibility: public)
    open func _fontGetSubpixelPositioning(fontRid: RID) -> TextServer.SubpixelPositioning {
        return TextServer.SubpixelPositioning(rawValue: 0)!
    }
    
    /// Sets font embolden strength. If `strength` is not equal to zero, emboldens the font outlines. Negative values reduce the outline thickness.
    @_documentation(visibility: public)
    open func _fontSetEmbolden(fontRid: RID, strength: Double) {
    }
    
    /// **Optional.**
    /// 
    /// Returns font embolden strength.
    /// 
    @_documentation(visibility: public)
    open func _fontGetEmbolden(fontRid: RID) -> Double {
        return 0.0
    }
    
    /// **Optional.**
    /// 
    /// Sets the spacing for `spacing` (see ``TextServer.SpacingType``) to `value` in pixels (not relative to the font size).
    /// 
    @_documentation(visibility: public)
    open func _fontSetSpacing(fontRid: RID, spacing: TextServer.SpacingType, value: Int) {
    }
    
    /// **Optional.**
    /// 
    /// Returns the spacing for `spacing` (see ``TextServer.SpacingType``) in pixels (not relative to the font size).
    /// 
    @_documentation(visibility: public)
    open func _fontGetSpacing(fontRid: RID, spacing: TextServer.SpacingType) -> Int {
        return 0
    }
    
    /// **Optional.**
    /// 
    /// Sets extra baseline offset (as a fraction of font height).
    /// 
    @_documentation(visibility: public)
    open func _fontSetBaselineOffset(fontRid: RID, baselineOffset: Double) {
    }
    
    /// **Optional.**
    /// 
    /// Returns extra baseline offset (as a fraction of font height).
    /// 
    @_documentation(visibility: public)
    open func _fontGetBaselineOffset(fontRid: RID) -> Double {
        return 0.0
    }
    
    /// **Optional.**
    /// 
    /// Sets 2D transform, applied to the font outlines, can be used for slanting, flipping, and rotating glyphs.
    /// 
    @_documentation(visibility: public)
    open func _fontSetTransform(fontRid: RID, transform: Transform2D) {
    }
    
    /// **Optional.**
    /// 
    /// Returns 2D transform applied to the font outlines.
    /// 
    @_documentation(visibility: public)
    open func _fontGetTransform(fontRid: RID) -> Transform2D {
        return Transform2D ()
    }
    
    /// **Optional.**
    /// 
    /// Sets variation coordinates for the specified font cache entry.
    /// 
    @_documentation(visibility: public)
    open func _fontSetVariationCoordinates(fontRid: RID, variationCoordinates: GDictionary) {
    }
    
    /// **Optional.**
    /// 
    /// Returns variation coordinates for the specified font cache entry.
    /// 
    @_documentation(visibility: public)
    open func _fontGetVariationCoordinates(fontRid: RID) -> GDictionary {
        return GDictionary ()
    }
    
    /// **Optional.**
    /// 
    /// Sets font oversampling factor, if set to `0.0` global oversampling factor is used instead. Used by dynamic fonts only.
    /// 
    @_documentation(visibility: public)
    open func _fontSetOversampling(fontRid: RID, oversampling: Double) {
    }
    
    /// **Optional.**
    /// 
    /// Returns font oversampling factor, if set to `0.0` global oversampling factor is used instead. Used by dynamic fonts only.
    /// 
    @_documentation(visibility: public)
    open func _fontGetOversampling(fontRid: RID) -> Double {
        return 0.0
    }
    
    /// **Required.**
    /// 
    /// Returns list of the font sizes in the cache. Each size is ``Vector2i`` with font size and outline size.
    /// 
    @_documentation(visibility: public)
    open func _fontGetSizeCacheList(fontRid: RID) -> VariantCollection<Vector2i> {
        return VariantCollection<Vector2i>()
    }
    
    /// **Required.**
    /// 
    /// Removes all font sizes from the cache entry.
    /// 
    @_documentation(visibility: public)
    open func _fontClearSizeCache(fontRid: RID) {
    }
    
    /// **Required.**
    /// 
    /// Removes specified font size from the cache entry.
    /// 
    @_documentation(visibility: public)
    open func _fontRemoveSizeCache(fontRid: RID, size: Vector2i) {
    }
    
    /// **Required.**
    /// 
    /// Sets the font ascent (number of pixels above the baseline).
    /// 
    @_documentation(visibility: public)
    open func _fontSetAscent(fontRid: RID, size: Int, ascent: Double) {
    }
    
    /// **Required.**
    /// 
    /// Returns the font ascent (number of pixels above the baseline).
    /// 
    @_documentation(visibility: public)
    open func _fontGetAscent(fontRid: RID, size: Int) -> Double {
        return 0.0
    }
    
    /// **Required.**
    /// 
    /// Sets the font descent (number of pixels below the baseline).
    /// 
    @_documentation(visibility: public)
    open func _fontSetDescent(fontRid: RID, size: Int, descent: Double) {
    }
    
    /// **Required.**
    /// 
    /// Returns the font descent (number of pixels below the baseline).
    /// 
    @_documentation(visibility: public)
    open func _fontGetDescent(fontRid: RID, size: Int) -> Double {
        return 0.0
    }
    
    /// **Required.**
    /// 
    /// Sets pixel offset of the underline below the baseline.
    /// 
    @_documentation(visibility: public)
    open func _fontSetUnderlinePosition(fontRid: RID, size: Int, underlinePosition: Double) {
    }
    
    /// **Required.**
    /// 
    /// Returns pixel offset of the underline below the baseline.
    /// 
    @_documentation(visibility: public)
    open func _fontGetUnderlinePosition(fontRid: RID, size: Int) -> Double {
        return 0.0
    }
    
    /// **Required.**
    /// 
    /// Sets thickness of the underline in pixels.
    /// 
    @_documentation(visibility: public)
    open func _fontSetUnderlineThickness(fontRid: RID, size: Int, underlineThickness: Double) {
    }
    
    /// **Required.**
    /// 
    /// Returns thickness of the underline in pixels.
    /// 
    @_documentation(visibility: public)
    open func _fontGetUnderlineThickness(fontRid: RID, size: Int) -> Double {
        return 0.0
    }
    
    /// **Required.**
    /// 
    /// Sets scaling factor of the color bitmap font.
    /// 
    @_documentation(visibility: public)
    open func _fontSetScale(fontRid: RID, size: Int, scale: Double) {
    }
    
    /// **Required.**
    /// 
    /// Returns scaling factor of the color bitmap font.
    /// 
    @_documentation(visibility: public)
    open func _fontGetScale(fontRid: RID, size: Int) -> Double {
        return 0.0
    }
    
    /// **Required.**
    /// 
    /// Returns number of textures used by font cache entry.
    /// 
    @_documentation(visibility: public)
    open func _fontGetTextureCount(fontRid: RID, size: Vector2i) -> Int {
        return 0
    }
    
    /// **Required.**
    /// 
    /// Removes all textures from font cache entry.
    /// 
    @_documentation(visibility: public)
    open func _fontClearTextures(fontRid: RID, size: Vector2i) {
    }
    
    /// **Required.**
    /// 
    /// Removes specified texture from the cache entry.
    /// 
    @_documentation(visibility: public)
    open func _fontRemoveTexture(fontRid: RID, size: Vector2i, textureIndex: Int) {
    }
    
    /// **Required.**
    /// 
    /// Sets font cache texture image data.
    /// 
    @_documentation(visibility: public)
    open func _fontSetTextureImage(fontRid: RID, size: Vector2i, textureIndex: Int, image: Image?) {
    }
    
    /// **Required.**
    /// 
    /// Returns font cache texture image data.
    /// 
    @_documentation(visibility: public)
    open func _fontGetTextureImage(fontRid: RID, size: Vector2i, textureIndex: Int) -> Image? {
        return Image ()
    }
    
    /// **Optional.**
    /// 
    /// Sets array containing glyph packing data.
    /// 
    @_documentation(visibility: public)
    open func _fontSetTextureOffsets(fontRid: RID, size: Vector2i, textureIndex: Int, offset: PackedInt32Array) {
    }
    
    /// **Optional.**
    /// 
    /// Returns array containing glyph packing data.
    /// 
    @_documentation(visibility: public)
    open func _fontGetTextureOffsets(fontRid: RID, size: Vector2i, textureIndex: Int) -> PackedInt32Array {
        return PackedInt32Array ()
    }
    
    /// **Required.**
    /// 
    /// Returns list of rendered glyphs in the cache entry.
    /// 
    @_documentation(visibility: public)
    open func _fontGetGlyphList(fontRid: RID, size: Vector2i) -> PackedInt32Array {
        return PackedInt32Array ()
    }
    
    /// **Required.**
    /// 
    /// Removes all rendered glyph information from the cache entry.
    /// 
    @_documentation(visibility: public)
    open func _fontClearGlyphs(fontRid: RID, size: Vector2i) {
    }
    
    /// **Required.**
    /// 
    /// Removes specified rendered glyph information from the cache entry.
    /// 
    @_documentation(visibility: public)
    open func _fontRemoveGlyph(fontRid: RID, size: Vector2i, glyph: Int) {
    }
    
    /// **Required.**
    /// 
    /// Returns glyph advance (offset of the next glyph).
    /// 
    @_documentation(visibility: public)
    open func _fontGetGlyphAdvance(fontRid: RID, size: Int, glyph: Int) -> Vector2 {
        return Vector2 ()
    }
    
    /// **Required.**
    /// 
    /// Sets glyph advance (offset of the next glyph).
    /// 
    @_documentation(visibility: public)
    open func _fontSetGlyphAdvance(fontRid: RID, size: Int, glyph: Int, advance: Vector2) {
    }
    
    /// **Required.**
    /// 
    /// Returns glyph offset from the baseline.
    /// 
    @_documentation(visibility: public)
    open func _fontGetGlyphOffset(fontRid: RID, size: Vector2i, glyph: Int) -> Vector2 {
        return Vector2 ()
    }
    
    /// **Required.**
    /// 
    /// Sets glyph offset from the baseline.
    /// 
    @_documentation(visibility: public)
    open func _fontSetGlyphOffset(fontRid: RID, size: Vector2i, glyph: Int, offset: Vector2) {
    }
    
    /// **Required.**
    /// 
    /// Returns size of the glyph.
    /// 
    @_documentation(visibility: public)
    open func _fontGetGlyphSize(fontRid: RID, size: Vector2i, glyph: Int) -> Vector2 {
        return Vector2 ()
    }
    
    /// **Required.**
    /// 
    /// Sets size of the glyph.
    /// 
    @_documentation(visibility: public)
    open func _fontSetGlyphSize(fontRid: RID, size: Vector2i, glyph: Int, glSize: Vector2) {
    }
    
    /// **Required.**
    /// 
    /// Returns rectangle in the cache texture containing the glyph.
    /// 
    @_documentation(visibility: public)
    open func _fontGetGlyphUvRect(fontRid: RID, size: Vector2i, glyph: Int) -> Rect2 {
        return Rect2 ()
    }
    
    /// **Required.**
    /// 
    /// Sets rectangle in the cache texture containing the glyph.
    /// 
    @_documentation(visibility: public)
    open func _fontSetGlyphUvRect(fontRid: RID, size: Vector2i, glyph: Int, uvRect: Rect2) {
    }
    
    /// **Required.**
    /// 
    /// Returns index of the cache texture containing the glyph.
    /// 
    @_documentation(visibility: public)
    open func _fontGetGlyphTextureIdx(fontRid: RID, size: Vector2i, glyph: Int) -> Int {
        return 0
    }
    
    /// **Required.**
    /// 
    /// Sets index of the cache texture containing the glyph.
    /// 
    @_documentation(visibility: public)
    open func _fontSetGlyphTextureIdx(fontRid: RID, size: Vector2i, glyph: Int, textureIdx: Int) {
    }
    
    /// **Required.**
    /// 
    /// Returns resource ID of the cache texture containing the glyph.
    /// 
    @_documentation(visibility: public)
    open func _fontGetGlyphTextureRid(fontRid: RID, size: Vector2i, glyph: Int) -> RID {
        return RID ()
    }
    
    /// **Required.**
    /// 
    /// Returns size of the cache texture containing the glyph.
    /// 
    @_documentation(visibility: public)
    open func _fontGetGlyphTextureSize(fontRid: RID, size: Vector2i, glyph: Int) -> Vector2 {
        return Vector2 ()
    }
    
    /// **Optional.**
    /// 
    /// Returns outline contours of the glyph.
    /// 
    @_documentation(visibility: public)
    open func _fontGetGlyphContours(fontRid: RID, size: Int, index: Int) -> GDictionary {
        return GDictionary ()
    }
    
    /// **Optional.**
    /// 
    /// Returns list of the kerning overrides.
    /// 
    @_documentation(visibility: public)
    open func _fontGetKerningList(fontRid: RID, size: Int) -> VariantCollection<Vector2i> {
        return VariantCollection<Vector2i>()
    }
    
    /// **Optional.**
    /// 
    /// Removes all kerning overrides.
    /// 
    @_documentation(visibility: public)
    open func _fontClearKerningMap(fontRid: RID, size: Int) {
    }
    
    /// **Optional.**
    /// 
    /// Removes kerning override for the pair of glyphs.
    /// 
    @_documentation(visibility: public)
    open func _fontRemoveKerning(fontRid: RID, size: Int, glyphPair: Vector2i) {
    }
    
    /// **Optional.**
    /// 
    /// Sets kerning for the pair of glyphs.
    /// 
    @_documentation(visibility: public)
    open func _fontSetKerning(fontRid: RID, size: Int, glyphPair: Vector2i, kerning: Vector2) {
    }
    
    /// **Optional.**
    /// 
    /// Returns kerning for the pair of glyphs.
    /// 
    @_documentation(visibility: public)
    open func _fontGetKerning(fontRid: RID, size: Int, glyphPair: Vector2i) -> Vector2 {
        return Vector2 ()
    }
    
    /// **Required.**
    /// 
    /// Returns the glyph index of a `char`, optionally modified by the `variationSelector`.
    /// 
    @_documentation(visibility: public)
    open func _fontGetGlyphIndex(fontRid: RID, size: Int, char: Int, variationSelector: Int) -> Int {
        return 0
    }
    
    /// **Required.**
    /// 
    /// Returns character code associated with `glyphIndex`, or `0` if `glyphIndex` is invalid.
    /// 
    @_documentation(visibility: public)
    open func _fontGetCharFromGlyphIndex(fontRid: RID, size: Int, glyphIndex: Int) -> Int {
        return 0
    }
    
    /// **Required.**
    /// 
    /// Returns `true` if a Unicode `char` is available in the font.
    /// 
    @_documentation(visibility: public)
    open func _fontHasChar(fontRid: RID, char: Int) -> Bool {
        return false
    }
    
    /// **Required.**
    /// 
    /// Returns a string containing all the characters available in the font.
    /// 
    @_documentation(visibility: public)
    open func _fontGetSupportedChars(fontRid: RID) -> String {
        return String ()
    }
    
    /// **Optional.**
    /// 
    /// Renders the range of characters to the font cache texture.
    /// 
    @_documentation(visibility: public)
    open func _fontRenderRange(fontRid: RID, size: Vector2i, start: Int, end: Int) {
    }
    
    /// **Optional.**
    /// 
    /// Renders specified glyph to the font cache texture.
    /// 
    @_documentation(visibility: public)
    open func _fontRenderGlyph(fontRid: RID, size: Vector2i, index: Int) {
    }
    
    /// **Required.**
    /// 
    /// Draws single glyph into a canvas item at the position, using `fontRid` at the size `size`.
    /// 
    @_documentation(visibility: public)
    open func _fontDrawGlyph(fontRid: RID, canvas: RID, size: Int, pos: Vector2, index: Int, color: Color) {
    }
    
    /// **Required.**
    /// 
    /// Draws single glyph outline of size `outlineSize` into a canvas item at the position, using `fontRid` at the size `size`.
    /// 
    @_documentation(visibility: public)
    open func _fontDrawGlyphOutline(fontRid: RID, canvas: RID, size: Int, outlineSize: Int, pos: Vector2, index: Int, color: Color) {
    }
    
    /// **Optional.**
    /// 
    /// Returns `true`, if font supports given language (<a href="https://en.wikipedia.org/wiki/ISO_639-1">ISO 639</a> code).
    /// 
    @_documentation(visibility: public)
    open func _fontIsLanguageSupported(fontRid: RID, language: String) -> Bool {
        return false
    }
    
    /// **Optional.**
    /// 
    /// Adds override for ``_fontIsLanguageSupported(fontRid:language:)``.
    /// 
    @_documentation(visibility: public)
    open func _fontSetLanguageSupportOverride(fontRid: RID, language: String, supported: Bool) {
    }
    
    /// **Optional.**
    /// 
    /// Returns `true` if support override is enabled for the `language`.
    /// 
    @_documentation(visibility: public)
    open func _fontGetLanguageSupportOverride(fontRid: RID, language: String) -> Bool {
        return false
    }
    
    /// **Optional.**
    /// 
    /// Remove language support override.
    /// 
    @_documentation(visibility: public)
    open func _fontRemoveLanguageSupportOverride(fontRid: RID, language: String) {
    }
    
    /// **Optional.**
    /// 
    /// Returns list of language support overrides.
    /// 
    @_documentation(visibility: public)
    open func _fontGetLanguageSupportOverrides(fontRid: RID) -> PackedStringArray {
        return PackedStringArray ()
    }
    
    /// **Optional.**
    /// 
    /// Returns `true`, if font supports given script (ISO 15924 code).
    /// 
    @_documentation(visibility: public)
    open func _fontIsScriptSupported(fontRid: RID, script: String) -> Bool {
        return false
    }
    
    /// **Optional.**
    /// 
    /// Adds override for ``_fontIsScriptSupported(fontRid:script:)``.
    /// 
    @_documentation(visibility: public)
    open func _fontSetScriptSupportOverride(fontRid: RID, script: String, supported: Bool) {
    }
    
    /// **Optional.**
    /// 
    /// Returns `true` if support override is enabled for the `script`.
    /// 
    @_documentation(visibility: public)
    open func _fontGetScriptSupportOverride(fontRid: RID, script: String) -> Bool {
        return false
    }
    
    /// **Optional.**
    /// 
    /// Removes script support override.
    /// 
    @_documentation(visibility: public)
    open func _fontRemoveScriptSupportOverride(fontRid: RID, script: String) {
    }
    
    /// **Optional.**
    /// 
    /// Returns list of script support overrides.
    /// 
    @_documentation(visibility: public)
    open func _fontGetScriptSupportOverrides(fontRid: RID) -> PackedStringArray {
        return PackedStringArray ()
    }
    
    /// **Optional.**
    /// 
    /// Sets font OpenType feature set override.
    /// 
    @_documentation(visibility: public)
    open func _fontSetOpentypeFeatureOverrides(fontRid: RID, overrides: GDictionary) {
    }
    
    /// **Optional.**
    /// 
    /// Returns font OpenType feature set override.
    /// 
    @_documentation(visibility: public)
    open func _fontGetOpentypeFeatureOverrides(fontRid: RID) -> GDictionary {
        return GDictionary ()
    }
    
    /// **Optional.**
    /// 
    /// Returns the dictionary of the supported OpenType features.
    /// 
    @_documentation(visibility: public)
    open func _fontSupportedFeatureList(fontRid: RID) -> GDictionary {
        return GDictionary ()
    }
    
    /// **Optional.**
    /// 
    /// Returns the dictionary of the supported OpenType variation coordinates.
    /// 
    @_documentation(visibility: public)
    open func _fontSupportedVariationList(fontRid: RID) -> GDictionary {
        return GDictionary ()
    }
    
    /// **Optional.**
    /// 
    /// Returns the font oversampling factor, shared by all fonts in the TextServer.
    /// 
    @_documentation(visibility: public)
    open func _fontGetGlobalOversampling() -> Double {
        return 0.0
    }
    
    /// **Optional.**
    /// 
    /// Sets oversampling factor, shared by all font in the TextServer.
    /// 
    @_documentation(visibility: public)
    open func _fontSetGlobalOversampling(_ oversampling: Double) {
    }
    
    /// **Optional.**
    /// 
    /// Returns size of the replacement character (box with character hexadecimal code that is drawn in place of invalid characters).
    /// 
    @_documentation(visibility: public)
    open func _getHexCodeBoxSize(_ size: Int, index: Int) -> Vector2 {
        return Vector2 ()
    }
    
    /// **Optional.**
    /// 
    /// Draws box displaying character hexadecimal code.
    /// 
    @_documentation(visibility: public)
    open func _drawHexCodeBox(canvas: RID, size: Int, pos: Vector2, index: Int, color: Color) {
    }
    
    /// **Required.**
    /// 
    /// Creates a new buffer for complex text layout, with the given `direction` and `orientation`.
    /// 
    @_documentation(visibility: public)
    open func _createShapedText(direction: TextServer.Direction, orientation: TextServer.Orientation) -> RID {
        return RID ()
    }
    
    /// **Required.**
    /// 
    /// Clears text buffer (removes text and inline objects).
    /// 
    @_documentation(visibility: public)
    open func _shapedTextClear(shaped: RID) {
    }
    
    /// **Optional.**
    /// 
    /// Sets desired text direction. If set to ``TextServer/Direction/auto``, direction will be detected based on the buffer contents and current locale.
    /// 
    @_documentation(visibility: public)
    open func _shapedTextSetDirection(shaped: RID, direction: TextServer.Direction) {
    }
    
    /// **Optional.**
    /// 
    /// Returns direction of the text.
    /// 
    @_documentation(visibility: public)
    open func _shapedTextGetDirection(shaped: RID) -> TextServer.Direction {
        return TextServer.Direction(rawValue: 0)!
    }
    
    /// **Optional.**
    /// 
    /// Returns direction of the text, inferred by the BiDi algorithm.
    /// 
    @_documentation(visibility: public)
    open func _shapedTextGetInferredDirection(shaped: RID) -> TextServer.Direction {
        return TextServer.Direction(rawValue: 0)!
    }
    
    /// **Optional.**
    /// 
    /// Overrides BiDi for the structured text.
    /// 
    @_documentation(visibility: public)
    open func _shapedTextSetBidiOverride(shaped: RID, override: GArray) {
    }
    
    /// **Optional.**
    /// 
    /// Sets custom punctuation character list, used for word breaking. If set to empty string, server defaults are used.
    /// 
    @_documentation(visibility: public)
    open func _shapedTextSetCustomPunctuation(shaped: RID, punct: String) {
    }
    
    /// **Optional.**
    /// 
    /// Returns custom punctuation character list, used for word breaking. If set to empty string, server defaults are used.
    /// 
    @_documentation(visibility: public)
    open func _shapedTextGetCustomPunctuation(shaped: RID) -> String {
        return String ()
    }
    
    /// **Optional.**
    /// 
    /// Sets ellipsis character used for text clipping.
    /// 
    @_documentation(visibility: public)
    open func _shapedTextSetCustomEllipsis(shaped: RID, char: Int) {
    }
    
    /// **Optional.**
    /// 
    /// Returns ellipsis character used for text clipping.
    /// 
    @_documentation(visibility: public)
    open func _shapedTextGetCustomEllipsis(shaped: RID) -> Int {
        return 0
    }
    
    /// **Optional.**
    /// 
    /// Sets desired text orientation.
    /// 
    @_documentation(visibility: public)
    open func _shapedTextSetOrientation(shaped: RID, orientation: TextServer.Orientation) {
    }
    
    /// **Optional.**
    /// 
    /// Returns text orientation.
    /// 
    @_documentation(visibility: public)
    open func _shapedTextGetOrientation(shaped: RID) -> TextServer.Orientation {
        return TextServer.Orientation(rawValue: 0)!
    }
    
    /// **Optional.**
    /// 
    /// If set to `true` text buffer will display invalid characters as hexadecimal codes, otherwise nothing is displayed.
    /// 
    @_documentation(visibility: public)
    open func _shapedTextSetPreserveInvalid(shaped: RID, enabled: Bool) {
    }
    
    /// **Optional.**
    /// 
    /// Returns `true` if text buffer is configured to display hexadecimal codes in place of invalid characters.
    /// 
    @_documentation(visibility: public)
    open func _shapedTextGetPreserveInvalid(shaped: RID) -> Bool {
        return false
    }
    
    /// **Optional.**
    /// 
    /// If set to `true` text buffer will display control characters.
    /// 
    @_documentation(visibility: public)
    open func _shapedTextSetPreserveControl(shaped: RID, enabled: Bool) {
    }
    
    /// **Optional.**
    /// 
    /// Returns `true` if text buffer is configured to display control characters.
    /// 
    @_documentation(visibility: public)
    open func _shapedTextGetPreserveControl(shaped: RID) -> Bool {
        return false
    }
    
    /// **Optional.**
    /// 
    /// Sets extra spacing added between glyphs or lines in pixels.
    /// 
    @_documentation(visibility: public)
    open func _shapedTextSetSpacing(shaped: RID, spacing: TextServer.SpacingType, value: Int) {
    }
    
    /// **Optional.**
    /// 
    /// Returns extra spacing added between glyphs or lines in pixels.
    /// 
    @_documentation(visibility: public)
    open func _shapedTextGetSpacing(shaped: RID, spacing: TextServer.SpacingType) -> Int {
        return 0
    }
    
    /// **Required.**
    /// 
    /// Adds text span and font to draw it to the text buffer.
    /// 
    @_documentation(visibility: public)
    open func _shapedTextAddString(shaped: RID, text: String, fonts: VariantCollection<RID>, size: Int, opentypeFeatures: GDictionary, language: String, meta: Variant) -> Bool {
        return false
    }
    
    /// **Required.**
    /// 
    /// Adds inline object to the text buffer, `key` must be unique. In the text, object is represented as `length` object replacement characters.
    /// 
    @_documentation(visibility: public)
    open func _shapedTextAddObject(shaped: RID, key: Variant, size: Vector2, inlineAlign: InlineAlignment, length: Int, baseline: Double) -> Bool {
        return false
    }
    
    /// **Required.**
    /// 
    /// Sets new size and alignment of embedded object.
    /// 
    @_documentation(visibility: public)
    open func _shapedTextResizeObject(shaped: RID, key: Variant, size: Vector2, inlineAlign: InlineAlignment, baseline: Double) -> Bool {
        return false
    }
    
    /// **Required.**
    /// 
    /// Returns number of text spans added using ``_shapedTextAddString(shaped:text:fonts:size:opentypeFeatures:language:meta:)`` or ``_shapedTextAddObject(shaped:key:size:inlineAlign:length:baseline:)``.
    /// 
    @_documentation(visibility: public)
    open func _shapedGetSpanCount(shaped: RID) -> Int {
        return 0
    }
    
    /// **Required.**
    /// 
    /// Returns text span metadata.
    /// 
    @_documentation(visibility: public)
    open func _shapedGetSpanMeta(shaped: RID, index: Int) -> Variant {
        return Variant ()
    }
    
    /// **Required.**
    /// 
    /// Changes text span font, font size, and OpenType features, without changing the text.
    /// 
    @_documentation(visibility: public)
    open func _shapedSetSpanUpdateFont(shaped: RID, index: Int, fonts: VariantCollection<RID>, size: Int, opentypeFeatures: GDictionary) {
    }
    
    /// **Required.**
    /// 
    /// Returns text buffer for the substring of the text in the `shaped` text buffer (including inline objects).
    /// 
    @_documentation(visibility: public)
    open func _shapedTextSubstr(shaped: RID, start: Int, length: Int) -> RID {
        return RID ()
    }
    
    /// **Required.**
    /// 
    /// Returns the parent buffer from which the substring originates.
    /// 
    @_documentation(visibility: public)
    open func _shapedTextGetParent(shaped: RID) -> RID {
        return RID ()
    }
    
    /// **Optional.**
    /// 
    /// Adjusts text width to fit to specified width, returns new text width.
    /// 
    @_documentation(visibility: public)
    open func _shapedTextFitToWidth(shaped: RID, width: Double, justificationFlags: TextServer.JustificationFlag) -> Double {
        return 0.0
    }
    
    /// **Optional.**
    /// 
    /// Aligns shaped text to the given tab-stops.
    /// 
    @_documentation(visibility: public)
    open func _shapedTextTabAlign(shaped: RID, tabStops: PackedFloat32Array) -> Double {
        return 0.0
    }
    
    /// **Required.**
    /// 
    /// Shapes buffer if it's not shaped. Returns `true` if the string is shaped successfully.
    /// 
    @_documentation(visibility: public)
    open func _shapedTextShape(shaped: RID) -> Bool {
        return false
    }
    
    /// **Optional.**
    /// 
    /// Updates break points in the shaped text. This method is called by default implementation of text breaking functions.
    /// 
    @_documentation(visibility: public)
    open func _shapedTextUpdateBreaks(shaped: RID) -> Bool {
        return false
    }
    
    /// **Optional.**
    /// 
    /// Updates justification points in the shaped text. This method is called by default implementation of text justification functions.
    /// 
    @_documentation(visibility: public)
    open func _shapedTextUpdateJustificationOps(shaped: RID) -> Bool {
        return false
    }
    
    /// **Required.**
    /// 
    /// Returns `true` if buffer is successfully shaped.
    /// 
    @_documentation(visibility: public)
    open func _shapedTextIsReady(shaped: RID) -> Bool {
        return false
    }
    
    /// **Required.**
    /// 
    /// Returns an array of glyphs in the visual order.
    /// 
    @_documentation(visibility: public)
    open func _shapedTextGetGlyphs(shaped: RID) -> OpaquePointer? {
        return nil
    }
    
    /// **Required.**
    /// 
    /// Returns text glyphs in the logical order.
    /// 
    @_documentation(visibility: public)
    open func _shapedTextSortLogical(shaped: RID) -> OpaquePointer? {
        return nil
    }
    
    /// **Required.**
    /// 
    /// Returns number of glyphs in the buffer.
    /// 
    @_documentation(visibility: public)
    open func _shapedTextGetGlyphCount(shaped: RID) -> Int {
        return 0
    }
    
    /// **Required.**
    /// 
    /// Returns substring buffer character range in the parent buffer.
    /// 
    @_documentation(visibility: public)
    open func _shapedTextGetRange(shaped: RID) -> Vector2i {
        return Vector2i ()
    }
    
    /// **Optional.**
    /// 
    /// Breaks text to the lines and columns. Returns character ranges for each segment.
    /// 
    @_documentation(visibility: public)
    open func _shapedTextGetLineBreaksAdv(shaped: RID, width: PackedFloat32Array, start: Int, once: Bool, breakFlags: TextServer.LineBreakFlag) -> PackedInt32Array {
        return PackedInt32Array ()
    }
    
    /// **Optional.**
    /// 
    /// Breaks text to the lines and returns character ranges for each line.
    /// 
    @_documentation(visibility: public)
    open func _shapedTextGetLineBreaks(shaped: RID, width: Double, start: Int, breakFlags: TextServer.LineBreakFlag) -> PackedInt32Array {
        return PackedInt32Array ()
    }
    
    /// **Optional.**
    /// 
    /// Breaks text into words and returns array of character ranges. Use `graphemeFlags` to set what characters are used for breaking (see ``TextServer.GraphemeFlag``).
    /// 
    @_documentation(visibility: public)
    open func _shapedTextGetWordBreaks(shaped: RID, graphemeFlags: TextServer.GraphemeFlag, skipGraphemeFlags: TextServer.GraphemeFlag) -> PackedInt32Array {
        return PackedInt32Array ()
    }
    
    /// **Required.**
    /// 
    /// Returns the position of the overrun trim.
    /// 
    @_documentation(visibility: public)
    open func _shapedTextGetTrimPos(shaped: RID) -> Int {
        return 0
    }
    
    /// **Required.**
    /// 
    /// Returns position of the ellipsis.
    /// 
    @_documentation(visibility: public)
    open func _shapedTextGetEllipsisPos(shaped: RID) -> Int {
        return 0
    }
    
    /// **Required.**
    /// 
    /// Returns number of glyphs in the ellipsis.
    /// 
    @_documentation(visibility: public)
    open func _shapedTextGetEllipsisGlyphCount(shaped: RID) -> Int {
        return 0
    }
    
    /// **Required.**
    /// 
    /// Returns array of the glyphs in the ellipsis.
    /// 
    @_documentation(visibility: public)
    open func _shapedTextGetEllipsisGlyphs(shaped: RID) -> OpaquePointer? {
        return nil
    }
    
    /// **Optional.**
    /// 
    /// Trims text if it exceeds the given width.
    /// 
    @_documentation(visibility: public)
    open func _shapedTextOverrunTrimToWidth(shaped: RID, width: Double, trimFlags: TextServer.TextOverrunFlag) {
    }
    
    /// **Required.**
    /// 
    /// Returns array of inline objects.
    /// 
    @_documentation(visibility: public)
    open func _shapedTextGetObjects(shaped: RID) -> GArray {
        return GArray ()
    }
    
    /// **Required.**
    /// 
    /// Returns bounding rectangle of the inline object.
    /// 
    @_documentation(visibility: public)
    open func _shapedTextGetObjectRect(shaped: RID, key: Variant) -> Rect2 {
        return Rect2 ()
    }
    
    /// **Required.**
    /// 
    /// Returns the character range of the inline object.
    /// 
    @_documentation(visibility: public)
    open func _shapedTextGetObjectRange(shaped: RID, key: Variant) -> Vector2i {
        return Vector2i ()
    }
    
    /// **Required.**
    /// 
    /// Returns the glyph index of the inline object.
    /// 
    @_documentation(visibility: public)
    open func _shapedTextGetObjectGlyph(shaped: RID, key: Variant) -> Int {
        return 0
    }
    
    /// **Required.**
    /// 
    /// Returns size of the text.
    /// 
    @_documentation(visibility: public)
    open func _shapedTextGetSize(shaped: RID) -> Vector2 {
        return Vector2 ()
    }
    
    /// **Required.**
    /// 
    /// Returns the text ascent (number of pixels above the baseline for horizontal layout or to the left of baseline for vertical).
    /// 
    @_documentation(visibility: public)
    open func _shapedTextGetAscent(shaped: RID) -> Double {
        return 0.0
    }
    
    /// **Required.**
    /// 
    /// Returns the text descent (number of pixels below the baseline for horizontal layout or to the right of baseline for vertical).
    /// 
    @_documentation(visibility: public)
    open func _shapedTextGetDescent(shaped: RID) -> Double {
        return 0.0
    }
    
    /// **Required.**
    /// 
    /// Returns width (for horizontal layout) or height (for vertical) of the text.
    /// 
    @_documentation(visibility: public)
    open func _shapedTextGetWidth(shaped: RID) -> Double {
        return 0.0
    }
    
    /// **Required.**
    /// 
    /// Returns pixel offset of the underline below the baseline.
    /// 
    @_documentation(visibility: public)
    open func _shapedTextGetUnderlinePosition(shaped: RID) -> Double {
        return 0.0
    }
    
    /// **Required.**
    /// 
    /// Returns thickness of the underline.
    /// 
    @_documentation(visibility: public)
    open func _shapedTextGetUnderlineThickness(shaped: RID) -> Double {
        return 0.0
    }
    
    /// **Optional.**
    /// 
    /// Returns dominant direction of in the range of text.
    /// 
    @_documentation(visibility: public)
    open func _shapedTextGetDominantDirectionInRange(shaped: RID, start: Int, end: Int) -> Int {
        return 0
    }
    
    /// **Optional.**
    /// 
    /// Returns selection rectangles for the specified character range.
    /// 
    @_documentation(visibility: public)
    open func _shapedTextGetSelection(shaped: RID, start: Int, end: Int) -> PackedVector2Array {
        return PackedVector2Array ()
    }
    
    /// **Optional.**
    /// 
    /// Returns grapheme index at the specified pixel offset at the baseline, or `-1` if none is found.
    /// 
    @_documentation(visibility: public)
    open func _shapedTextHitTestGrapheme(shaped: RID, coord: Double) -> Int {
        return 0
    }
    
    /// **Optional.**
    /// 
    /// Returns caret character offset at the specified pixel offset at the baseline. This function always returns a valid position.
    /// 
    @_documentation(visibility: public)
    open func _shapedTextHitTestPosition(shaped: RID, coord: Double) -> Int {
        return 0
    }
    
    /// **Optional.**
    /// 
    /// Draw shaped text into a canvas item at a given position, with `color`. `pos` specifies the leftmost point of the baseline (for horizontal layout) or topmost point of the baseline (for vertical layout).
    /// 
    @_documentation(visibility: public)
    open func _shapedTextDraw(shaped: RID, canvas: RID, pos: Vector2, clipL: Double, clipR: Double, color: Color) {
    }
    
    /// **Optional.**
    /// 
    /// Draw the outline of the shaped text into a canvas item at a given position, with `color`. `pos` specifies the leftmost point of the baseline (for horizontal layout) or topmost point of the baseline (for vertical layout).
    /// 
    @_documentation(visibility: public)
    open func _shapedTextDrawOutline(shaped: RID, canvas: RID, pos: Vector2, clipL: Double, clipR: Double, outlineSize: Int, color: Color) {
    }
    
    /// **Optional.**
    /// 
    /// Returns composite character's bounds as offsets from the start of the line.
    /// 
    @_documentation(visibility: public)
    open func _shapedTextGetGraphemeBounds(shaped: RID, pos: Int) -> Vector2 {
        return Vector2 ()
    }
    
    /// **Optional.**
    /// 
    /// Returns grapheme end position closest to the `pos`.
    /// 
    @_documentation(visibility: public)
    open func _shapedTextNextGraphemePos(shaped: RID, pos: Int) -> Int {
        return 0
    }
    
    /// **Optional.**
    /// 
    /// Returns grapheme start position closest to the `pos`.
    /// 
    @_documentation(visibility: public)
    open func _shapedTextPrevGraphemePos(shaped: RID, pos: Int) -> Int {
        return 0
    }
    
    /// **Optional.**
    /// 
    /// Returns array of the composite character boundaries.
    /// 
    @_documentation(visibility: public)
    open func _shapedTextGetCharacterBreaks(shaped: RID) -> PackedInt32Array {
        return PackedInt32Array ()
    }
    
    /// **Optional.**
    /// 
    /// Returns composite character end position closest to the `pos`.
    /// 
    @_documentation(visibility: public)
    open func _shapedTextNextCharacterPos(shaped: RID, pos: Int) -> Int {
        return 0
    }
    
    /// **Optional.**
    /// 
    /// Returns composite character start position closest to the `pos`.
    /// 
    @_documentation(visibility: public)
    open func _shapedTextPrevCharacterPos(shaped: RID, pos: Int) -> Int {
        return 0
    }
    
    /// **Optional.**
    /// 
    /// Returns composite character position closest to the `pos`.
    /// 
    @_documentation(visibility: public)
    open func _shapedTextClosestCharacterPos(shaped: RID, pos: Int) -> Int {
        return 0
    }
    
    /// **Optional.**
    /// 
    /// Converts a number from the Western Arabic (0..9) to the numeral systems used in `language`.
    /// 
    @_documentation(visibility: public)
    open func _formatNumber(_ number: String, language: String) -> String {
        return String ()
    }
    
    /// **Optional.**
    /// 
    /// Converts `number` from the numeral systems used in `language` to Western Arabic (0..9).
    /// 
    @_documentation(visibility: public)
    open func _parseNumber(_ number: String, language: String) -> String {
        return String ()
    }
    
    /// **Optional.**
    /// 
    /// Returns percent sign used in the `language`.
    /// 
    @_documentation(visibility: public)
    open func _percentSign(language: String) -> String {
        return String ()
    }
    
    /// **Optional.**
    /// 
    /// Strips diacritics from the string.
    /// 
    @_documentation(visibility: public)
    open func _stripDiacritics(string: String) -> String {
        return String ()
    }
    
    /// **Optional.**
    /// 
    /// Returns `true` if `string` is a valid identifier.
    /// 
    @_documentation(visibility: public)
    open func _isValidIdentifier(string: String) -> Bool {
        return false
    }
    
    /// 
    @_documentation(visibility: public)
    open func _isValidLetter(unicode: UInt) -> Bool {
        return false
    }
    
    /// **Optional.**
    /// 
    /// Returns an array of the word break boundaries. Elements in the returned array are the offsets of the start and end of words. Therefore the length of the array is always even.
    /// 
    @_documentation(visibility: public)
    open func _stringGetWordBreaks(string: String, language: String, charsPerLine: Int) -> PackedInt32Array {
        return PackedInt32Array ()
    }
    
    /// **Optional.**
    /// 
    /// Returns array of the composite character boundaries.
    /// 
    @_documentation(visibility: public)
    open func _stringGetCharacterBreaks(string: String, language: String) -> PackedInt32Array {
        return PackedInt32Array ()
    }
    
    /// **Optional.**
    /// 
    /// Returns index of the first string in `dict` which is visually confusable with the `string`, or `-1` if none is found.
    /// 
    @_documentation(visibility: public)
    open func _isConfusable(string: String, dict: PackedStringArray) -> Int {
        return 0
    }
    
    /// **Optional.**
    /// 
    /// Returns `true` if `string` is likely to be an attempt at confusing the reader.
    /// 
    @_documentation(visibility: public)
    open func _spoofCheck(string: String) -> Bool {
        return false
    }
    
    /// **Optional.**
    /// 
    /// Returns the string converted to uppercase.
    /// 
    @_documentation(visibility: public)
    open func _stringToUpper(string: String, language: String) -> String {
        return String ()
    }
    
    /// **Optional.**
    /// 
    /// Returns the string converted to lowercase.
    /// 
    @_documentation(visibility: public)
    open func _stringToLower(string: String, language: String) -> String {
        return String ()
    }
    
    /// **Optional.**
    /// 
    /// Returns the string converted to title case.
    /// 
    @_documentation(visibility: public)
    open func _stringToTitle(string: String, language: String) -> String {
        return String ()
    }
    
    /// **Optional.**
    /// 
    /// Default implementation of the BiDi algorithm override function. See ``TextServer.StructuredTextParser`` for more info.
    /// 
    @_documentation(visibility: public)
    open func _parseStructuredText(parserType: TextServer.StructuredTextParser, args: GArray, text: String) -> VariantCollection<Vector3i> {
        return VariantCollection<Vector3i>()
    }
    
    /// **Optional.**
    /// 
    /// This method is called before text server is unregistered.
    /// 
    @_documentation(visibility: public)
    open func _cleanup() {
    }
    
    override class func getVirtualDispatcher (name: StringName) -> GDExtensionClassCallVirtual? {
        guard implementedOverrides().contains(name) else { return nil }
        switch name.description {
            case "_cleanup":
                return _TextServerExtension_proxy_cleanup
            case "_create_font":
                return _TextServerExtension_proxy_create_font
            case "_create_font_linked_variation":
                return _TextServerExtension_proxy_create_font_linked_variation
            case "_create_shaped_text":
                return _TextServerExtension_proxy_create_shaped_text
            case "_draw_hex_code_box":
                return _TextServerExtension_proxy_draw_hex_code_box
            case "_font_clear_glyphs":
                return _TextServerExtension_proxy_font_clear_glyphs
            case "_font_clear_kerning_map":
                return _TextServerExtension_proxy_font_clear_kerning_map
            case "_font_clear_size_cache":
                return _TextServerExtension_proxy_font_clear_size_cache
            case "_font_clear_textures":
                return _TextServerExtension_proxy_font_clear_textures
            case "_font_draw_glyph":
                return _TextServerExtension_proxy_font_draw_glyph
            case "_font_draw_glyph_outline":
                return _TextServerExtension_proxy_font_draw_glyph_outline
            case "_font_get_antialiasing":
                return _TextServerExtension_proxy_font_get_antialiasing
            case "_font_get_ascent":
                return _TextServerExtension_proxy_font_get_ascent
            case "_font_get_baseline_offset":
                return _TextServerExtension_proxy_font_get_baseline_offset
            case "_font_get_char_from_glyph_index":
                return _TextServerExtension_proxy_font_get_char_from_glyph_index
            case "_font_get_descent":
                return _TextServerExtension_proxy_font_get_descent
            case "_font_get_disable_embedded_bitmaps":
                return _TextServerExtension_proxy_font_get_disable_embedded_bitmaps
            case "_font_get_embolden":
                return _TextServerExtension_proxy_font_get_embolden
            case "_font_get_face_count":
                return _TextServerExtension_proxy_font_get_face_count
            case "_font_get_face_index":
                return _TextServerExtension_proxy_font_get_face_index
            case "_font_get_fixed_size":
                return _TextServerExtension_proxy_font_get_fixed_size
            case "_font_get_fixed_size_scale_mode":
                return _TextServerExtension_proxy_font_get_fixed_size_scale_mode
            case "_font_get_generate_mipmaps":
                return _TextServerExtension_proxy_font_get_generate_mipmaps
            case "_font_get_global_oversampling":
                return _TextServerExtension_proxy_font_get_global_oversampling
            case "_font_get_glyph_advance":
                return _TextServerExtension_proxy_font_get_glyph_advance
            case "_font_get_glyph_contours":
                return _TextServerExtension_proxy_font_get_glyph_contours
            case "_font_get_glyph_index":
                return _TextServerExtension_proxy_font_get_glyph_index
            case "_font_get_glyph_list":
                return _TextServerExtension_proxy_font_get_glyph_list
            case "_font_get_glyph_offset":
                return _TextServerExtension_proxy_font_get_glyph_offset
            case "_font_get_glyph_size":
                return _TextServerExtension_proxy_font_get_glyph_size
            case "_font_get_glyph_texture_idx":
                return _TextServerExtension_proxy_font_get_glyph_texture_idx
            case "_font_get_glyph_texture_rid":
                return _TextServerExtension_proxy_font_get_glyph_texture_rid
            case "_font_get_glyph_texture_size":
                return _TextServerExtension_proxy_font_get_glyph_texture_size
            case "_font_get_glyph_uv_rect":
                return _TextServerExtension_proxy_font_get_glyph_uv_rect
            case "_font_get_hinting":
                return _TextServerExtension_proxy_font_get_hinting
            case "_font_get_kerning":
                return _TextServerExtension_proxy_font_get_kerning
            case "_font_get_kerning_list":
                return _TextServerExtension_proxy_font_get_kerning_list
            case "_font_get_language_support_override":
                return _TextServerExtension_proxy_font_get_language_support_override
            case "_font_get_language_support_overrides":
                return _TextServerExtension_proxy_font_get_language_support_overrides
            case "_font_get_msdf_pixel_range":
                return _TextServerExtension_proxy_font_get_msdf_pixel_range
            case "_font_get_msdf_size":
                return _TextServerExtension_proxy_font_get_msdf_size
            case "_font_get_name":
                return _TextServerExtension_proxy_font_get_name
            case "_font_get_opentype_feature_overrides":
                return _TextServerExtension_proxy_font_get_opentype_feature_overrides
            case "_font_get_ot_name_strings":
                return _TextServerExtension_proxy_font_get_ot_name_strings
            case "_font_get_oversampling":
                return _TextServerExtension_proxy_font_get_oversampling
            case "_font_get_scale":
                return _TextServerExtension_proxy_font_get_scale
            case "_font_get_script_support_override":
                return _TextServerExtension_proxy_font_get_script_support_override
            case "_font_get_script_support_overrides":
                return _TextServerExtension_proxy_font_get_script_support_overrides
            case "_font_get_size_cache_list":
                return _TextServerExtension_proxy_font_get_size_cache_list
            case "_font_get_spacing":
                return _TextServerExtension_proxy_font_get_spacing
            case "_font_get_stretch":
                return _TextServerExtension_proxy_font_get_stretch
            case "_font_get_style":
                return _TextServerExtension_proxy_font_get_style
            case "_font_get_style_name":
                return _TextServerExtension_proxy_font_get_style_name
            case "_font_get_subpixel_positioning":
                return _TextServerExtension_proxy_font_get_subpixel_positioning
            case "_font_get_supported_chars":
                return _TextServerExtension_proxy_font_get_supported_chars
            case "_font_get_texture_count":
                return _TextServerExtension_proxy_font_get_texture_count
            case "_font_get_texture_image":
                return _TextServerExtension_proxy_font_get_texture_image
            case "_font_get_texture_offsets":
                return _TextServerExtension_proxy_font_get_texture_offsets
            case "_font_get_transform":
                return _TextServerExtension_proxy_font_get_transform
            case "_font_get_underline_position":
                return _TextServerExtension_proxy_font_get_underline_position
            case "_font_get_underline_thickness":
                return _TextServerExtension_proxy_font_get_underline_thickness
            case "_font_get_variation_coordinates":
                return _TextServerExtension_proxy_font_get_variation_coordinates
            case "_font_get_weight":
                return _TextServerExtension_proxy_font_get_weight
            case "_font_has_char":
                return _TextServerExtension_proxy_font_has_char
            case "_font_is_allow_system_fallback":
                return _TextServerExtension_proxy_font_is_allow_system_fallback
            case "_font_is_force_autohinter":
                return _TextServerExtension_proxy_font_is_force_autohinter
            case "_font_is_language_supported":
                return _TextServerExtension_proxy_font_is_language_supported
            case "_font_is_multichannel_signed_distance_field":
                return _TextServerExtension_proxy_font_is_multichannel_signed_distance_field
            case "_font_is_script_supported":
                return _TextServerExtension_proxy_font_is_script_supported
            case "_font_remove_glyph":
                return _TextServerExtension_proxy_font_remove_glyph
            case "_font_remove_kerning":
                return _TextServerExtension_proxy_font_remove_kerning
            case "_font_remove_language_support_override":
                return _TextServerExtension_proxy_font_remove_language_support_override
            case "_font_remove_script_support_override":
                return _TextServerExtension_proxy_font_remove_script_support_override
            case "_font_remove_size_cache":
                return _TextServerExtension_proxy_font_remove_size_cache
            case "_font_remove_texture":
                return _TextServerExtension_proxy_font_remove_texture
            case "_font_render_glyph":
                return _TextServerExtension_proxy_font_render_glyph
            case "_font_render_range":
                return _TextServerExtension_proxy_font_render_range
            case "_font_set_allow_system_fallback":
                return _TextServerExtension_proxy_font_set_allow_system_fallback
            case "_font_set_antialiasing":
                return _TextServerExtension_proxy_font_set_antialiasing
            case "_font_set_ascent":
                return _TextServerExtension_proxy_font_set_ascent
            case "_font_set_baseline_offset":
                return _TextServerExtension_proxy_font_set_baseline_offset
            case "_font_set_data":
                return _TextServerExtension_proxy_font_set_data
            case "_font_set_descent":
                return _TextServerExtension_proxy_font_set_descent
            case "_font_set_disable_embedded_bitmaps":
                return _TextServerExtension_proxy_font_set_disable_embedded_bitmaps
            case "_font_set_embolden":
                return _TextServerExtension_proxy_font_set_embolden
            case "_font_set_face_index":
                return _TextServerExtension_proxy_font_set_face_index
            case "_font_set_fixed_size":
                return _TextServerExtension_proxy_font_set_fixed_size
            case "_font_set_fixed_size_scale_mode":
                return _TextServerExtension_proxy_font_set_fixed_size_scale_mode
            case "_font_set_force_autohinter":
                return _TextServerExtension_proxy_font_set_force_autohinter
            case "_font_set_generate_mipmaps":
                return _TextServerExtension_proxy_font_set_generate_mipmaps
            case "_font_set_global_oversampling":
                return _TextServerExtension_proxy_font_set_global_oversampling
            case "_font_set_glyph_advance":
                return _TextServerExtension_proxy_font_set_glyph_advance
            case "_font_set_glyph_offset":
                return _TextServerExtension_proxy_font_set_glyph_offset
            case "_font_set_glyph_size":
                return _TextServerExtension_proxy_font_set_glyph_size
            case "_font_set_glyph_texture_idx":
                return _TextServerExtension_proxy_font_set_glyph_texture_idx
            case "_font_set_glyph_uv_rect":
                return _TextServerExtension_proxy_font_set_glyph_uv_rect
            case "_font_set_hinting":
                return _TextServerExtension_proxy_font_set_hinting
            case "_font_set_kerning":
                return _TextServerExtension_proxy_font_set_kerning
            case "_font_set_language_support_override":
                return _TextServerExtension_proxy_font_set_language_support_override
            case "_font_set_msdf_pixel_range":
                return _TextServerExtension_proxy_font_set_msdf_pixel_range
            case "_font_set_msdf_size":
                return _TextServerExtension_proxy_font_set_msdf_size
            case "_font_set_multichannel_signed_distance_field":
                return _TextServerExtension_proxy_font_set_multichannel_signed_distance_field
            case "_font_set_name":
                return _TextServerExtension_proxy_font_set_name
            case "_font_set_opentype_feature_overrides":
                return _TextServerExtension_proxy_font_set_opentype_feature_overrides
            case "_font_set_oversampling":
                return _TextServerExtension_proxy_font_set_oversampling
            case "_font_set_scale":
                return _TextServerExtension_proxy_font_set_scale
            case "_font_set_script_support_override":
                return _TextServerExtension_proxy_font_set_script_support_override
            case "_font_set_spacing":
                return _TextServerExtension_proxy_font_set_spacing
            case "_font_set_stretch":
                return _TextServerExtension_proxy_font_set_stretch
            case "_font_set_style":
                return _TextServerExtension_proxy_font_set_style
            case "_font_set_style_name":
                return _TextServerExtension_proxy_font_set_style_name
            case "_font_set_subpixel_positioning":
                return _TextServerExtension_proxy_font_set_subpixel_positioning
            case "_font_set_texture_image":
                return _TextServerExtension_proxy_font_set_texture_image
            case "_font_set_texture_offsets":
                return _TextServerExtension_proxy_font_set_texture_offsets
            case "_font_set_transform":
                return _TextServerExtension_proxy_font_set_transform
            case "_font_set_underline_position":
                return _TextServerExtension_proxy_font_set_underline_position
            case "_font_set_underline_thickness":
                return _TextServerExtension_proxy_font_set_underline_thickness
            case "_font_set_variation_coordinates":
                return _TextServerExtension_proxy_font_set_variation_coordinates
            case "_font_set_weight":
                return _TextServerExtension_proxy_font_set_weight
            case "_font_supported_feature_list":
                return _TextServerExtension_proxy_font_supported_feature_list
            case "_font_supported_variation_list":
                return _TextServerExtension_proxy_font_supported_variation_list
            case "_format_number":
                return _TextServerExtension_proxy_format_number
            case "_free_rid":
                return _TextServerExtension_proxy_free_rid
            case "_get_features":
                return _TextServerExtension_proxy_get_features
            case "_get_hex_code_box_size":
                return _TextServerExtension_proxy_get_hex_code_box_size
            case "_get_name":
                return _TextServerExtension_proxy_get_name
            case "_get_support_data_filename":
                return _TextServerExtension_proxy_get_support_data_filename
            case "_get_support_data_info":
                return _TextServerExtension_proxy_get_support_data_info
            case "_has":
                return _TextServerExtension_proxy_has
            case "_has_feature":
                return _TextServerExtension_proxy_has_feature
            case "_is_confusable":
                return _TextServerExtension_proxy_is_confusable
            case "_is_locale_right_to_left":
                return _TextServerExtension_proxy_is_locale_right_to_left
            case "_is_valid_identifier":
                return _TextServerExtension_proxy_is_valid_identifier
            case "_is_valid_letter":
                return _TextServerExtension_proxy_is_valid_letter
            case "_load_support_data":
                return _TextServerExtension_proxy_load_support_data
            case "_name_to_tag":
                return _TextServerExtension_proxy_name_to_tag
            case "_parse_number":
                return _TextServerExtension_proxy_parse_number
            case "_parse_structured_text":
                return _TextServerExtension_proxy_parse_structured_text
            case "_percent_sign":
                return _TextServerExtension_proxy_percent_sign
            case "_save_support_data":
                return _TextServerExtension_proxy_save_support_data
            case "_shaped_get_span_count":
                return _TextServerExtension_proxy_shaped_get_span_count
            case "_shaped_get_span_meta":
                return _TextServerExtension_proxy_shaped_get_span_meta
            case "_shaped_set_span_update_font":
                return _TextServerExtension_proxy_shaped_set_span_update_font
            case "_shaped_text_add_object":
                return _TextServerExtension_proxy_shaped_text_add_object
            case "_shaped_text_add_string":
                return _TextServerExtension_proxy_shaped_text_add_string
            case "_shaped_text_clear":
                return _TextServerExtension_proxy_shaped_text_clear
            case "_shaped_text_closest_character_pos":
                return _TextServerExtension_proxy_shaped_text_closest_character_pos
            case "_shaped_text_draw":
                return _TextServerExtension_proxy_shaped_text_draw
            case "_shaped_text_draw_outline":
                return _TextServerExtension_proxy_shaped_text_draw_outline
            case "_shaped_text_fit_to_width":
                return _TextServerExtension_proxy_shaped_text_fit_to_width
            case "_shaped_text_get_ascent":
                return _TextServerExtension_proxy_shaped_text_get_ascent
            case "_shaped_text_get_character_breaks":
                return _TextServerExtension_proxy_shaped_text_get_character_breaks
            case "_shaped_text_get_custom_ellipsis":
                return _TextServerExtension_proxy_shaped_text_get_custom_ellipsis
            case "_shaped_text_get_custom_punctuation":
                return _TextServerExtension_proxy_shaped_text_get_custom_punctuation
            case "_shaped_text_get_descent":
                return _TextServerExtension_proxy_shaped_text_get_descent
            case "_shaped_text_get_direction":
                return _TextServerExtension_proxy_shaped_text_get_direction
            case "_shaped_text_get_dominant_direction_in_range":
                return _TextServerExtension_proxy_shaped_text_get_dominant_direction_in_range
            case "_shaped_text_get_ellipsis_glyph_count":
                return _TextServerExtension_proxy_shaped_text_get_ellipsis_glyph_count
            case "_shaped_text_get_ellipsis_glyphs":
                return _TextServerExtension_proxy_shaped_text_get_ellipsis_glyphs
            case "_shaped_text_get_ellipsis_pos":
                return _TextServerExtension_proxy_shaped_text_get_ellipsis_pos
            case "_shaped_text_get_glyph_count":
                return _TextServerExtension_proxy_shaped_text_get_glyph_count
            case "_shaped_text_get_glyphs":
                return _TextServerExtension_proxy_shaped_text_get_glyphs
            case "_shaped_text_get_grapheme_bounds":
                return _TextServerExtension_proxy_shaped_text_get_grapheme_bounds
            case "_shaped_text_get_inferred_direction":
                return _TextServerExtension_proxy_shaped_text_get_inferred_direction
            case "_shaped_text_get_line_breaks":
                return _TextServerExtension_proxy_shaped_text_get_line_breaks
            case "_shaped_text_get_line_breaks_adv":
                return _TextServerExtension_proxy_shaped_text_get_line_breaks_adv
            case "_shaped_text_get_object_glyph":
                return _TextServerExtension_proxy_shaped_text_get_object_glyph
            case "_shaped_text_get_object_range":
                return _TextServerExtension_proxy_shaped_text_get_object_range
            case "_shaped_text_get_object_rect":
                return _TextServerExtension_proxy_shaped_text_get_object_rect
            case "_shaped_text_get_objects":
                return _TextServerExtension_proxy_shaped_text_get_objects
            case "_shaped_text_get_orientation":
                return _TextServerExtension_proxy_shaped_text_get_orientation
            case "_shaped_text_get_parent":
                return _TextServerExtension_proxy_shaped_text_get_parent
            case "_shaped_text_get_preserve_control":
                return _TextServerExtension_proxy_shaped_text_get_preserve_control
            case "_shaped_text_get_preserve_invalid":
                return _TextServerExtension_proxy_shaped_text_get_preserve_invalid
            case "_shaped_text_get_range":
                return _TextServerExtension_proxy_shaped_text_get_range
            case "_shaped_text_get_selection":
                return _TextServerExtension_proxy_shaped_text_get_selection
            case "_shaped_text_get_size":
                return _TextServerExtension_proxy_shaped_text_get_size
            case "_shaped_text_get_spacing":
                return _TextServerExtension_proxy_shaped_text_get_spacing
            case "_shaped_text_get_trim_pos":
                return _TextServerExtension_proxy_shaped_text_get_trim_pos
            case "_shaped_text_get_underline_position":
                return _TextServerExtension_proxy_shaped_text_get_underline_position
            case "_shaped_text_get_underline_thickness":
                return _TextServerExtension_proxy_shaped_text_get_underline_thickness
            case "_shaped_text_get_width":
                return _TextServerExtension_proxy_shaped_text_get_width
            case "_shaped_text_get_word_breaks":
                return _TextServerExtension_proxy_shaped_text_get_word_breaks
            case "_shaped_text_hit_test_grapheme":
                return _TextServerExtension_proxy_shaped_text_hit_test_grapheme
            case "_shaped_text_hit_test_position":
                return _TextServerExtension_proxy_shaped_text_hit_test_position
            case "_shaped_text_is_ready":
                return _TextServerExtension_proxy_shaped_text_is_ready
            case "_shaped_text_next_character_pos":
                return _TextServerExtension_proxy_shaped_text_next_character_pos
            case "_shaped_text_next_grapheme_pos":
                return _TextServerExtension_proxy_shaped_text_next_grapheme_pos
            case "_shaped_text_overrun_trim_to_width":
                return _TextServerExtension_proxy_shaped_text_overrun_trim_to_width
            case "_shaped_text_prev_character_pos":
                return _TextServerExtension_proxy_shaped_text_prev_character_pos
            case "_shaped_text_prev_grapheme_pos":
                return _TextServerExtension_proxy_shaped_text_prev_grapheme_pos
            case "_shaped_text_resize_object":
                return _TextServerExtension_proxy_shaped_text_resize_object
            case "_shaped_text_set_bidi_override":
                return _TextServerExtension_proxy_shaped_text_set_bidi_override
            case "_shaped_text_set_custom_ellipsis":
                return _TextServerExtension_proxy_shaped_text_set_custom_ellipsis
            case "_shaped_text_set_custom_punctuation":
                return _TextServerExtension_proxy_shaped_text_set_custom_punctuation
            case "_shaped_text_set_direction":
                return _TextServerExtension_proxy_shaped_text_set_direction
            case "_shaped_text_set_orientation":
                return _TextServerExtension_proxy_shaped_text_set_orientation
            case "_shaped_text_set_preserve_control":
                return _TextServerExtension_proxy_shaped_text_set_preserve_control
            case "_shaped_text_set_preserve_invalid":
                return _TextServerExtension_proxy_shaped_text_set_preserve_invalid
            case "_shaped_text_set_spacing":
                return _TextServerExtension_proxy_shaped_text_set_spacing
            case "_shaped_text_shape":
                return _TextServerExtension_proxy_shaped_text_shape
            case "_shaped_text_sort_logical":
                return _TextServerExtension_proxy_shaped_text_sort_logical
            case "_shaped_text_substr":
                return _TextServerExtension_proxy_shaped_text_substr
            case "_shaped_text_tab_align":
                return _TextServerExtension_proxy_shaped_text_tab_align
            case "_shaped_text_update_breaks":
                return _TextServerExtension_proxy_shaped_text_update_breaks
            case "_shaped_text_update_justification_ops":
                return _TextServerExtension_proxy_shaped_text_update_justification_ops
            case "_spoof_check":
                return _TextServerExtension_proxy_spoof_check
            case "_string_get_character_breaks":
                return _TextServerExtension_proxy_string_get_character_breaks
            case "_string_get_word_breaks":
                return _TextServerExtension_proxy_string_get_word_breaks
            case "_string_to_lower":
                return _TextServerExtension_proxy_string_to_lower
            case "_string_to_title":
                return _TextServerExtension_proxy_string_to_title
            case "_string_to_upper":
                return _TextServerExtension_proxy_string_to_upper
            case "_strip_diacritics":
                return _TextServerExtension_proxy_strip_diacritics
            case "_tag_to_name":
                return _TextServerExtension_proxy_tag_to_name
            default:
                return super.getVirtualDispatcher (name: name)
        }
        
    }
    
}

// Support methods for proxies
func _TextServerExtension_proxy_cleanup (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._cleanup ()
}

func _TextServerExtension_proxy_create_font (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._createFont ()
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // RID
    ret.content = RID.zero
}

func _TextServerExtension_proxy_create_font_linked_variation (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._createFontLinkedVariation (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // RID
    ret.content = RID.zero
}

func _TextServerExtension_proxy_create_shaped_text (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._createShapedText (direction: args [0]!.assumingMemoryBound (to: TextServer.Direction.self).pointee, orientation: args [1]!.assumingMemoryBound (to: TextServer.Orientation.self).pointee)
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // RID
    ret.content = RID.zero
}

func _TextServerExtension_proxy_draw_hex_code_box (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._drawHexCodeBox (canvas: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), size: args [1]!.assumingMemoryBound (to: Int.self).pointee, pos: args [2]!.assumingMemoryBound (to: Vector2.self).pointee, index: args [3]!.assumingMemoryBound (to: Int.self).pointee, color: args [4]!.assumingMemoryBound (to: Color.self).pointee)
}

func _TextServerExtension_proxy_font_clear_glyphs (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._fontClearGlyphs (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), size: args [1]!.assumingMemoryBound (to: Vector2i.self).pointee)
}

func _TextServerExtension_proxy_font_clear_kerning_map (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._fontClearKerningMap (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), size: args [1]!.assumingMemoryBound (to: Int.self).pointee)
}

func _TextServerExtension_proxy_font_clear_size_cache (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._fontClearSizeCache (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
}

func _TextServerExtension_proxy_font_clear_textures (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._fontClearTextures (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), size: args [1]!.assumingMemoryBound (to: Vector2i.self).pointee)
}

func _TextServerExtension_proxy_font_draw_glyph (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._fontDrawGlyph (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), canvas: RID (content: args [1]!.assumingMemoryBound (to: Int64.self).pointee), size: args [2]!.assumingMemoryBound (to: Int.self).pointee, pos: args [3]!.assumingMemoryBound (to: Vector2.self).pointee, index: args [4]!.assumingMemoryBound (to: Int.self).pointee, color: args [5]!.assumingMemoryBound (to: Color.self).pointee)
}

func _TextServerExtension_proxy_font_draw_glyph_outline (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._fontDrawGlyphOutline (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), canvas: RID (content: args [1]!.assumingMemoryBound (to: Int64.self).pointee), size: args [2]!.assumingMemoryBound (to: Int.self).pointee, outlineSize: args [3]!.assumingMemoryBound (to: Int.self).pointee, pos: args [4]!.assumingMemoryBound (to: Vector2.self).pointee, index: args [5]!.assumingMemoryBound (to: Int.self).pointee, color: args [6]!.assumingMemoryBound (to: Color.self).pointee)
}

func _TextServerExtension_proxy_font_get_antialiasing (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._fontGetAntialiasing (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: Int32 (ret.rawValue), as: Int32.self)
}

func _TextServerExtension_proxy_font_get_ascent (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._fontGetAscent (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), size: args [1]!.assumingMemoryBound (to: Int.self).pointee)
    retPtr!.storeBytes (of: ret, as: Double.self)
}

func _TextServerExtension_proxy_font_get_baseline_offset (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._fontGetBaselineOffset (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Double.self)
}

func _TextServerExtension_proxy_font_get_char_from_glyph_index (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._fontGetCharFromGlyphIndex (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), size: args [1]!.assumingMemoryBound (to: Int.self).pointee, glyphIndex: args [2]!.assumingMemoryBound (to: Int.self).pointee)
    retPtr!.storeBytes (of: ret, as: Int.self)
}

func _TextServerExtension_proxy_font_get_descent (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._fontGetDescent (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), size: args [1]!.assumingMemoryBound (to: Int.self).pointee)
    retPtr!.storeBytes (of: ret, as: Double.self)
}

func _TextServerExtension_proxy_font_get_disable_embedded_bitmaps (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._fontGetDisableEmbeddedBitmaps (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _TextServerExtension_proxy_font_get_embolden (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._fontGetEmbolden (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Double.self)
}

func _TextServerExtension_proxy_font_get_face_count (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._fontGetFaceCount (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Int.self)
}

func _TextServerExtension_proxy_font_get_face_index (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._fontGetFaceIndex (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Int.self)
}

func _TextServerExtension_proxy_font_get_fixed_size (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._fontGetFixedSize (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Int.self)
}

func _TextServerExtension_proxy_font_get_fixed_size_scale_mode (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._fontGetFixedSizeScaleMode (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: Int32 (ret.rawValue), as: Int32.self)
}

func _TextServerExtension_proxy_font_get_generate_mipmaps (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._fontGetGenerateMipmaps (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _TextServerExtension_proxy_font_get_global_oversampling (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._fontGetGlobalOversampling ()
    retPtr!.storeBytes (of: ret, as: Double.self)
}

func _TextServerExtension_proxy_font_get_glyph_advance (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._fontGetGlyphAdvance (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), size: args [1]!.assumingMemoryBound (to: Int.self).pointee, glyph: args [2]!.assumingMemoryBound (to: Int.self).pointee)
    retPtr!.storeBytes (of: ret, as: Vector2.self)
}

func _TextServerExtension_proxy_font_get_glyph_contours (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._fontGetGlyphContours (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), size: args [1]!.assumingMemoryBound (to: Int.self).pointee, index: args [2]!.assumingMemoryBound (to: Int.self).pointee)
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // Dictionary
    ret.content = GDictionary.zero
}

func _TextServerExtension_proxy_font_get_glyph_index (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._fontGetGlyphIndex (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), size: args [1]!.assumingMemoryBound (to: Int.self).pointee, char: args [2]!.assumingMemoryBound (to: Int.self).pointee, variationSelector: args [3]!.assumingMemoryBound (to: Int.self).pointee)
    retPtr!.storeBytes (of: ret, as: Int.self)
}

func _TextServerExtension_proxy_font_get_glyph_list (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._fontGetGlyphList (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), size: args [1]!.assumingMemoryBound (to: Vector2i.self).pointee)
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // PackedInt32Array
    ret.content = PackedInt32Array.zero
}

func _TextServerExtension_proxy_font_get_glyph_offset (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._fontGetGlyphOffset (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), size: args [1]!.assumingMemoryBound (to: Vector2i.self).pointee, glyph: args [2]!.assumingMemoryBound (to: Int.self).pointee)
    retPtr!.storeBytes (of: ret, as: Vector2.self)
}

func _TextServerExtension_proxy_font_get_glyph_size (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._fontGetGlyphSize (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), size: args [1]!.assumingMemoryBound (to: Vector2i.self).pointee, glyph: args [2]!.assumingMemoryBound (to: Int.self).pointee)
    retPtr!.storeBytes (of: ret, as: Vector2.self)
}

func _TextServerExtension_proxy_font_get_glyph_texture_idx (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._fontGetGlyphTextureIdx (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), size: args [1]!.assumingMemoryBound (to: Vector2i.self).pointee, glyph: args [2]!.assumingMemoryBound (to: Int.self).pointee)
    retPtr!.storeBytes (of: ret, as: Int.self)
}

func _TextServerExtension_proxy_font_get_glyph_texture_rid (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._fontGetGlyphTextureRid (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), size: args [1]!.assumingMemoryBound (to: Vector2i.self).pointee, glyph: args [2]!.assumingMemoryBound (to: Int.self).pointee)
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // RID
    ret.content = RID.zero
}

func _TextServerExtension_proxy_font_get_glyph_texture_size (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._fontGetGlyphTextureSize (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), size: args [1]!.assumingMemoryBound (to: Vector2i.self).pointee, glyph: args [2]!.assumingMemoryBound (to: Int.self).pointee)
    retPtr!.storeBytes (of: ret, as: Vector2.self)
}

func _TextServerExtension_proxy_font_get_glyph_uv_rect (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._fontGetGlyphUvRect (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), size: args [1]!.assumingMemoryBound (to: Vector2i.self).pointee, glyph: args [2]!.assumingMemoryBound (to: Int.self).pointee)
    retPtr!.storeBytes (of: ret, as: Rect2.self)
}

func _TextServerExtension_proxy_font_get_hinting (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._fontGetHinting (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: Int32 (ret.rawValue), as: Int32.self)
}

func _TextServerExtension_proxy_font_get_kerning (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._fontGetKerning (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), size: args [1]!.assumingMemoryBound (to: Int.self).pointee, glyphPair: args [2]!.assumingMemoryBound (to: Vector2i.self).pointee)
    retPtr!.storeBytes (of: ret, as: Vector2.self)
}

func _TextServerExtension_proxy_font_get_kerning_list (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._fontGetKerningList (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), size: args [1]!.assumingMemoryBound (to: Int.self).pointee)
    retPtr!.storeBytes (of: ret.array.content, as: type (of: ret.array.content)) // typedarray::Vector2i
}

func _TextServerExtension_proxy_font_get_language_support_override (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._fontGetLanguageSupportOverride (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), language: GString.stringFromGStringPtr (ptr: args [1]!) ?? "")
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _TextServerExtension_proxy_font_get_language_support_overrides (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._fontGetLanguageSupportOverrides (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // PackedStringArray
    ret.content = PackedStringArray.zero
}

func _TextServerExtension_proxy_font_get_msdf_pixel_range (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._fontGetMsdfPixelRange (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Int.self)
}

func _TextServerExtension_proxy_font_get_msdf_size (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._fontGetMsdfSize (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Int.self)
}

func _TextServerExtension_proxy_font_get_name (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = GString (swiftObject._fontGetName (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee)))
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // String
    ret.content = GString.zero
}

func _TextServerExtension_proxy_font_get_opentype_feature_overrides (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._fontGetOpentypeFeatureOverrides (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // Dictionary
    ret.content = GDictionary.zero
}

func _TextServerExtension_proxy_font_get_ot_name_strings (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._fontGetOtNameStrings (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // Dictionary
    ret.content = GDictionary.zero
}

func _TextServerExtension_proxy_font_get_oversampling (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._fontGetOversampling (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Double.self)
}

func _TextServerExtension_proxy_font_get_scale (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._fontGetScale (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), size: args [1]!.assumingMemoryBound (to: Int.self).pointee)
    retPtr!.storeBytes (of: ret, as: Double.self)
}

func _TextServerExtension_proxy_font_get_script_support_override (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._fontGetScriptSupportOverride (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), script: GString.stringFromGStringPtr (ptr: args [1]!) ?? "")
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _TextServerExtension_proxy_font_get_script_support_overrides (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._fontGetScriptSupportOverrides (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // PackedStringArray
    ret.content = PackedStringArray.zero
}

func _TextServerExtension_proxy_font_get_size_cache_list (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._fontGetSizeCacheList (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret.array.content, as: type (of: ret.array.content)) // typedarray::Vector2i
}

func _TextServerExtension_proxy_font_get_spacing (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._fontGetSpacing (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), spacing: args [1]!.assumingMemoryBound (to: TextServer.SpacingType.self).pointee)
    retPtr!.storeBytes (of: ret, as: Int.self)
}

func _TextServerExtension_proxy_font_get_stretch (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._fontGetStretch (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Int.self)
}

func _TextServerExtension_proxy_font_get_style (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._fontGetStyle (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: TextServer.FontStyle.self)
}

func _TextServerExtension_proxy_font_get_style_name (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = GString (swiftObject._fontGetStyleName (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee)))
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // String
    ret.content = GString.zero
}

func _TextServerExtension_proxy_font_get_subpixel_positioning (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._fontGetSubpixelPositioning (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: Int32 (ret.rawValue), as: Int32.self)
}

func _TextServerExtension_proxy_font_get_supported_chars (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = GString (swiftObject._fontGetSupportedChars (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee)))
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // String
    ret.content = GString.zero
}

func _TextServerExtension_proxy_font_get_texture_count (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._fontGetTextureCount (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), size: args [1]!.assumingMemoryBound (to: Vector2i.self).pointee)
    retPtr!.storeBytes (of: ret, as: Int.self)
}

func _TextServerExtension_proxy_font_get_texture_image (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._fontGetTextureImage (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), size: args [1]!.assumingMemoryBound (to: Vector2i.self).pointee, textureIndex: args [2]!.assumingMemoryBound (to: Int.self).pointee)
    retPtr!.storeBytes (of: ret?.handle, as: UnsafeRawPointer?.self) // Image
}

func _TextServerExtension_proxy_font_get_texture_offsets (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._fontGetTextureOffsets (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), size: args [1]!.assumingMemoryBound (to: Vector2i.self).pointee, textureIndex: args [2]!.assumingMemoryBound (to: Int.self).pointee)
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // PackedInt32Array
    ret.content = PackedInt32Array.zero
}

func _TextServerExtension_proxy_font_get_transform (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._fontGetTransform (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Transform2D.self)
}

func _TextServerExtension_proxy_font_get_underline_position (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._fontGetUnderlinePosition (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), size: args [1]!.assumingMemoryBound (to: Int.self).pointee)
    retPtr!.storeBytes (of: ret, as: Double.self)
}

func _TextServerExtension_proxy_font_get_underline_thickness (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._fontGetUnderlineThickness (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), size: args [1]!.assumingMemoryBound (to: Int.self).pointee)
    retPtr!.storeBytes (of: ret, as: Double.self)
}

func _TextServerExtension_proxy_font_get_variation_coordinates (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._fontGetVariationCoordinates (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // Dictionary
    ret.content = GDictionary.zero
}

func _TextServerExtension_proxy_font_get_weight (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._fontGetWeight (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Int.self)
}

func _TextServerExtension_proxy_font_has_char (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._fontHasChar (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), char: args [1]!.assumingMemoryBound (to: Int.self).pointee)
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _TextServerExtension_proxy_font_is_allow_system_fallback (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._fontIsAllowSystemFallback (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _TextServerExtension_proxy_font_is_force_autohinter (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._fontIsForceAutohinter (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _TextServerExtension_proxy_font_is_language_supported (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._fontIsLanguageSupported (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), language: GString.stringFromGStringPtr (ptr: args [1]!) ?? "")
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _TextServerExtension_proxy_font_is_multichannel_signed_distance_field (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._fontIsMultichannelSignedDistanceField (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _TextServerExtension_proxy_font_is_script_supported (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._fontIsScriptSupported (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), script: GString.stringFromGStringPtr (ptr: args [1]!) ?? "")
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _TextServerExtension_proxy_font_remove_glyph (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._fontRemoveGlyph (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), size: args [1]!.assumingMemoryBound (to: Vector2i.self).pointee, glyph: args [2]!.assumingMemoryBound (to: Int.self).pointee)
}

func _TextServerExtension_proxy_font_remove_kerning (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._fontRemoveKerning (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), size: args [1]!.assumingMemoryBound (to: Int.self).pointee, glyphPair: args [2]!.assumingMemoryBound (to: Vector2i.self).pointee)
}

func _TextServerExtension_proxy_font_remove_language_support_override (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._fontRemoveLanguageSupportOverride (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), language: GString.stringFromGStringPtr (ptr: args [1]!) ?? "")
}

func _TextServerExtension_proxy_font_remove_script_support_override (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._fontRemoveScriptSupportOverride (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), script: GString.stringFromGStringPtr (ptr: args [1]!) ?? "")
}

func _TextServerExtension_proxy_font_remove_size_cache (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._fontRemoveSizeCache (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), size: args [1]!.assumingMemoryBound (to: Vector2i.self).pointee)
}

func _TextServerExtension_proxy_font_remove_texture (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._fontRemoveTexture (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), size: args [1]!.assumingMemoryBound (to: Vector2i.self).pointee, textureIndex: args [2]!.assumingMemoryBound (to: Int.self).pointee)
}

func _TextServerExtension_proxy_font_render_glyph (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._fontRenderGlyph (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), size: args [1]!.assumingMemoryBound (to: Vector2i.self).pointee, index: args [2]!.assumingMemoryBound (to: Int.self).pointee)
}

func _TextServerExtension_proxy_font_render_range (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._fontRenderRange (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), size: args [1]!.assumingMemoryBound (to: Vector2i.self).pointee, start: args [2]!.assumingMemoryBound (to: Int.self).pointee, end: args [3]!.assumingMemoryBound (to: Int.self).pointee)
}

func _TextServerExtension_proxy_font_set_allow_system_fallback (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._fontSetAllowSystemFallback (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), allowSystemFallback: args [1]!.assumingMemoryBound (to: Bool.self).pointee)
}

func _TextServerExtension_proxy_font_set_antialiasing (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._fontSetAntialiasing (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), antialiasing: args [1]!.assumingMemoryBound (to: TextServer.FontAntialiasing.self).pointee)
}

func _TextServerExtension_proxy_font_set_ascent (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._fontSetAscent (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), size: args [1]!.assumingMemoryBound (to: Int.self).pointee, ascent: args [2]!.assumingMemoryBound (to: Double.self).pointee)
}

func _TextServerExtension_proxy_font_set_baseline_offset (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._fontSetBaselineOffset (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), baselineOffset: args [1]!.assumingMemoryBound (to: Double.self).pointee)
}

func _TextServerExtension_proxy_font_set_data (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._fontSetData (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), data: PackedByteArray (content: args [1]!.assumingMemoryBound (to: (Int64, Int64).self).pointee))
}

func _TextServerExtension_proxy_font_set_descent (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._fontSetDescent (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), size: args [1]!.assumingMemoryBound (to: Int.self).pointee, descent: args [2]!.assumingMemoryBound (to: Double.self).pointee)
}

func _TextServerExtension_proxy_font_set_disable_embedded_bitmaps (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._fontSetDisableEmbeddedBitmaps (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), disableEmbeddedBitmaps: args [1]!.assumingMemoryBound (to: Bool.self).pointee)
}

func _TextServerExtension_proxy_font_set_embolden (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._fontSetEmbolden (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), strength: args [1]!.assumingMemoryBound (to: Double.self).pointee)
}

func _TextServerExtension_proxy_font_set_face_index (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._fontSetFaceIndex (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), faceIndex: args [1]!.assumingMemoryBound (to: Int.self).pointee)
}

func _TextServerExtension_proxy_font_set_fixed_size (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._fontSetFixedSize (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), fixedSize: args [1]!.assumingMemoryBound (to: Int.self).pointee)
}

func _TextServerExtension_proxy_font_set_fixed_size_scale_mode (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._fontSetFixedSizeScaleMode (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), fixedSizeScaleMode: args [1]!.assumingMemoryBound (to: TextServer.FixedSizeScaleMode.self).pointee)
}

func _TextServerExtension_proxy_font_set_force_autohinter (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._fontSetForceAutohinter (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), forceAutohinter: args [1]!.assumingMemoryBound (to: Bool.self).pointee)
}

func _TextServerExtension_proxy_font_set_generate_mipmaps (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._fontSetGenerateMipmaps (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), generateMipmaps: args [1]!.assumingMemoryBound (to: Bool.self).pointee)
}

func _TextServerExtension_proxy_font_set_global_oversampling (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._fontSetGlobalOversampling (args [0]!.assumingMemoryBound (to: Double.self).pointee)
}

func _TextServerExtension_proxy_font_set_glyph_advance (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._fontSetGlyphAdvance (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), size: args [1]!.assumingMemoryBound (to: Int.self).pointee, glyph: args [2]!.assumingMemoryBound (to: Int.self).pointee, advance: args [3]!.assumingMemoryBound (to: Vector2.self).pointee)
}

func _TextServerExtension_proxy_font_set_glyph_offset (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._fontSetGlyphOffset (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), size: args [1]!.assumingMemoryBound (to: Vector2i.self).pointee, glyph: args [2]!.assumingMemoryBound (to: Int.self).pointee, offset: args [3]!.assumingMemoryBound (to: Vector2.self).pointee)
}

func _TextServerExtension_proxy_font_set_glyph_size (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._fontSetGlyphSize (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), size: args [1]!.assumingMemoryBound (to: Vector2i.self).pointee, glyph: args [2]!.assumingMemoryBound (to: Int.self).pointee, glSize: args [3]!.assumingMemoryBound (to: Vector2.self).pointee)
}

func _TextServerExtension_proxy_font_set_glyph_texture_idx (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._fontSetGlyphTextureIdx (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), size: args [1]!.assumingMemoryBound (to: Vector2i.self).pointee, glyph: args [2]!.assumingMemoryBound (to: Int.self).pointee, textureIdx: args [3]!.assumingMemoryBound (to: Int.self).pointee)
}

func _TextServerExtension_proxy_font_set_glyph_uv_rect (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._fontSetGlyphUvRect (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), size: args [1]!.assumingMemoryBound (to: Vector2i.self).pointee, glyph: args [2]!.assumingMemoryBound (to: Int.self).pointee, uvRect: args [3]!.assumingMemoryBound (to: Rect2.self).pointee)
}

func _TextServerExtension_proxy_font_set_hinting (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._fontSetHinting (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), hinting: args [1]!.assumingMemoryBound (to: TextServer.Hinting.self).pointee)
}

func _TextServerExtension_proxy_font_set_kerning (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._fontSetKerning (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), size: args [1]!.assumingMemoryBound (to: Int.self).pointee, glyphPair: args [2]!.assumingMemoryBound (to: Vector2i.self).pointee, kerning: args [3]!.assumingMemoryBound (to: Vector2.self).pointee)
}

func _TextServerExtension_proxy_font_set_language_support_override (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._fontSetLanguageSupportOverride (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), language: GString.stringFromGStringPtr (ptr: args [1]!) ?? "", supported: args [2]!.assumingMemoryBound (to: Bool.self).pointee)
}

func _TextServerExtension_proxy_font_set_msdf_pixel_range (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._fontSetMsdfPixelRange (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), msdfPixelRange: args [1]!.assumingMemoryBound (to: Int.self).pointee)
}

func _TextServerExtension_proxy_font_set_msdf_size (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._fontSetMsdfSize (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), msdfSize: args [1]!.assumingMemoryBound (to: Int.self).pointee)
}

func _TextServerExtension_proxy_font_set_multichannel_signed_distance_field (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._fontSetMultichannelSignedDistanceField (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), msdf: args [1]!.assumingMemoryBound (to: Bool.self).pointee)
}

func _TextServerExtension_proxy_font_set_name (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._fontSetName (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), name: GString.stringFromGStringPtr (ptr: args [1]!) ?? "")
}

func _TextServerExtension_proxy_font_set_opentype_feature_overrides (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._fontSetOpentypeFeatureOverrides (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), overrides: GDictionary (content: args [1]!.assumingMemoryBound (to: Int64.self).pointee))
}

func _TextServerExtension_proxy_font_set_oversampling (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._fontSetOversampling (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), oversampling: args [1]!.assumingMemoryBound (to: Double.self).pointee)
}

func _TextServerExtension_proxy_font_set_scale (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._fontSetScale (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), size: args [1]!.assumingMemoryBound (to: Int.self).pointee, scale: args [2]!.assumingMemoryBound (to: Double.self).pointee)
}

func _TextServerExtension_proxy_font_set_script_support_override (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._fontSetScriptSupportOverride (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), script: GString.stringFromGStringPtr (ptr: args [1]!) ?? "", supported: args [2]!.assumingMemoryBound (to: Bool.self).pointee)
}

func _TextServerExtension_proxy_font_set_spacing (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._fontSetSpacing (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), spacing: args [1]!.assumingMemoryBound (to: TextServer.SpacingType.self).pointee, value: args [2]!.assumingMemoryBound (to: Int.self).pointee)
}

func _TextServerExtension_proxy_font_set_stretch (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._fontSetStretch (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), stretch: args [1]!.assumingMemoryBound (to: Int.self).pointee)
}

func _TextServerExtension_proxy_font_set_style (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._fontSetStyle (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), style: args [1]!.assumingMemoryBound (to: TextServer.FontStyle.self).pointee)
}

func _TextServerExtension_proxy_font_set_style_name (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._fontSetStyleName (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), nameStyle: GString.stringFromGStringPtr (ptr: args [1]!) ?? "")
}

func _TextServerExtension_proxy_font_set_subpixel_positioning (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._fontSetSubpixelPositioning (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), subpixelPositioning: args [1]!.assumingMemoryBound (to: TextServer.SubpixelPositioning.self).pointee)
}

func _TextServerExtension_proxy_font_set_texture_image (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let resolved_3 = args [3]!.load (as: UnsafeRawPointer.self)
    
    swiftObject._fontSetTextureImage (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), size: args [1]!.assumingMemoryBound (to: Vector2i.self).pointee, textureIndex: args [2]!.assumingMemoryBound (to: Int.self).pointee, image: lookupLiveObject (handleAddress: resolved_3) as? Image ?? lookupObject (nativeHandle: resolved_3)!)
}

func _TextServerExtension_proxy_font_set_texture_offsets (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._fontSetTextureOffsets (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), size: args [1]!.assumingMemoryBound (to: Vector2i.self).pointee, textureIndex: args [2]!.assumingMemoryBound (to: Int.self).pointee, offset: PackedInt32Array (content: args [3]!.assumingMemoryBound (to: (Int64, Int64).self).pointee))
}

func _TextServerExtension_proxy_font_set_transform (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._fontSetTransform (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), transform: args [1]!.assumingMemoryBound (to: Transform2D.self).pointee)
}

func _TextServerExtension_proxy_font_set_underline_position (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._fontSetUnderlinePosition (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), size: args [1]!.assumingMemoryBound (to: Int.self).pointee, underlinePosition: args [2]!.assumingMemoryBound (to: Double.self).pointee)
}

func _TextServerExtension_proxy_font_set_underline_thickness (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._fontSetUnderlineThickness (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), size: args [1]!.assumingMemoryBound (to: Int.self).pointee, underlineThickness: args [2]!.assumingMemoryBound (to: Double.self).pointee)
}

func _TextServerExtension_proxy_font_set_variation_coordinates (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._fontSetVariationCoordinates (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), variationCoordinates: GDictionary (content: args [1]!.assumingMemoryBound (to: Int64.self).pointee))
}

func _TextServerExtension_proxy_font_set_weight (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._fontSetWeight (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), weight: args [1]!.assumingMemoryBound (to: Int.self).pointee)
}

func _TextServerExtension_proxy_font_supported_feature_list (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._fontSupportedFeatureList (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // Dictionary
    ret.content = GDictionary.zero
}

func _TextServerExtension_proxy_font_supported_variation_list (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._fontSupportedVariationList (fontRid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // Dictionary
    ret.content = GDictionary.zero
}

func _TextServerExtension_proxy_format_number (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = GString (swiftObject._formatNumber (GString.stringFromGStringPtr (ptr: args [0]!) ?? "", language: GString.stringFromGStringPtr (ptr: args [1]!) ?? ""))
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // String
    ret.content = GString.zero
}

func _TextServerExtension_proxy_free_rid (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._freeRid (RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
}

func _TextServerExtension_proxy_get_features (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._getFeatures ()
    retPtr!.storeBytes (of: ret, as: Int.self)
}

func _TextServerExtension_proxy_get_hex_code_box_size (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._getHexCodeBoxSize (args [0]!.assumingMemoryBound (to: Int.self).pointee, index: args [1]!.assumingMemoryBound (to: Int.self).pointee)
    retPtr!.storeBytes (of: ret, as: Vector2.self)
}

func _TextServerExtension_proxy_get_name (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = GString (swiftObject._getName ())
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // String
    ret.content = GString.zero
}

func _TextServerExtension_proxy_get_support_data_filename (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = GString (swiftObject._getSupportDataFilename ())
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // String
    ret.content = GString.zero
}

func _TextServerExtension_proxy_get_support_data_info (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = GString (swiftObject._getSupportDataInfo ())
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // String
    ret.content = GString.zero
}

func _TextServerExtension_proxy_has (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._has (rid: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _TextServerExtension_proxy_has_feature (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._hasFeature (args [0]!.assumingMemoryBound (to: TextServer.Feature.self).pointee)
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _TextServerExtension_proxy_is_confusable (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._isConfusable (string: GString.stringFromGStringPtr (ptr: args [0]!) ?? "", dict: PackedStringArray (content: args [1]!.assumingMemoryBound (to: (Int64, Int64).self).pointee))
    retPtr!.storeBytes (of: ret, as: Int.self)
}

func _TextServerExtension_proxy_is_locale_right_to_left (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._isLocaleRightToLeft (locale: GString.stringFromGStringPtr (ptr: args [0]!) ?? "")
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _TextServerExtension_proxy_is_valid_identifier (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._isValidIdentifier (string: GString.stringFromGStringPtr (ptr: args [0]!) ?? "")
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _TextServerExtension_proxy_is_valid_letter (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._isValidLetter (unicode: args [0]!.assumingMemoryBound (to: UInt.self).pointee)
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _TextServerExtension_proxy_load_support_data (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._loadSupportData (filename: GString.stringFromGStringPtr (ptr: args [0]!) ?? "")
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _TextServerExtension_proxy_name_to_tag (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._nameToTag (name: GString.stringFromGStringPtr (ptr: args [0]!) ?? "")
    retPtr!.storeBytes (of: ret, as: Int.self)
}

func _TextServerExtension_proxy_parse_number (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = GString (swiftObject._parseNumber (GString.stringFromGStringPtr (ptr: args [0]!) ?? "", language: GString.stringFromGStringPtr (ptr: args [1]!) ?? ""))
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // String
    ret.content = GString.zero
}

func _TextServerExtension_proxy_parse_structured_text (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._parseStructuredText (parserType: args [0]!.assumingMemoryBound (to: TextServer.StructuredTextParser.self).pointee, args: GArray (content: args [1]!.assumingMemoryBound (to: Int64.self).pointee), text: GString.stringFromGStringPtr (ptr: args [2]!) ?? "")
    retPtr!.storeBytes (of: ret.array.content, as: type (of: ret.array.content)) // typedarray::Vector3i
}

func _TextServerExtension_proxy_percent_sign (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = GString (swiftObject._percentSign (language: GString.stringFromGStringPtr (ptr: args [0]!) ?? ""))
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // String
    ret.content = GString.zero
}

func _TextServerExtension_proxy_save_support_data (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._saveSupportData (filename: GString.stringFromGStringPtr (ptr: args [0]!) ?? "")
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _TextServerExtension_proxy_shaped_get_span_count (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._shapedGetSpanCount (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Int.self)
}

func _TextServerExtension_proxy_shaped_get_span_meta (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._shapedGetSpanMeta (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), index: args [1]!.assumingMemoryBound (to: Int.self).pointee)
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // Variant
    ret.content = Variant.zero
}

func _TextServerExtension_proxy_shaped_set_span_update_font (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._shapedSetSpanUpdateFont (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), index: args [1]!.assumingMemoryBound (to: Int.self).pointee, fonts: args [2]!.assumingMemoryBound (to: VariantCollection<RID>.self).pointee, size: args [3]!.assumingMemoryBound (to: Int.self).pointee, opentypeFeatures: GDictionary (content: args [4]!.assumingMemoryBound (to: Int64.self).pointee))
}

func _TextServerExtension_proxy_shaped_text_add_object (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._shapedTextAddObject (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), key: args [1]!.assumingMemoryBound (to: Variant.self).pointee, size: args [2]!.assumingMemoryBound (to: Vector2.self).pointee, inlineAlign: args [3]!.assumingMemoryBound (to: InlineAlignment.self).pointee, length: args [4]!.assumingMemoryBound (to: Int.self).pointee, baseline: args [5]!.assumingMemoryBound (to: Double.self).pointee)
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _TextServerExtension_proxy_shaped_text_add_string (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._shapedTextAddString (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), text: GString.stringFromGStringPtr (ptr: args [1]!) ?? "", fonts: args [2]!.assumingMemoryBound (to: VariantCollection<RID>.self).pointee, size: args [3]!.assumingMemoryBound (to: Int.self).pointee, opentypeFeatures: GDictionary (content: args [4]!.assumingMemoryBound (to: Int64.self).pointee), language: GString.stringFromGStringPtr (ptr: args [5]!) ?? "", meta: args [6]!.assumingMemoryBound (to: Variant.self).pointee)
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _TextServerExtension_proxy_shaped_text_clear (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._shapedTextClear (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
}

func _TextServerExtension_proxy_shaped_text_closest_character_pos (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._shapedTextClosestCharacterPos (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), pos: args [1]!.assumingMemoryBound (to: Int.self).pointee)
    retPtr!.storeBytes (of: ret, as: Int.self)
}

func _TextServerExtension_proxy_shaped_text_draw (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._shapedTextDraw (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), canvas: RID (content: args [1]!.assumingMemoryBound (to: Int64.self).pointee), pos: args [2]!.assumingMemoryBound (to: Vector2.self).pointee, clipL: args [3]!.assumingMemoryBound (to: Double.self).pointee, clipR: args [4]!.assumingMemoryBound (to: Double.self).pointee, color: args [5]!.assumingMemoryBound (to: Color.self).pointee)
}

func _TextServerExtension_proxy_shaped_text_draw_outline (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._shapedTextDrawOutline (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), canvas: RID (content: args [1]!.assumingMemoryBound (to: Int64.self).pointee), pos: args [2]!.assumingMemoryBound (to: Vector2.self).pointee, clipL: args [3]!.assumingMemoryBound (to: Double.self).pointee, clipR: args [4]!.assumingMemoryBound (to: Double.self).pointee, outlineSize: args [5]!.assumingMemoryBound (to: Int.self).pointee, color: args [6]!.assumingMemoryBound (to: Color.self).pointee)
}

func _TextServerExtension_proxy_shaped_text_fit_to_width (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._shapedTextFitToWidth (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), width: args [1]!.assumingMemoryBound (to: Double.self).pointee, justificationFlags: args [2]!.assumingMemoryBound (to: TextServer.JustificationFlag.self).pointee)
    retPtr!.storeBytes (of: ret, as: Double.self)
}

func _TextServerExtension_proxy_shaped_text_get_ascent (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._shapedTextGetAscent (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Double.self)
}

func _TextServerExtension_proxy_shaped_text_get_character_breaks (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._shapedTextGetCharacterBreaks (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // PackedInt32Array
    ret.content = PackedInt32Array.zero
}

func _TextServerExtension_proxy_shaped_text_get_custom_ellipsis (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._shapedTextGetCustomEllipsis (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Int.self)
}

func _TextServerExtension_proxy_shaped_text_get_custom_punctuation (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = GString (swiftObject._shapedTextGetCustomPunctuation (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee)))
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // String
    ret.content = GString.zero
}

func _TextServerExtension_proxy_shaped_text_get_descent (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._shapedTextGetDescent (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Double.self)
}

func _TextServerExtension_proxy_shaped_text_get_direction (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._shapedTextGetDirection (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: Int32 (ret.rawValue), as: Int32.self)
}

func _TextServerExtension_proxy_shaped_text_get_dominant_direction_in_range (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._shapedTextGetDominantDirectionInRange (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), start: args [1]!.assumingMemoryBound (to: Int.self).pointee, end: args [2]!.assumingMemoryBound (to: Int.self).pointee)
    retPtr!.storeBytes (of: ret, as: Int.self)
}

func _TextServerExtension_proxy_shaped_text_get_ellipsis_glyph_count (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._shapedTextGetEllipsisGlyphCount (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Int.self)
}

func _TextServerExtension_proxy_shaped_text_get_ellipsis_glyphs (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._shapedTextGetEllipsisGlyphs (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: OpaquePointer?.self)
}

func _TextServerExtension_proxy_shaped_text_get_ellipsis_pos (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._shapedTextGetEllipsisPos (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Int.self)
}

func _TextServerExtension_proxy_shaped_text_get_glyph_count (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._shapedTextGetGlyphCount (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Int.self)
}

func _TextServerExtension_proxy_shaped_text_get_glyphs (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._shapedTextGetGlyphs (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: OpaquePointer?.self)
}

func _TextServerExtension_proxy_shaped_text_get_grapheme_bounds (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._shapedTextGetGraphemeBounds (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), pos: args [1]!.assumingMemoryBound (to: Int.self).pointee)
    retPtr!.storeBytes (of: ret, as: Vector2.self)
}

func _TextServerExtension_proxy_shaped_text_get_inferred_direction (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._shapedTextGetInferredDirection (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: Int32 (ret.rawValue), as: Int32.self)
}

func _TextServerExtension_proxy_shaped_text_get_line_breaks (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._shapedTextGetLineBreaks (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), width: args [1]!.assumingMemoryBound (to: Double.self).pointee, start: args [2]!.assumingMemoryBound (to: Int.self).pointee, breakFlags: args [3]!.assumingMemoryBound (to: TextServer.LineBreakFlag.self).pointee)
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // PackedInt32Array
    ret.content = PackedInt32Array.zero
}

func _TextServerExtension_proxy_shaped_text_get_line_breaks_adv (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._shapedTextGetLineBreaksAdv (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), width: PackedFloat32Array (content: args [1]!.assumingMemoryBound (to: (Int64, Int64).self).pointee), start: args [2]!.assumingMemoryBound (to: Int.self).pointee, once: args [3]!.assumingMemoryBound (to: Bool.self).pointee, breakFlags: args [4]!.assumingMemoryBound (to: TextServer.LineBreakFlag.self).pointee)
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // PackedInt32Array
    ret.content = PackedInt32Array.zero
}

func _TextServerExtension_proxy_shaped_text_get_object_glyph (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._shapedTextGetObjectGlyph (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), key: args [1]!.assumingMemoryBound (to: Variant.self).pointee)
    retPtr!.storeBytes (of: ret, as: Int.self)
}

func _TextServerExtension_proxy_shaped_text_get_object_range (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._shapedTextGetObjectRange (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), key: args [1]!.assumingMemoryBound (to: Variant.self).pointee)
    retPtr!.storeBytes (of: ret, as: Vector2i.self)
}

func _TextServerExtension_proxy_shaped_text_get_object_rect (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._shapedTextGetObjectRect (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), key: args [1]!.assumingMemoryBound (to: Variant.self).pointee)
    retPtr!.storeBytes (of: ret, as: Rect2.self)
}

func _TextServerExtension_proxy_shaped_text_get_objects (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._shapedTextGetObjects (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // Array
    ret.content = GArray.zero
}

func _TextServerExtension_proxy_shaped_text_get_orientation (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._shapedTextGetOrientation (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: Int32 (ret.rawValue), as: Int32.self)
}

func _TextServerExtension_proxy_shaped_text_get_parent (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._shapedTextGetParent (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // RID
    ret.content = RID.zero
}

func _TextServerExtension_proxy_shaped_text_get_preserve_control (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._shapedTextGetPreserveControl (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _TextServerExtension_proxy_shaped_text_get_preserve_invalid (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._shapedTextGetPreserveInvalid (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _TextServerExtension_proxy_shaped_text_get_range (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._shapedTextGetRange (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Vector2i.self)
}

func _TextServerExtension_proxy_shaped_text_get_selection (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._shapedTextGetSelection (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), start: args [1]!.assumingMemoryBound (to: Int.self).pointee, end: args [2]!.assumingMemoryBound (to: Int.self).pointee)
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // PackedVector2Array
    ret.content = PackedVector2Array.zero
}

func _TextServerExtension_proxy_shaped_text_get_size (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._shapedTextGetSize (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Vector2.self)
}

func _TextServerExtension_proxy_shaped_text_get_spacing (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._shapedTextGetSpacing (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), spacing: args [1]!.assumingMemoryBound (to: TextServer.SpacingType.self).pointee)
    retPtr!.storeBytes (of: ret, as: Int.self)
}

func _TextServerExtension_proxy_shaped_text_get_trim_pos (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._shapedTextGetTrimPos (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Int.self)
}

func _TextServerExtension_proxy_shaped_text_get_underline_position (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._shapedTextGetUnderlinePosition (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Double.self)
}

func _TextServerExtension_proxy_shaped_text_get_underline_thickness (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._shapedTextGetUnderlineThickness (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Double.self)
}

func _TextServerExtension_proxy_shaped_text_get_width (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._shapedTextGetWidth (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Double.self)
}

func _TextServerExtension_proxy_shaped_text_get_word_breaks (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._shapedTextGetWordBreaks (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), graphemeFlags: args [1]!.assumingMemoryBound (to: TextServer.GraphemeFlag.self).pointee, skipGraphemeFlags: args [2]!.assumingMemoryBound (to: TextServer.GraphemeFlag.self).pointee)
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // PackedInt32Array
    ret.content = PackedInt32Array.zero
}

func _TextServerExtension_proxy_shaped_text_hit_test_grapheme (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._shapedTextHitTestGrapheme (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), coord: args [1]!.assumingMemoryBound (to: Double.self).pointee)
    retPtr!.storeBytes (of: ret, as: Int.self)
}

func _TextServerExtension_proxy_shaped_text_hit_test_position (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._shapedTextHitTestPosition (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), coord: args [1]!.assumingMemoryBound (to: Double.self).pointee)
    retPtr!.storeBytes (of: ret, as: Int.self)
}

func _TextServerExtension_proxy_shaped_text_is_ready (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._shapedTextIsReady (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _TextServerExtension_proxy_shaped_text_next_character_pos (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._shapedTextNextCharacterPos (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), pos: args [1]!.assumingMemoryBound (to: Int.self).pointee)
    retPtr!.storeBytes (of: ret, as: Int.self)
}

func _TextServerExtension_proxy_shaped_text_next_grapheme_pos (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._shapedTextNextGraphemePos (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), pos: args [1]!.assumingMemoryBound (to: Int.self).pointee)
    retPtr!.storeBytes (of: ret, as: Int.self)
}

func _TextServerExtension_proxy_shaped_text_overrun_trim_to_width (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._shapedTextOverrunTrimToWidth (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), width: args [1]!.assumingMemoryBound (to: Double.self).pointee, trimFlags: args [2]!.assumingMemoryBound (to: TextServer.TextOverrunFlag.self).pointee)
}

func _TextServerExtension_proxy_shaped_text_prev_character_pos (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._shapedTextPrevCharacterPos (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), pos: args [1]!.assumingMemoryBound (to: Int.self).pointee)
    retPtr!.storeBytes (of: ret, as: Int.self)
}

func _TextServerExtension_proxy_shaped_text_prev_grapheme_pos (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._shapedTextPrevGraphemePos (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), pos: args [1]!.assumingMemoryBound (to: Int.self).pointee)
    retPtr!.storeBytes (of: ret, as: Int.self)
}

func _TextServerExtension_proxy_shaped_text_resize_object (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._shapedTextResizeObject (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), key: args [1]!.assumingMemoryBound (to: Variant.self).pointee, size: args [2]!.assumingMemoryBound (to: Vector2.self).pointee, inlineAlign: args [3]!.assumingMemoryBound (to: InlineAlignment.self).pointee, baseline: args [4]!.assumingMemoryBound (to: Double.self).pointee)
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _TextServerExtension_proxy_shaped_text_set_bidi_override (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._shapedTextSetBidiOverride (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), override: GArray (content: args [1]!.assumingMemoryBound (to: Int64.self).pointee))
}

func _TextServerExtension_proxy_shaped_text_set_custom_ellipsis (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._shapedTextSetCustomEllipsis (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), char: args [1]!.assumingMemoryBound (to: Int.self).pointee)
}

func _TextServerExtension_proxy_shaped_text_set_custom_punctuation (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._shapedTextSetCustomPunctuation (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), punct: GString.stringFromGStringPtr (ptr: args [1]!) ?? "")
}

func _TextServerExtension_proxy_shaped_text_set_direction (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._shapedTextSetDirection (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), direction: args [1]!.assumingMemoryBound (to: TextServer.Direction.self).pointee)
}

func _TextServerExtension_proxy_shaped_text_set_orientation (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._shapedTextSetOrientation (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), orientation: args [1]!.assumingMemoryBound (to: TextServer.Orientation.self).pointee)
}

func _TextServerExtension_proxy_shaped_text_set_preserve_control (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._shapedTextSetPreserveControl (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), enabled: args [1]!.assumingMemoryBound (to: Bool.self).pointee)
}

func _TextServerExtension_proxy_shaped_text_set_preserve_invalid (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._shapedTextSetPreserveInvalid (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), enabled: args [1]!.assumingMemoryBound (to: Bool.self).pointee)
}

func _TextServerExtension_proxy_shaped_text_set_spacing (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._shapedTextSetSpacing (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), spacing: args [1]!.assumingMemoryBound (to: TextServer.SpacingType.self).pointee, value: args [2]!.assumingMemoryBound (to: Int.self).pointee)
}

func _TextServerExtension_proxy_shaped_text_shape (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._shapedTextShape (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _TextServerExtension_proxy_shaped_text_sort_logical (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._shapedTextSortLogical (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: OpaquePointer?.self)
}

func _TextServerExtension_proxy_shaped_text_substr (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._shapedTextSubstr (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), start: args [1]!.assumingMemoryBound (to: Int.self).pointee, length: args [2]!.assumingMemoryBound (to: Int.self).pointee)
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // RID
    ret.content = RID.zero
}

func _TextServerExtension_proxy_shaped_text_tab_align (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._shapedTextTabAlign (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), tabStops: PackedFloat32Array (content: args [1]!.assumingMemoryBound (to: (Int64, Int64).self).pointee))
    retPtr!.storeBytes (of: ret, as: Double.self)
}

func _TextServerExtension_proxy_shaped_text_update_breaks (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._shapedTextUpdateBreaks (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _TextServerExtension_proxy_shaped_text_update_justification_ops (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._shapedTextUpdateJustificationOps (shaped: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _TextServerExtension_proxy_spoof_check (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._spoofCheck (string: GString.stringFromGStringPtr (ptr: args [0]!) ?? "")
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _TextServerExtension_proxy_string_get_character_breaks (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._stringGetCharacterBreaks (string: GString.stringFromGStringPtr (ptr: args [0]!) ?? "", language: GString.stringFromGStringPtr (ptr: args [1]!) ?? "")
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // PackedInt32Array
    ret.content = PackedInt32Array.zero
}

func _TextServerExtension_proxy_string_get_word_breaks (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._stringGetWordBreaks (string: GString.stringFromGStringPtr (ptr: args [0]!) ?? "", language: GString.stringFromGStringPtr (ptr: args [1]!) ?? "", charsPerLine: args [2]!.assumingMemoryBound (to: Int.self).pointee)
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // PackedInt32Array
    ret.content = PackedInt32Array.zero
}

func _TextServerExtension_proxy_string_to_lower (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = GString (swiftObject._stringToLower (string: GString.stringFromGStringPtr (ptr: args [0]!) ?? "", language: GString.stringFromGStringPtr (ptr: args [1]!) ?? ""))
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // String
    ret.content = GString.zero
}

func _TextServerExtension_proxy_string_to_title (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = GString (swiftObject._stringToTitle (string: GString.stringFromGStringPtr (ptr: args [0]!) ?? "", language: GString.stringFromGStringPtr (ptr: args [1]!) ?? ""))
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // String
    ret.content = GString.zero
}

func _TextServerExtension_proxy_string_to_upper (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = GString (swiftObject._stringToUpper (string: GString.stringFromGStringPtr (ptr: args [0]!) ?? "", language: GString.stringFromGStringPtr (ptr: args [1]!) ?? ""))
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // String
    ret.content = GString.zero
}

func _TextServerExtension_proxy_strip_diacritics (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = GString (swiftObject._stripDiacritics (string: GString.stringFromGStringPtr (ptr: args [0]!) ?? ""))
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // String
    ret.content = GString.zero
}

func _TextServerExtension_proxy_tag_to_name (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<TextServerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = GString (swiftObject._tagToName (tag: args [0]!.assumingMemoryBound (to: Int.self).pointee))
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // String
    ret.content = GString.zero
}


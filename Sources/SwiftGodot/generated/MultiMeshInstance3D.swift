// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Node that instances a ``MultiMesh``.
/// 
/// ``MultiMeshInstance3D`` is a specialized node to instance ``GeometryInstance3D``s based on a ``MultiMesh`` resource.
/// 
/// This is useful to optimize the rendering of a high number of instances of a given mesh (for example trees in a forest or grass strands).
/// 
open class MultiMeshInstance3D: GeometryInstance3D {
    override open class var godotClassName: StringName { "MultiMeshInstance3D" }
    
    /* Properties */
    
    /// The ``MultiMesh`` resource that will be used and shared among all instances of the ``MultiMeshInstance3D``.
    final public var multimesh: MultiMesh? {
        get {
            return get_multimesh ()
        }
        
        set {
            set_multimesh (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_multimesh: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_multimesh")
        return withUnsafePointer(to: &MultiMeshInstance3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2246127404)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_multimesh(_ multimesh: MultiMesh?) {
        withUnsafePointer(to: multimesh?.handle) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(MultiMeshInstance3D.method_set_multimesh, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_multimesh: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_multimesh")
        return withUnsafePointer(to: &MultiMeshInstance3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1385450523)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_multimesh() -> MultiMesh? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall(MultiMeshInstance3D.method_get_multimesh, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
}


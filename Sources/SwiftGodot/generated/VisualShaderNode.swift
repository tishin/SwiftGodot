// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Base class for ``VisualShader`` nodes. Not related to scene nodes.
/// 
/// Visual shader graphs consist of various nodes. Each node in the graph is a separate object and they are represented as a rectangular boxes with title and a set of properties. Each node also has connection ports that allow to connect it to another nodes and control the flow of the shader.
open class VisualShaderNode: Resource {
    override open class var godotClassName: StringName { "VisualShaderNode" }
    public enum PortType: Int64, CaseIterable, CustomDebugStringConvertible {
        /// Floating-point scalar. Translated to [code skip-lint]float` type in shader code.
        case scalar = 0 // PORT_TYPE_SCALAR
        /// Integer scalar. Translated to [code skip-lint]int` type in shader code.
        case scalarInt = 1 // PORT_TYPE_SCALAR_INT
        /// Unsigned integer scalar. Translated to [code skip-lint]uint` type in shader code.
        case scalarUint = 2 // PORT_TYPE_SCALAR_UINT
        /// 2D vector of floating-point values. Translated to [code skip-lint]vec2` type in shader code.
        case vector2d = 3 // PORT_TYPE_VECTOR_2D
        /// 3D vector of floating-point values. Translated to [code skip-lint]vec3` type in shader code.
        case vector3d = 4 // PORT_TYPE_VECTOR_3D
        /// 4D vector of floating-point values. Translated to [code skip-lint]vec4` type in shader code.
        case vector4d = 5 // PORT_TYPE_VECTOR_4D
        /// Boolean type. Translated to [code skip-lint]bool` type in shader code.
        case boolean = 6 // PORT_TYPE_BOOLEAN
        /// Transform type. Translated to [code skip-lint]mat4` type in shader code.
        case transform = 7 // PORT_TYPE_TRANSFORM
        /// Sampler type. Translated to reference of sampler uniform in shader code. Can only be used for input ports in non-uniform nodes.
        case sampler = 8 // PORT_TYPE_SAMPLER
        /// Represents the size of the ``VisualShaderNode/PortType`` enum.
        case max = 9 // PORT_TYPE_MAX
        /// A textual representation of this instance, suitable for debugging
        public var debugDescription: String {
            switch self {
                case .scalar: return ".scalar"
                case .scalarInt: return ".scalarInt"
                case .scalarUint: return ".scalarUint"
                case .vector2d: return ".vector2d"
                case .vector3d: return ".vector3d"
                case .vector4d: return ".vector4d"
                case .boolean: return ".boolean"
                case .transform: return ".transform"
                case .sampler: return ".sampler"
                case .max: return ".max"
            }
            
        }
        
    }
    
    
    /* Properties */
    
    /// Sets the output port index which will be showed for preview. If set to `-1` no port will be open for preview.
    final public var outputPortForPreview: Int32 {
        get {
            return get_output_port_for_preview ()
        }
        
        set {
            set_output_port_for_preview (newValue)
        }
        
    }
    
    final public var defaultInputValues: GArray {
        get {
            return get_default_input_values ()
        }
        
        set {
            set_default_input_values (newValue)
        }
        
    }
    
    /// Represents the index of the frame this node is linked to. If set to `-1` the node is not linked to any frame.
    final public var linkedParentGraphFrame: Int32 {
        get {
            return get_frame ()
        }
        
        set {
            set_frame (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_get_default_input_port: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_default_input_port")
        return withUnsafePointer(to: &VisualShaderNode.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1894493699)!
            }
            
        }
        
    }()
    
    /// Returns the input port which should be connected by default when this node is created as a result of dragging a connection from an existing node to the empty space on the graph.
    public final func getDefaultInputPort(type: VisualShaderNode.PortType) -> Int32 {
        var _result: Int32 = 0
        withUnsafePointer(to: type.rawValue) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(VisualShaderNode.method_get_default_input_port, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_set_output_port_for_preview: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_output_port_for_preview")
        return withUnsafePointer(to: &VisualShaderNode.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_output_port_for_preview(_ port: Int32) {
        withUnsafePointer(to: port) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(VisualShaderNode.method_set_output_port_for_preview, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_output_port_for_preview: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_output_port_for_preview")
        return withUnsafePointer(to: &VisualShaderNode.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_output_port_for_preview() -> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall(VisualShaderNode.method_get_output_port_for_preview, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_input_port_default_value: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_input_port_default_value")
        return withUnsafePointer(to: &VisualShaderNode.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 150923387)!
            }
            
        }
        
    }()
    
    /// Sets the default `value` for the selected input `port`.
    public final func setInputPortDefaultValue(port: Int32, value: Variant, prevValue: Variant) {
        withUnsafePointer(to: port) { pArg0 in
            withUnsafePointer(to: value.content) { pArg1 in
                withUnsafePointer(to: prevValue.content) { pArg2 in
                    withUnsafePointer(to: UnsafeRawPointersN3(pArg0, pArg1, pArg2)) { pArgs in
                        pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 3) { pArgs in
                            gi.object_method_bind_ptrcall(VisualShaderNode.method_set_input_port_default_value, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_input_port_default_value: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_input_port_default_value")
        return withUnsafePointer(to: &VisualShaderNode.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 4227898402)!
            }
            
        }
        
    }()
    
    /// Returns the default value of the input `port`.
    public final func getInputPortDefaultValue(port: Int32) -> Variant {
        let _result: Variant = Variant ()
        withUnsafePointer(to: port) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(VisualShaderNode.method_get_input_port_default_value, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result.content)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_remove_input_port_default_value: GDExtensionMethodBindPtr = {
        let methodName = StringName("remove_input_port_default_value")
        return withUnsafePointer(to: &VisualShaderNode.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    /// Removes the default value of the input `port`.
    public final func removeInputPortDefaultValue(port: Int32) {
        withUnsafePointer(to: port) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(VisualShaderNode.method_remove_input_port_default_value, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_clear_default_input_values: GDExtensionMethodBindPtr = {
        let methodName = StringName("clear_default_input_values")
        return withUnsafePointer(to: &VisualShaderNode.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Clears the default input ports value.
    public final func clearDefaultInputValues() {
        gi.object_method_bind_ptrcall(VisualShaderNode.method_clear_default_input_values, UnsafeMutableRawPointer(mutating: handle), nil, nil)
        
    }
    
    fileprivate static var method_set_default_input_values: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_default_input_values")
        return withUnsafePointer(to: &VisualShaderNode.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 381264803)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Sets the default input ports values using an ``GArray`` of the form `[index0, value0, index1, value1, ...]`. For example: `[0, Vector3(0, 0, 0), 1, Vector3(0, 0, 0)]`.
    fileprivate final func set_default_input_values(_ values: GArray) {
        withUnsafePointer(to: values.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(VisualShaderNode.method_set_default_input_values, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_default_input_values: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_default_input_values")
        return withUnsafePointer(to: &VisualShaderNode.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3995934104)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Returns an ``GArray`` containing default values for all of the input ports of the node in the form `[index0, value0, index1, value1, ...]`.
    fileprivate final func get_default_input_values() -> GArray {
        let _result: GArray = GArray ()
        gi.object_method_bind_ptrcall(VisualShaderNode.method_get_default_input_values, UnsafeMutableRawPointer(mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_set_frame: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_frame")
        return withUnsafePointer(to: &VisualShaderNode.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_frame(_ frame: Int32) {
        withUnsafePointer(to: frame) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(VisualShaderNode.method_set_frame, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_frame: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_frame")
        return withUnsafePointer(to: &VisualShaderNode.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_frame() -> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall(VisualShaderNode.method_get_frame, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
}


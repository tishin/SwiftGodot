// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A container that arranges its child controls horizontally or vertically.
/// 
/// A container that arranges its child controls horizontally or vertically, rearranging them automatically when their minimum size changes.
open class BoxContainer: Container {
    override open class var godotClassName: StringName { "BoxContainer" }
    public enum AlignmentMode: Int64, CaseIterable, CustomDebugStringConvertible {
        /// The child controls will be arranged at the beginning of the container, i.e. top if orientation is vertical, left if orientation is horizontal (right for RTL layout).
        case begin = 0 // ALIGNMENT_BEGIN
        /// The child controls will be centered in the container.
        case center = 1 // ALIGNMENT_CENTER
        /// The child controls will be arranged at the end of the container, i.e. bottom if orientation is vertical, right if orientation is horizontal (left for RTL layout).
        case end = 2 // ALIGNMENT_END
        /// A textual representation of this instance, suitable for debugging
        public var debugDescription: String {
            switch self {
                case .begin: return ".begin"
                case .center: return ".center"
                case .end: return ".end"
            }
            
        }
        
    }
    
    
    /* Properties */
    
    /// The alignment of the container's children (must be one of .alignmentBegin, .alignmentCenter, or .alignmentEnd).
    final public var alignment: BoxContainer.AlignmentMode {
        get {
            return get_alignment ()
        }
        
        set {
            set_alignment (newValue)
        }
        
    }
    
    /// If `true`, the ``BoxContainer`` will arrange its children vertically, rather than horizontally.
    /// 
    /// Can't be changed when using ``HBoxContainer`` and ``VBoxContainer``.
    /// 
    final public var vertical: Bool {
        get {
            return is_vertical ()
        }
        
        set {
            set_vertical (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_add_spacer: GDExtensionMethodBindPtr = {
        let methodName = StringName("add_spacer")
        return withUnsafePointer(to: &BoxContainer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1326660695)!
            }
            
        }
        
    }()
    
    /// Adds a ``Control`` node to the box as a spacer. If `begin` is `true`, it will insert the ``Control`` node in front of all other children.
    public final func addSpacer(begin: Bool) -> Control? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        withUnsafePointer(to: begin) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(BoxContainer.method_add_spacer, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                }
                
            }
            
        }
        
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_alignment: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_alignment")
        return withUnsafePointer(to: &BoxContainer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2456745134)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_alignment(_ alignment: BoxContainer.AlignmentMode) {
        withUnsafePointer(to: alignment.rawValue) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(BoxContainer.method_set_alignment, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_alignment: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_alignment")
        return withUnsafePointer(to: &BoxContainer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1915476527)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_alignment() -> BoxContainer.AlignmentMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall(BoxContainer.method_get_alignment, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return BoxContainer.AlignmentMode (rawValue: _result)!
    }
    
    fileprivate static var method_set_vertical: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_vertical")
        return withUnsafePointer(to: &BoxContainer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_vertical(_ vertical: Bool) {
        withUnsafePointer(to: vertical) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(BoxContainer.method_set_vertical, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_is_vertical: GDExtensionMethodBindPtr = {
        let methodName = StringName("is_vertical")
        return withUnsafePointer(to: &BoxContainer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_vertical() -> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall(BoxContainer.method_is_vertical, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
}


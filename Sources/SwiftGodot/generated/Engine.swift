// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Provides access to engine properties.
/// 
/// The ``Engine`` singleton allows you to query and modify the project's run-time parameters, such as frames per second, time scale, and others. It also stores information about the current build of Godot, such as the current version.
open class Engine: Object {
    /// The shared instance of this class
    public static var shared: Engine = {
        return withUnsafePointer (to: &Engine.godotClassName.content) { ptr in
            Engine (nativeHandle: gi.global_get_singleton (ptr)!)
        }
        
    }()
    
    override open class var godotClassName: StringName { "Engine" }
    
    /* Properties */
    
    /// If `false`, stops printing error and warning messages to the console and editor Output log. This can be used to hide error and warning messages during unit test suite runs. This property is equivalent to the ``ProjectSettings/application/run/disableStderr`` project setting.
    /// 
    /// > Note: This property does not impact the editor's Errors tab when running a project from the editor.
    /// 
    /// > Warning: If set to `false` anywhere in the project, important error messages may be hidden even if they are emitted from other scripts. In a `@tool` script, this will also impact the editor itself. Do _not_ report bugs before ensuring error messages are enabled (as they are by default).
    /// 
    static public var printErrorMessages: Bool {
        get {
            return is_printing_error_messages ()
        }
        
        set {
            set_print_error_messages (newValue)
        }
        
    }
    
    /// The number of fixed iterations per second. This controls how often physics simulation and ``Node/_physicsProcess(delta:)`` methods are run. This value should generally always be set to `60` or above, as Godot doesn't interpolate the physics step. As a result, values lower than `60` will look stuttery. This value can be increased to make input more reactive or work around collision tunneling issues, but keep in mind doing so will increase CPU usage. See also ``maxFps`` and ``ProjectSettings/physics/common/physicsTicksPerSecond``.
    /// 
    /// > Note: Only ``maxPhysicsStepsPerFrame`` physics ticks may be simulated per rendered frame at most. If more physics ticks have to be simulated per rendered frame to keep up with rendering, the project will appear to slow down (even if `delta` is used consistently in physics calculations). Therefore, it is recommended to also increase ``maxPhysicsStepsPerFrame`` if increasing ``physicsTicksPerSecond`` significantly above its default value.
    /// 
    static public var physicsTicksPerSecond: Int32 {
        get {
            return get_physics_ticks_per_second ()
        }
        
        set {
            set_physics_ticks_per_second (newValue)
        }
        
    }
    
    /// The maximum number of physics steps that can be simulated each rendered frame.
    /// 
    /// > Note: The default value is tuned to prevent expensive physics simulations from triggering even more expensive simulations indefinitely. However, the game will appear to slow down if the rendering FPS is less than `1 / max_physics_steps_per_frame` of ``physicsTicksPerSecond``. This occurs even if `delta` is consistently used in physics calculations. To avoid this, increase ``maxPhysicsStepsPerFrame`` if you have increased ``physicsTicksPerSecond`` significantly above its default value.
    /// 
    static public var maxPhysicsStepsPerFrame: Int32 {
        get {
            return get_max_physics_steps_per_frame ()
        }
        
        set {
            set_max_physics_steps_per_frame (newValue)
        }
        
    }
    
    /// The maximum number of frames that can be rendered every second (FPS). A value of `0` means the framerate is uncapped.
    /// 
    /// Limiting the FPS can be useful to reduce the host machine's power consumption, which reduces heat, noise emissions, and improves battery life.
    /// 
    /// If ``ProjectSettings/display/window/vsync/vsyncMode`` is **Enabled** or **Adaptive**, the setting takes precedence and the max FPS number cannot exceed the monitor's refresh rate.
    /// 
    /// If ``ProjectSettings/display/window/vsync/vsyncMode`` is **Enabled**, on monitors with variable refresh rate enabled (G-Sync/FreeSync), using an FPS limit a few frames lower than the monitor's refresh rate will <a href="https://blurbusters.com/howto-low-lag-vsync-on/">reduce input lag while avoiding tearing</a>.
    /// 
    /// See also ``physicsTicksPerSecond`` and ``ProjectSettings/application/run/maxFps``.
    /// 
    /// > Note: The actual number of frames per second may still be below this value if the CPU or GPU cannot keep up with the project's logic and rendering.
    /// 
    /// > Note: If ``ProjectSettings/display/window/vsync/vsyncMode`` is **Disabled**, limiting the FPS to a high value that can be consistently reached on the system can reduce input lag compared to an uncapped framerate. Since this works by ensuring the GPU load is lower than 100%, this latency reduction is only effective in GPU-bottlenecked scenarios, not CPU-bottlenecked scenarios.
    /// 
    static public var maxFps: Int32 {
        get {
            return get_max_fps ()
        }
        
        set {
            set_max_fps (newValue)
        }
        
    }
    
    /// The speed multiplier at which the in-game clock updates, compared to real time. For example, if set to `2.0` the game runs twice as fast, and if set to `0.5` the game runs half as fast.
    /// 
    /// This value affects ``Timer``, ``SceneTreeTimer``, and all other simulations that make use of `delta` time (such as ``Node/_process(delta:)`` and ``Node/_physicsProcess(delta:)``).
    /// 
    /// > Note: It's recommended to keep this property above `0.0`, as the game may behave unexpectedly otherwise.
    /// 
    /// > Note: This does not affect audio playback speed. Use ``AudioServer/playbackSpeedScale`` to adjust audio playback speed independently of ``Engine/timeScale``.
    /// 
    /// > Note: This does not automatically adjust ``physicsTicksPerSecond``. With values above `1.0` physics simulation may become less precise, as each physics tick will stretch over a larger period of engine time. If you're modifying ``Engine/timeScale`` to speed up simulation by a large factor, consider also increasing ``physicsTicksPerSecond`` to make the simulation more reliable.
    /// 
    static public var timeScale: Double {
        get {
            return get_time_scale ()
        }
        
        set {
            set_time_scale (newValue)
        }
        
    }
    
    /// How much physics ticks are synchronized with real time. If `0` or less, the ticks are fully synchronized. Higher values cause the in-game clock to deviate more from the real clock, but they smooth out framerate jitters.
    /// 
    /// > Note: The default value of `0.5` should be good enough for most cases; values above `2` could cause the game to react to dropped frames with a noticeable delay and are not recommended.
    /// 
    /// > Note: When using a custom physics interpolation solution, or within a network game, it's recommended to disable the physics jitter fix by setting this property to `0`.
    /// 
    static public var physicsJitterFix: Double {
        get {
            return get_physics_jitter_fix ()
        }
        
        set {
            set_physics_jitter_fix (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_physics_ticks_per_second: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_physics_ticks_per_second")
        return withUnsafePointer(to: &Engine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate static func set_physics_ticks_per_second(_ physicsTicksPerSecond: Int32) {
        withUnsafePointer(to: physicsTicksPerSecond) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_set_physics_ticks_per_second, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_physics_ticks_per_second: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_physics_ticks_per_second")
        return withUnsafePointer(to: &Engine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate static func get_physics_ticks_per_second() -> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall(method_get_physics_ticks_per_second, UnsafeMutableRawPointer(mutating: shared.handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_max_physics_steps_per_frame: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_max_physics_steps_per_frame")
        return withUnsafePointer(to: &Engine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate static func set_max_physics_steps_per_frame(_ maxPhysicsSteps: Int32) {
        withUnsafePointer(to: maxPhysicsSteps) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_set_max_physics_steps_per_frame, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_max_physics_steps_per_frame: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_max_physics_steps_per_frame")
        return withUnsafePointer(to: &Engine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate static func get_max_physics_steps_per_frame() -> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall(method_get_max_physics_steps_per_frame, UnsafeMutableRawPointer(mutating: shared.handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_physics_jitter_fix: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_physics_jitter_fix")
        return withUnsafePointer(to: &Engine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate static func set_physics_jitter_fix(_ physicsJitterFix: Double) {
        withUnsafePointer(to: physicsJitterFix) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_set_physics_jitter_fix, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_physics_jitter_fix: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_physics_jitter_fix")
        return withUnsafePointer(to: &Engine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate static func get_physics_jitter_fix() -> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall(method_get_physics_jitter_fix, UnsafeMutableRawPointer(mutating: shared.handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_physics_interpolation_fraction: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_physics_interpolation_fraction")
        return withUnsafePointer(to: &Engine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    /// Returns the fraction through the current physics tick we are at the time of rendering the frame. This can be used to implement fixed timestep interpolation.
    public static func getPhysicsInterpolationFraction() -> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall(method_get_physics_interpolation_fraction, UnsafeMutableRawPointer(mutating: shared.handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_max_fps: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_max_fps")
        return withUnsafePointer(to: &Engine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate static func set_max_fps(_ maxFps: Int32) {
        withUnsafePointer(to: maxFps) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_set_max_fps, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_max_fps: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_max_fps")
        return withUnsafePointer(to: &Engine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate static func get_max_fps() -> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall(method_get_max_fps, UnsafeMutableRawPointer(mutating: shared.handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_time_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_time_scale")
        return withUnsafePointer(to: &Engine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate static func set_time_scale(_ timeScale: Double) {
        withUnsafePointer(to: timeScale) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_set_time_scale, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_time_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_time_scale")
        return withUnsafePointer(to: &Engine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 191475506)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate static func get_time_scale() -> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall(method_get_time_scale, UnsafeMutableRawPointer(mutating: shared.handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_frames_drawn: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_frames_drawn")
        return withUnsafePointer(to: &Engine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2455072627)!
            }
            
        }
        
    }()
    
    /// Returns the total number of frames drawn since the engine started.
    /// 
    /// > Note: On headless platforms, or if rendering is disabled with `--disable-render-loop` via command line, this method always returns `0`. See also ``getProcessFrames()``.
    /// 
    public static func getFramesDrawn() -> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall(method_get_frames_drawn, UnsafeMutableRawPointer(mutating: shared.handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_frames_per_second: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_frames_per_second")
        return withUnsafePointer(to: &Engine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    /// Returns the average frames rendered every second (FPS), also known as the framerate.
    public static func getFramesPerSecond() -> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall(method_get_frames_per_second, UnsafeMutableRawPointer(mutating: shared.handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_physics_frames: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_physics_frames")
        return withUnsafePointer(to: &Engine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    /// Returns the total number of frames passed since the engine started. This number is increased every **physics frame**. See also ``getProcessFrames()``.
    /// 
    /// This method can be used to run expensive logic less often without relying on a ``Timer``:
    /// 
    public static func getPhysicsFrames() -> UInt {
        var _result: UInt = 0
        gi.object_method_bind_ptrcall(method_get_physics_frames, UnsafeMutableRawPointer(mutating: shared.handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_process_frames: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_process_frames")
        return withUnsafePointer(to: &Engine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    /// Returns the total number of frames passed since the engine started. This number is increased every **process frame**, regardless of whether the render loop is enabled. See also ``getFramesDrawn()`` and ``getPhysicsFrames()``.
    /// 
    /// This method can be used to run expensive logic less often without relying on a ``Timer``:
    /// 
    public static func getProcessFrames() -> UInt {
        var _result: UInt = 0
        gi.object_method_bind_ptrcall(method_get_process_frames, UnsafeMutableRawPointer(mutating: shared.handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_main_loop: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_main_loop")
        return withUnsafePointer(to: &Engine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1016888095)!
            }
            
        }
        
    }()
    
    /// Returns the instance of the ``MainLoop``. This is usually the main ``SceneTree`` and is the same as ``Node/getTree()``.
    /// 
    /// > Note: The type instantiated as the main loop can changed with ``ProjectSettings/application/run/mainLoopType``.
    /// 
    public static func getMainLoop() -> MainLoop? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall(method_get_main_loop, UnsafeMutableRawPointer(mutating: shared.handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_get_version_info: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_version_info")
        return withUnsafePointer(to: &Engine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3102165223)!
            }
            
        }
        
    }()
    
    /// Returns the current engine version information as a ``GDictionary`` containing the following entries:
    /// 
    /// - `major` - Major version number as an int;
    /// 
    /// - `minor` - Minor version number as an int;
    /// 
    /// - `patch` - Patch version number as an int;
    /// 
    /// - `hex` - Full version encoded as a hexadecimal int with one byte (2 hex digits) per number (see example below);
    /// 
    /// - `status` - Status (such as "beta", "rc1", "rc2", "stable", etc.) as a String;
    /// 
    /// - `build` - Build name (e.g. "custom_build") as a String;
    /// 
    /// - `hash` - Full Git commit hash as a String;
    /// 
    /// - `timestamp` - Holds the Git commit date UNIX timestamp in seconds as an int, or `0` if unavailable;
    /// 
    /// - `string` - `major`, `minor`, `patch`, `status`, and `build` in a single String.
    /// 
    /// The `hex` value is encoded as follows, from left to right: one byte for the major, one byte for the minor, one byte for the patch version. For example, "3.1.12" would be `0x03010C`.
    /// 
    /// > Note: The `hex` value is still an integer internally, and printing it will give you its decimal representation, which is not particularly meaningful. Use hexadecimal literals for quick version comparisons from code:
    /// 
    public static func getVersionInfo() -> GDictionary {
        let _result: GDictionary = GDictionary ()
        gi.object_method_bind_ptrcall(method_get_version_info, UnsafeMutableRawPointer(mutating: shared.handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_get_author_info: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_author_info")
        return withUnsafePointer(to: &Engine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3102165223)!
            }
            
        }
        
    }()
    
    /// Returns the engine author information as a ``GDictionary``, where each entry is an ``GArray`` of strings with the names of notable contributors to the Godot Engine: `lead_developers`, `founders`, `project_managers`, and `developers`.
    public static func getAuthorInfo() -> GDictionary {
        let _result: GDictionary = GDictionary ()
        gi.object_method_bind_ptrcall(method_get_author_info, UnsafeMutableRawPointer(mutating: shared.handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_get_copyright_info: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_copyright_info")
        return withUnsafePointer(to: &Engine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3995934104)!
            }
            
        }
        
    }()
    
    /// Returns an ``GArray`` of dictionaries with copyright information for every component of Godot's source code.
    /// 
    /// Every ``GDictionary`` contains a `name` identifier, and a `parts` array of dictionaries. It describes the component in detail with the following entries:
    /// 
    /// - `files` - ``GArray`` of file paths from the source code affected by this component;
    /// 
    /// - `copyright` - ``GArray`` of owners of this component;
    /// 
    /// - `license` - The license applied to this component (such as "<a href="https://en.wikipedia.org/wiki/MIT_License#Ambiguity_and_variants">Expat</a>" or "<a href="https://creativecommons.org/licenses/by/4.0/">CC-BY-4.0</a>").
    /// 
    public static func getCopyrightInfo() -> VariantCollection<GDictionary> {
        var _result: Int64 = 0
        gi.object_method_bind_ptrcall(method_get_copyright_info, UnsafeMutableRawPointer(mutating: shared.handle), nil, &_result)
        return VariantCollection<GDictionary>(content: _result)
    }
    
    fileprivate static var method_get_donor_info: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_donor_info")
        return withUnsafePointer(to: &Engine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3102165223)!
            }
            
        }
        
    }()
    
    /// Returns a ``GDictionary`` of categorized donor names. Each entry is an ``GArray`` of strings:
    /// 
    /// {`platinum_sponsors`, `gold_sponsors`, `silver_sponsors`, `bronze_sponsors`, `mini_sponsors`, `gold_donors`, `silver_donors`, `bronze_donors`}
    /// 
    public static func getDonorInfo() -> GDictionary {
        let _result: GDictionary = GDictionary ()
        gi.object_method_bind_ptrcall(method_get_donor_info, UnsafeMutableRawPointer(mutating: shared.handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_get_license_info: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_license_info")
        return withUnsafePointer(to: &Engine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3102165223)!
            }
            
        }
        
    }()
    
    /// Returns a ``GDictionary`` of licenses used by Godot and included third party components. Each entry is a license name (such as "<a href="https://en.wikipedia.org/wiki/MIT_License#Ambiguity_and_variants">Expat</a>") and its associated text.
    public static func getLicenseInfo() -> GDictionary {
        let _result: GDictionary = GDictionary ()
        gi.object_method_bind_ptrcall(method_get_license_info, UnsafeMutableRawPointer(mutating: shared.handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_get_license_text: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_license_text")
        return withUnsafePointer(to: &Engine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    /// Returns the full Godot license text.
    public static func getLicenseText() -> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall(method_get_license_text, UnsafeMutableRawPointer(mutating: shared.handle), nil, &_result.content)
        return _result.description
    }
    
    fileprivate static var method_get_architecture_name: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_architecture_name")
        return withUnsafePointer(to: &Engine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    /// Returns the name of the CPU architecture the Godot binary was built for. Possible return values include `"x86_64"`, `"x86_32"`, `"arm64"`, `"arm32"`, `"rv64"`, `"riscv"`, `"ppc64"`, `"ppc"`, `"wasm64"`, and `"wasm32"`.
    /// 
    /// To detect whether the current build is 64-bit, you can use the fact that all 64-bit architecture names contain `64` in their name:
    /// 
    /// > Note: This method does _not_ return the name of the system's CPU architecture (like ``OS/getProcessorName()``). For example, when running an `x86_32` Godot binary on an `x86_64` system, the returned value will still be `"x86_32"`.
    /// 
    public static func getArchitectureName() -> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall(method_get_architecture_name, UnsafeMutableRawPointer(mutating: shared.handle), nil, &_result.content)
        return _result.description
    }
    
    fileprivate static var method_is_in_physics_frame: GDExtensionMethodBindPtr = {
        let methodName = StringName("is_in_physics_frame")
        return withUnsafePointer(to: &Engine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the engine is inside the fixed physics process step of the main loop.
    /// 
    public static func isInPhysicsFrame() -> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall(method_is_in_physics_frame, UnsafeMutableRawPointer(mutating: shared.handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_has_singleton: GDExtensionMethodBindPtr = {
        let methodName = StringName("has_singleton")
        return withUnsafePointer(to: &Engine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2619796661)!
            }
            
        }
        
    }()
    
    /// Returns `true` if a singleton with the given `name` exists in the global scope. See also ``getSingleton(name:)``.
    /// 
    /// > Note: Global singletons are not the same as autoloaded nodes, which are configurable in the project settings.
    /// 
    public static func hasSingleton(name: StringName) -> Bool {
        var _result: Bool = false
        withUnsafePointer(to: name.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_has_singleton, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_get_singleton: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_singleton")
        return withUnsafePointer(to: &Engine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1371597918)!
            }
            
        }
        
    }()
    
    /// Returns the global singleton with the given `name`, or `null` if it does not exist. Often used for plugins. See also ``hasSingleton(name:)`` and ``getSingletonList()``.
    /// 
    /// > Note: Global singletons are not the same as autoloaded nodes, which are configurable in the project settings.
    /// 
    public static func getSingleton(name: StringName) -> Object? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        withUnsafePointer(to: name.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_get_singleton, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_register_singleton: GDExtensionMethodBindPtr = {
        let methodName = StringName("register_singleton")
        return withUnsafePointer(to: &Engine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 965313290)!
            }
            
        }
        
    }()
    
    /// Registers the given ``Object`` `instance` as a singleton, available globally under `name`. Useful for plugins.
    public static func registerSingleton(name: StringName, instance: Object?) {
        withUnsafePointer(to: name.content) { pArg0 in
            withUnsafePointer(to: instance?.handle) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_register_singleton, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_unregister_singleton: GDExtensionMethodBindPtr = {
        let methodName = StringName("unregister_singleton")
        return withUnsafePointer(to: &Engine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3304788590)!
            }
            
        }
        
    }()
    
    /// Removes the singleton registered under `name`. The singleton object is _not_ freed. Only works with user-defined singletons registered with ``registerSingleton(name:instance:)``.
    public static func unregisterSingleton(name: StringName) {
        withUnsafePointer(to: name.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_unregister_singleton, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_singleton_list: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_singleton_list")
        return withUnsafePointer(to: &Engine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1139954409)!
            }
            
        }
        
    }()
    
    /// Returns a list of names of all available global singletons. See also ``getSingleton(name:)``.
    public static func getSingletonList() -> PackedStringArray {
        let _result: PackedStringArray = PackedStringArray ()
        gi.object_method_bind_ptrcall(method_get_singleton_list, UnsafeMutableRawPointer(mutating: shared.handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_register_script_language: GDExtensionMethodBindPtr = {
        let methodName = StringName("register_script_language")
        return withUnsafePointer(to: &Engine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1850254898)!
            }
            
        }
        
    }()
    
    /// Registers a ``ScriptLanguage`` instance to be available with `ScriptServer`.
    /// 
    /// Returns:
    /// 
    /// - ``GodotError/ok`` on success;
    /// 
    /// - ``GodotError/errUnavailable`` if `ScriptServer` has reached the limit and cannot register any new language;
    /// 
    /// - ``GodotError/errAlreadyExists`` if `ScriptServer` already contains a language with similar extension/name/type.
    /// 
    public static func registerScriptLanguage(_ language: ScriptLanguage?) -> GodotError {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        withUnsafePointer(to: language?.handle) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_register_script_language, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return GodotError (rawValue: _result)!
    }
    
    fileprivate static var method_unregister_script_language: GDExtensionMethodBindPtr = {
        let methodName = StringName("unregister_script_language")
        return withUnsafePointer(to: &Engine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1850254898)!
            }
            
        }
        
    }()
    
    /// Unregisters the ``ScriptLanguage`` instance from `ScriptServer`.
    /// 
    /// Returns:
    /// 
    /// - ``GodotError/ok`` on success;
    /// 
    /// - ``GodotError/errDoesNotExist`` if the language is not registered in `ScriptServer`.
    /// 
    public static func unregisterScriptLanguage(_ language: ScriptLanguage?) -> GodotError {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        withUnsafePointer(to: language?.handle) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_unregister_script_language, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return GodotError (rawValue: _result)!
    }
    
    fileprivate static var method_get_script_language_count: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_script_language_count")
        return withUnsafePointer(to: &Engine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2455072627)!
            }
            
        }
        
    }()
    
    /// Returns the number of available script languages. Use with ``getScriptLanguage(index:)``.
    public static func getScriptLanguageCount() -> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall(method_get_script_language_count, UnsafeMutableRawPointer(mutating: shared.handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_script_language: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_script_language")
        return withUnsafePointer(to: &Engine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2151255799)!
            }
            
        }
        
    }()
    
    /// Returns an instance of a ``ScriptLanguage`` with the given `index`.
    public static func getScriptLanguage(index: Int32) -> ScriptLanguage? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        withUnsafePointer(to: index) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_get_script_language, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_is_editor_hint: GDExtensionMethodBindPtr = {
        let methodName = StringName("is_editor_hint")
        return withUnsafePointer(to: &Engine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the script is currently running inside the editor, otherwise returns `false`. This is useful for `@tool` scripts to conditionally draw editor helpers, or prevent accidentally running "game" code that would affect the scene state while in the editor:
    /// 
    /// See <a href="https://docs.godotengine.org/en//tutorials/plugins/running_code_in_the_editor.html">Running code in the editor</a> in the documentation for more information.
    /// 
    /// > Note: To detect whether the script is running on an editor _build_ (such as when pressing [kbd]F5[/kbd]), use ``OS/hasFeature(tagName:)`` with the `"editor"` argument instead. `OS.has_feature("editor")` evaluate to `true` both when the script is running in the editor and when running the project from the editor, but returns `false` when run from an exported project.
    /// 
    public static func isEditorHint() -> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall(method_is_editor_hint, UnsafeMutableRawPointer(mutating: shared.handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_write_movie_path: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_write_movie_path")
        return withUnsafePointer(to: &Engine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    /// Returns the path to the ``MovieWriter``'s output file, or an empty string if the engine wasn't started in Movie Maker mode. The default path can be changed in ``ProjectSettings/editor/movieWriter/movieFile``.
    public static func getWriteMoviePath() -> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall(method_get_write_movie_path, UnsafeMutableRawPointer(mutating: shared.handle), nil, &_result.content)
        return _result.description
    }
    
    fileprivate static var method_set_print_error_messages: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_print_error_messages")
        return withUnsafePointer(to: &Engine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate static func set_print_error_messages(_ enabled: Bool) {
        withUnsafePointer(to: enabled) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_set_print_error_messages, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_is_printing_error_messages: GDExtensionMethodBindPtr = {
        let methodName = StringName("is_printing_error_messages")
        return withUnsafePointer(to: &Engine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate static func is_printing_error_messages() -> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall(method_is_printing_error_messages, UnsafeMutableRawPointer(mutating: shared.handle), nil, &_result)
        return _result
    }
    
}


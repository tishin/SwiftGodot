// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Meta class registering supported devices in OpenXR.
/// 
/// This class allows OpenXR core and extensions to register metadata relating to supported interaction devices such as controllers, trackers, haptic devices, etc. It is primarily used by the action map editor and to sanitize any action map by removing extension-dependent entries when applicable.
open class OpenXRInteractionProfileMetadata: Object {
    override open class var godotClassName: StringName { "OpenXRInteractionProfileMetadata" }
    /* Methods */
    fileprivate static var method_register_profile_rename: GDExtensionMethodBindPtr = {
        let methodName = StringName("register_profile_rename")
        return withUnsafePointer(to: &OpenXRInteractionProfileMetadata.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3186203200)!
            }
            
        }
        
    }()
    
    /// Allows for renaming old interaction profile paths to new paths to maintain backwards compatibility with older action maps.
    public final func registerProfileRename(oldName: String, newName: String) {
        let oldName = GString(oldName)
        withUnsafePointer(to: oldName.content) { pArg0 in
            let newName = GString(newName)
            withUnsafePointer(to: newName.content) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(OpenXRInteractionProfileMetadata.method_register_profile_rename, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_register_top_level_path: GDExtensionMethodBindPtr = {
        let methodName = StringName("register_top_level_path")
        return withUnsafePointer(to: &OpenXRInteractionProfileMetadata.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 254767734)!
            }
            
        }
        
    }()
    
    /// Registers a top level path to which profiles can be bound. For instance `/user/hand/left` refers to the bind point for the player's left hand. Extensions can register additional top level paths, for instance a haptic vest extension might register `/user/body/vest`.
    /// 
    /// `displayName` is the name shown to the user. `openxrPath` is the top level path being registered. `openxrExtensionName` is optional and ensures the top level path is only used if the specified extension is available/enabled.
    /// 
    /// When a top level path ends up being bound by OpenXR, a ``XRPositionalTracker`` is instantiated to manage the state of the device.
    /// 
    public final func registerTopLevelPath(displayName: String, openxrPath: String, openxrExtensionName: String) {
        let displayName = GString(displayName)
        withUnsafePointer(to: displayName.content) { pArg0 in
            let openxrPath = GString(openxrPath)
            withUnsafePointer(to: openxrPath.content) { pArg1 in
                let openxrExtensionName = GString(openxrExtensionName)
                withUnsafePointer(to: openxrExtensionName.content) { pArg2 in
                    withUnsafePointer(to: UnsafeRawPointersN3(pArg0, pArg1, pArg2)) { pArgs in
                        pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 3) { pArgs in
                            gi.object_method_bind_ptrcall(OpenXRInteractionProfileMetadata.method_register_top_level_path, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_register_interaction_profile: GDExtensionMethodBindPtr = {
        let methodName = StringName("register_interaction_profile")
        return withUnsafePointer(to: &OpenXRInteractionProfileMetadata.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 254767734)!
            }
            
        }
        
    }()
    
    /// Registers an interaction profile using its OpenXR designation (e.g. `/interaction_profiles/khr/simple_controller` is the profile for OpenXR's simple controller profile).
    /// 
    /// `displayName` is the description shown to the user. `openxrPath` is the interaction profile path being registered. `openxrExtensionName` optionally restricts this profile to the given extension being enabled/available. If the extension is not available, the profile and all related entries used in an action map are filtered out.
    /// 
    public final func registerInteractionProfile(displayName: String, openxrPath: String, openxrExtensionName: String) {
        let displayName = GString(displayName)
        withUnsafePointer(to: displayName.content) { pArg0 in
            let openxrPath = GString(openxrPath)
            withUnsafePointer(to: openxrPath.content) { pArg1 in
                let openxrExtensionName = GString(openxrExtensionName)
                withUnsafePointer(to: openxrExtensionName.content) { pArg2 in
                    withUnsafePointer(to: UnsafeRawPointersN3(pArg0, pArg1, pArg2)) { pArgs in
                        pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 3) { pArgs in
                            gi.object_method_bind_ptrcall(OpenXRInteractionProfileMetadata.method_register_interaction_profile, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_register_io_path: GDExtensionMethodBindPtr = {
        let methodName = StringName("register_io_path")
        return withUnsafePointer(to: &OpenXRInteractionProfileMetadata.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3443511926)!
            }
            
        }
        
    }()
    
    /// Registers an input/output path for the given `interactionProfile`. The profile should previously have been registered using ``registerInteractionProfile(displayName:openxrPath:openxrExtensionName:)``. `displayName` is the description shown to the user. `toplevelPath` specifies the bind path this input/output can be bound to (e.g. `/user/hand/left` or `/user/hand/right`). `openxrPath` is the action input/output being registered (e.g. `/user/hand/left/input/aim/pose`). `openxrExtensionName` restricts this input/output to an enabled/available extension, this doesn't need to repeat the extension on the profile but relates to overlapping extension (e.g. `XR_EXT_palm_pose` that introduces `â€¦/input/palm_ext/pose` input paths). `actionType` defines the type of input or output provided by OpenXR.
    public final func registerIoPath(interactionProfile: String, displayName: String, toplevelPath: String, openxrPath: String, openxrExtensionName: String, actionType: OpenXRAction.ActionType) {
        let interactionProfile = GString(interactionProfile)
        withUnsafePointer(to: interactionProfile.content) { pArg0 in
            let displayName = GString(displayName)
            withUnsafePointer(to: displayName.content) { pArg1 in
                let toplevelPath = GString(toplevelPath)
                withUnsafePointer(to: toplevelPath.content) { pArg2 in
                    let openxrPath = GString(openxrPath)
                    withUnsafePointer(to: openxrPath.content) { pArg3 in
                        let openxrExtensionName = GString(openxrExtensionName)
                        withUnsafePointer(to: openxrExtensionName.content) { pArg4 in
                            withUnsafePointer(to: actionType.rawValue) { pArg5 in
                                withUnsafePointer(to: UnsafeRawPointersN6(pArg0, pArg1, pArg2, pArg3, pArg4, pArg5)) { pArgs in
                                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 6) { pArgs in
                                        gi.object_method_bind_ptrcall(OpenXRInteractionProfileMetadata.method_register_io_path, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                                    }
                                    
                                }
                                
                            }
                            
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
}


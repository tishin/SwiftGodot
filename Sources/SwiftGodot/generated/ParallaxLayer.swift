// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A parallax scrolling layer to be used with ``ParallaxBackground``.
/// 
/// A ParallaxLayer must be the child of a ``ParallaxBackground`` node. Each ParallaxLayer can be set to move at different speeds relative to the camera movement or the ``ParallaxBackground/scrollOffset`` value.
/// 
/// This node's children will be affected by its scroll offset.
/// 
/// > Note: Any changes to this node's position and scale made after it enters the scene will be ignored.
/// 
open class ParallaxLayer: Node2D {
    override open class var godotClassName: StringName { "ParallaxLayer" }
    
    /* Properties */
    
    /// Multiplies the ParallaxLayer's motion. If an axis is set to `0`, it will not scroll.
    final public var motionScale: Vector2 {
        get {
            return get_motion_scale ()
        }
        
        set {
            set_motion_scale (newValue)
        }
        
    }
    
    /// The ParallaxLayer's offset relative to the parent ParallaxBackground's ``ParallaxBackground/scrollOffset``.
    final public var motionOffset: Vector2 {
        get {
            return get_motion_offset ()
        }
        
        set {
            set_motion_offset (newValue)
        }
        
    }
    
    /// The interval, in pixels, at which the ``ParallaxLayer`` is drawn repeatedly. Useful for creating an infinitely scrolling background. If an axis is set to `0`, the ``ParallaxLayer`` will be drawn only once along that direction.
    /// 
    /// > Note: If you want the repetition to pixel-perfect match a ``Texture2D`` displayed by a child node, you should account for any scale applied to the texture when defining this interval. For example, if you use a child ``Sprite2D`` scaled to `0.5` to display a 600x600 texture, and want this sprite to be repeated continuously horizontally, you should set the mirroring to `Vector2(300, 0)`.
    /// 
    /// > Note: If the length of the viewport axis is bigger than twice the repeated axis size, it will not repeat infinitely, as the parallax layer only draws 2 instances of the layer at any given time. The visibility window is calculated from the parent ``ParallaxBackground``'s position, not the layer's own position. So, if you use mirroring, **do not** change the ``ParallaxLayer`` position relative to its parent. Instead, if you need to adjust the background's position, set the ``CanvasLayer/offset`` property in the parent ``ParallaxBackground``.
    /// 
    /// > Note: Despite the name, the layer will not be mirrored, it will only be repeated.
    /// 
    final public var motionMirroring: Vector2 {
        get {
            return get_mirroring ()
        }
        
        set {
            set_mirroring (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_motion_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_motion_scale")
        return withUnsafePointer(to: &ParallaxLayer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 743155724)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_motion_scale(_ scale: Vector2) {
        withUnsafePointer(to: scale) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(ParallaxLayer.method_set_motion_scale, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_motion_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_motion_scale")
        return withUnsafePointer(to: &ParallaxLayer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3341600327)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_motion_scale() -> Vector2 {
        var _result: Vector2 = Vector2 ()
        gi.object_method_bind_ptrcall(ParallaxLayer.method_get_motion_scale, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_motion_offset: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_motion_offset")
        return withUnsafePointer(to: &ParallaxLayer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 743155724)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_motion_offset(_ offset: Vector2) {
        withUnsafePointer(to: offset) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(ParallaxLayer.method_set_motion_offset, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_motion_offset: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_motion_offset")
        return withUnsafePointer(to: &ParallaxLayer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3341600327)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_motion_offset() -> Vector2 {
        var _result: Vector2 = Vector2 ()
        gi.object_method_bind_ptrcall(ParallaxLayer.method_get_motion_offset, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_mirroring: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_mirroring")
        return withUnsafePointer(to: &ParallaxLayer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 743155724)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_mirroring(_ mirror: Vector2) {
        withUnsafePointer(to: mirror) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(ParallaxLayer.method_set_mirroring, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_mirroring: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_mirroring")
        return withUnsafePointer(to: &ParallaxLayer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3341600327)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_mirroring() -> Vector2 {
        var _result: Vector2 = Vector2 ()
        gi.object_method_bind_ptrcall(ParallaxLayer.method_get_mirroring, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
}


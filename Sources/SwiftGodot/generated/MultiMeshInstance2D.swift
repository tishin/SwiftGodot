// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Node that instances a ``MultiMesh`` in 2D.
/// 
/// ``MultiMeshInstance2D`` is a specialized node to instance a ``MultiMesh`` resource in 2D.
/// 
/// Usage is the same as ``MultiMeshInstance3D``.
/// 
/// 
/// 
/// This object emits the following signals:
/// 
/// - ``textureChanged``
open class MultiMeshInstance2D: Node2D {
    override open class var godotClassName: StringName { "MultiMeshInstance2D" }
    
    /* Properties */
    
    /// The ``MultiMesh`` that will be drawn by the ``MultiMeshInstance2D``.
    final public var multimesh: MultiMesh? {
        get {
            return get_multimesh ()
        }
        
        set {
            set_multimesh (newValue)
        }
        
    }
    
    /// The ``Texture2D`` that will be used if using the default ``CanvasItemMaterial``. Can be accessed as `TEXTURE` in CanvasItem shader.
    final public var texture: Texture2D? {
        get {
            return get_texture ()
        }
        
        set {
            set_texture (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_multimesh: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_multimesh")
        return withUnsafePointer(to: &MultiMeshInstance2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2246127404)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_multimesh(_ multimesh: MultiMesh?) {
        withUnsafePointer(to: multimesh?.handle) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(MultiMeshInstance2D.method_set_multimesh, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_multimesh: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_multimesh")
        return withUnsafePointer(to: &MultiMeshInstance2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1385450523)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_multimesh() -> MultiMesh? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall(MultiMeshInstance2D.method_get_multimesh, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_texture: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_texture")
        return withUnsafePointer(to: &MultiMeshInstance2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 4051416890)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_texture(_ texture: Texture2D?) {
        withUnsafePointer(to: texture?.handle) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(MultiMeshInstance2D.method_set_texture, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_texture: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_texture")
        return withUnsafePointer(to: &MultiMeshInstance2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3635182373)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_texture() -> Texture2D? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall(MultiMeshInstance2D.method_get_texture, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    // Signals 
    /// Emitted when the ``texture`` is changed.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.textureChanged.connect {
    ///    print ("caught signal")
    /// }
    /// ```
    public var textureChanged: SimpleSignal { SimpleSignal (target: self, signalName: "texture_changed") }
    
}


// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Base class for texture arrays that can optionally be compressed.
/// 
/// Base class for ``CompressedTexture2DArray`` and ``CompressedTexture3D``. Cannot be used directly, but contains all the functions necessary for accessing the derived resource types. See also ``TextureLayered``.
open class CompressedTextureLayered: TextureLayered {
    override open class var godotClassName: StringName { "CompressedTextureLayered" }
    
    /* Properties */
    
    /// The path the texture should be loaded from.
    final public var loadPath: String {
        get {
            return get_load_path ()
        }
        
        set {
            _ = load (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_load: GDExtensionMethodBindPtr = {
        let methodName = StringName("load")
        return withUnsafePointer(to: &CompressedTextureLayered.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 166001499)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Loads the texture at `path`.
    fileprivate final func load(_ path: String) -> GodotError {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        let path = GString(path)
        withUnsafePointer(to: path.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(CompressedTextureLayered.method_load, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return GodotError (rawValue: _result)!
    }
    
    fileprivate static var method_get_load_path: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_load_path")
        return withUnsafePointer(to: &CompressedTextureLayered.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_load_path() -> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall(CompressedTextureLayered.method_get_load_path, UnsafeMutableRawPointer(mutating: handle), nil, &_result.content)
        return _result.description
    }
    
}


// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A wrapper class for an <a href="http://enet.bespin.org/group__peer.html">ENetPeer</a>.
/// 
/// A PacketPeer implementation representing a peer of an ``ENetConnection``.
/// 
/// This class cannot be instantiated directly but can be retrieved during ``ENetConnection/service(timeout:)`` or via ``ENetConnection/getPeers()``.
/// 
/// > Note: When exporting to Android, make sure to enable the `INTERNET` permission in the Android export preset before exporting the project or using one-click deploy. Otherwise, network communication of any kind will be blocked by Android.
/// 
open class ENetPacketPeer: PacketPeer {
    override open class var godotClassName: StringName { "ENetPacketPeer" }
    public enum PeerState: Int64, CaseIterable, CustomDebugStringConvertible {
        /// The peer is disconnected.
        case disconnected = 0 // STATE_DISCONNECTED
        /// The peer is currently attempting to connect.
        case connecting = 1 // STATE_CONNECTING
        /// The peer has acknowledged the connection request.
        case acknowledgingConnect = 2 // STATE_ACKNOWLEDGING_CONNECT
        /// The peer is currently connecting.
        case connectionPending = 3 // STATE_CONNECTION_PENDING
        /// The peer has successfully connected, but is not ready to communicate with yet (.stateConnected).
        case connectionSucceeded = 4 // STATE_CONNECTION_SUCCEEDED
        /// The peer is currently connected and ready to communicate with.
        case connected = 5 // STATE_CONNECTED
        /// The peer is slated to disconnect after it has no more outgoing packets to send.
        case disconnectLater = 6 // STATE_DISCONNECT_LATER
        /// The peer is currently disconnecting.
        case disconnecting = 7 // STATE_DISCONNECTING
        /// The peer has acknowledged the disconnection request.
        case acknowledgingDisconnect = 8 // STATE_ACKNOWLEDGING_DISCONNECT
        /// The peer has lost connection, but is not considered truly disconnected (as the peer didn't acknowledge the disconnection request).
        case zombie = 9 // STATE_ZOMBIE
        /// A textual representation of this instance, suitable for debugging
        public var debugDescription: String {
            switch self {
                case .disconnected: return ".disconnected"
                case .connecting: return ".connecting"
                case .acknowledgingConnect: return ".acknowledgingConnect"
                case .connectionPending: return ".connectionPending"
                case .connectionSucceeded: return ".connectionSucceeded"
                case .connected: return ".connected"
                case .disconnectLater: return ".disconnectLater"
                case .disconnecting: return ".disconnecting"
                case .acknowledgingDisconnect: return ".acknowledgingDisconnect"
                case .zombie: return ".zombie"
            }
            
        }
        
    }
    
    public enum PeerStatistic: Int64, CaseIterable, CustomDebugStringConvertible {
        /// Mean packet loss of reliable packets as a ratio with respect to the ``packetLossScale``.
        case packetLoss = 0 // PEER_PACKET_LOSS
        /// Packet loss variance.
        case packetLossVariance = 1 // PEER_PACKET_LOSS_VARIANCE
        /// The time at which packet loss statistics were last updated (in milliseconds since the connection started). The interval for packet loss statistics updates is 10 seconds, and at least one packet must have been sent since the last statistics update.
        case packetLossEpoch = 2 // PEER_PACKET_LOSS_EPOCH
        /// Mean packet round trip time for reliable packets.
        case roundTripTime = 3 // PEER_ROUND_TRIP_TIME
        /// Variance of the mean round trip time.
        case roundTripTimeVariance = 4 // PEER_ROUND_TRIP_TIME_VARIANCE
        /// Last recorded round trip time for a reliable packet.
        case lastRoundTripTime = 5 // PEER_LAST_ROUND_TRIP_TIME
        /// Variance of the last trip time recorded.
        case lastRoundTripTimeVariance = 6 // PEER_LAST_ROUND_TRIP_TIME_VARIANCE
        /// The peer's current throttle status.
        case packetThrottle = 7 // PEER_PACKET_THROTTLE
        /// The maximum number of unreliable packets that should not be dropped. This value is always greater than or equal to `1`. The initial value is equal to ``packetThrottleScale``.
        case packetThrottleLimit = 8 // PEER_PACKET_THROTTLE_LIMIT
        /// Internal value used to increment the packet throttle counter. The value is hardcoded to `7` and cannot be changed. You probably want to look at .peerPacketThrottleAcceleration instead.
        case packetThrottleCounter = 9 // PEER_PACKET_THROTTLE_COUNTER
        /// The time at which throttle statistics were last updated (in milliseconds since the connection started). The interval for throttle statistics updates is .peerPacketThrottleInterval.
        case packetThrottleEpoch = 10 // PEER_PACKET_THROTTLE_EPOCH
        /// The throttle's acceleration factor. Higher values will make ENet adapt to fluctuating network conditions faster, causing unrelaible packets to be sent _more_ often. The default value is `2`.
        case packetThrottleAcceleration = 11 // PEER_PACKET_THROTTLE_ACCELERATION
        /// The throttle's deceleration factor. Higher values will make ENet adapt to fluctuating network conditions faster, causing unrelaible packets to be sent _less_ often. The default value is `2`.
        case packetThrottleDeceleration = 12 // PEER_PACKET_THROTTLE_DECELERATION
        /// The interval over which the lowest mean round trip time should be measured for use by the throttle mechanism (in milliseconds). The default value is `5000`.
        case packetThrottleInterval = 13 // PEER_PACKET_THROTTLE_INTERVAL
        /// A textual representation of this instance, suitable for debugging
        public var debugDescription: String {
            switch self {
                case .packetLoss: return ".packetLoss"
                case .packetLossVariance: return ".packetLossVariance"
                case .packetLossEpoch: return ".packetLossEpoch"
                case .roundTripTime: return ".roundTripTime"
                case .roundTripTimeVariance: return ".roundTripTimeVariance"
                case .lastRoundTripTime: return ".lastRoundTripTime"
                case .lastRoundTripTimeVariance: return ".lastRoundTripTimeVariance"
                case .packetThrottle: return ".packetThrottle"
                case .packetThrottleLimit: return ".packetThrottleLimit"
                case .packetThrottleCounter: return ".packetThrottleCounter"
                case .packetThrottleEpoch: return ".packetThrottleEpoch"
                case .packetThrottleAcceleration: return ".packetThrottleAcceleration"
                case .packetThrottleDeceleration: return ".packetThrottleDeceleration"
                case .packetThrottleInterval: return ".packetThrottleInterval"
            }
            
        }
        
    }
    
    /* Constants */
    /// The reference scale for packet loss. See ``getStatistic(_:)`` and .peerPacketLoss.
    public static let packetLossScale = 65536
    /// The reference value for throttle configuration. The default value is `32`. See ``throttleConfigure(interval:acceleration:deceleration:)``.
    public static let packetThrottleScale = 32
    /// Mark the packet to be sent as reliable.
    public static let flagReliable = 1
    /// Mark the packet to be sent unsequenced (unreliable).
    public static let flagUnsequenced = 2
    /// Mark the packet to be sent unreliable even if the packet is too big and needs fragmentation (increasing the chance of it being dropped).
    public static let flagUnreliableFragment = 8
    /* Methods */
    fileprivate static var method_peer_disconnect: GDExtensionMethodBindPtr = {
        let methodName = StringName("peer_disconnect")
        return withUnsafePointer(to: &ENetPacketPeer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1995695955)!
            }
            
        }
        
    }()
    
    /// Request a disconnection from a peer. An ``ENetConnection/EventType/eventDisconnect`` will be generated during ``ENetConnection/service(timeout:)`` once the disconnection is complete.
    public final func peerDisconnect(data: Int32 = 0) {
        withUnsafePointer(to: data) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(ENetPacketPeer.method_peer_disconnect, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_peer_disconnect_later: GDExtensionMethodBindPtr = {
        let methodName = StringName("peer_disconnect_later")
        return withUnsafePointer(to: &ENetPacketPeer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1995695955)!
            }
            
        }
        
    }()
    
    /// Request a disconnection from a peer, but only after all queued outgoing packets are sent. An ``ENetConnection/EventType/eventDisconnect`` will be generated during ``ENetConnection/service(timeout:)`` once the disconnection is complete.
    public final func peerDisconnectLater(data: Int32 = 0) {
        withUnsafePointer(to: data) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(ENetPacketPeer.method_peer_disconnect_later, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_peer_disconnect_now: GDExtensionMethodBindPtr = {
        let methodName = StringName("peer_disconnect_now")
        return withUnsafePointer(to: &ENetPacketPeer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1995695955)!
            }
            
        }
        
    }()
    
    /// Force an immediate disconnection from a peer. No ``ENetConnection/EventType/eventDisconnect`` will be generated. The foreign peer is not guaranteed to receive the disconnect notification, and is reset immediately upon return from this function.
    public final func peerDisconnectNow(data: Int32 = 0) {
        withUnsafePointer(to: data) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(ENetPacketPeer.method_peer_disconnect_now, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_ping: GDExtensionMethodBindPtr = {
        let methodName = StringName("ping")
        return withUnsafePointer(to: &ENetPacketPeer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Sends a ping request to a peer. ENet automatically pings all connected peers at regular intervals, however, this function may be called to ensure more frequent ping requests.
    public final func ping() {
        gi.object_method_bind_ptrcall(ENetPacketPeer.method_ping, UnsafeMutableRawPointer(mutating: handle), nil, nil)
        
    }
    
    fileprivate static var method_ping_interval: GDExtensionMethodBindPtr = {
        let methodName = StringName("ping_interval")
        return withUnsafePointer(to: &ENetPacketPeer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    /// Sets the `pingInterval` in milliseconds at which pings will be sent to a peer. Pings are used both to monitor the liveness of the connection and also to dynamically adjust the throttle during periods of low traffic so that the throttle has reasonable responsiveness during traffic spikes. The default ping interval is `500` milliseconds.
    public final func pingInterval(pingInterval: Int32) {
        withUnsafePointer(to: pingInterval) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(ENetPacketPeer.method_ping_interval, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_reset: GDExtensionMethodBindPtr = {
        let methodName = StringName("reset")
        return withUnsafePointer(to: &ENetPacketPeer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Forcefully disconnects a peer. The foreign host represented by the peer is not notified of the disconnection and will timeout on its connection to the local host.
    public final func reset() {
        gi.object_method_bind_ptrcall(ENetPacketPeer.method_reset, UnsafeMutableRawPointer(mutating: handle), nil, nil)
        
    }
    
    fileprivate static var method_send: GDExtensionMethodBindPtr = {
        let methodName = StringName("send")
        return withUnsafePointer(to: &ENetPacketPeer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 120522849)!
            }
            
        }
        
    }()
    
    /// Queues a `packet` to be sent over the specified `channel`. See `FLAG_*` constants for available packet flags.
    public final func send(channel: Int32, packet: PackedByteArray, flags: Int32) -> GodotError {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        withUnsafePointer(to: channel) { pArg0 in
            withUnsafePointer(to: packet.content) { pArg1 in
                withUnsafePointer(to: flags) { pArg2 in
                    withUnsafePointer(to: UnsafeRawPointersN3(pArg0, pArg1, pArg2)) { pArgs in
                        pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 3) { pArgs in
                            gi.object_method_bind_ptrcall(ENetPacketPeer.method_send, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        return GodotError (rawValue: _result)!
    }
    
    fileprivate static var method_throttle_configure: GDExtensionMethodBindPtr = {
        let methodName = StringName("throttle_configure")
        return withUnsafePointer(to: &ENetPacketPeer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1649997291)!
            }
            
        }
        
    }()
    
    /// Configures throttle parameter for a peer.
    /// 
    /// Unreliable packets are dropped by ENet in response to the varying conditions of the Internet connection to the peer. The throttle represents a probability that an unreliable packet should not be dropped and thus sent by ENet to the peer. By measuring fluctuations in round trip times of reliable packets over the specified `interval`, ENet will either increase the probability by the amount specified in the `acceleration` parameter, or decrease it by the amount specified in the `deceleration` parameter (both are ratios to ``packetThrottleScale``).
    /// 
    /// When the throttle has a value of ``packetThrottleScale``, no unreliable packets are dropped by ENet, and so 100% of all unreliable packets will be sent.
    /// 
    /// When the throttle has a value of `0`, all unreliable packets are dropped by ENet, and so 0% of all unreliable packets will be sent.
    /// 
    /// Intermediate values for the throttle represent intermediate probabilities between 0% and 100% of unreliable packets being sent. The bandwidth limits of the local and foreign hosts are taken into account to determine a sensible limit for the throttle probability above which it should not raise even in the best of conditions.
    /// 
    public final func throttleConfigure(interval: Int32, acceleration: Int32, deceleration: Int32) {
        withUnsafePointer(to: interval) { pArg0 in
            withUnsafePointer(to: acceleration) { pArg1 in
                withUnsafePointer(to: deceleration) { pArg2 in
                    withUnsafePointer(to: UnsafeRawPointersN3(pArg0, pArg1, pArg2)) { pArgs in
                        pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 3) { pArgs in
                            gi.object_method_bind_ptrcall(ENetPacketPeer.method_throttle_configure, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_set_timeout: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_timeout")
        return withUnsafePointer(to: &ENetPacketPeer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1649997291)!
            }
            
        }
        
    }()
    
    /// Sets the timeout parameters for a peer. The timeout parameters control how and when a peer will timeout from a failure to acknowledge reliable traffic. Timeout values are expressed in milliseconds.
    /// 
    /// The `timeout` is a factor that, multiplied by a value based on the average round trip time, will determine the timeout limit for a reliable packet. When that limit is reached, the timeout will be doubled, and the peer will be disconnected if that limit has reached `timeoutMin`. The `timeoutMax` parameter, on the other hand, defines a fixed timeout for which any packet must be acknowledged or the peer will be dropped.
    /// 
    public final func setTimeout(_ timeout: Int32, timeoutMin: Int32, timeoutMax: Int32) {
        withUnsafePointer(to: timeout) { pArg0 in
            withUnsafePointer(to: timeoutMin) { pArg1 in
                withUnsafePointer(to: timeoutMax) { pArg2 in
                    withUnsafePointer(to: UnsafeRawPointersN3(pArg0, pArg1, pArg2)) { pArgs in
                        pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 3) { pArgs in
                            gi.object_method_bind_ptrcall(ENetPacketPeer.method_set_timeout, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_remote_address: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_remote_address")
        return withUnsafePointer(to: &ENetPacketPeer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    /// Returns the IP address of this peer.
    public final func getRemoteAddress() -> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall(ENetPacketPeer.method_get_remote_address, UnsafeMutableRawPointer(mutating: handle), nil, &_result.content)
        return _result.description
    }
    
    fileprivate static var method_get_remote_port: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_remote_port")
        return withUnsafePointer(to: &ENetPacketPeer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    /// Returns the remote port of this peer.
    public final func getRemotePort() -> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall(ENetPacketPeer.method_get_remote_port, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_statistic: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_statistic")
        return withUnsafePointer(to: &ENetPacketPeer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1642578323)!
            }
            
        }
        
    }()
    
    /// Returns the requested `statistic` for this peer. See ``ENetPacketPeer/PeerStatistic``.
    public final func getStatistic(_ statistic: ENetPacketPeer.PeerStatistic) -> Double {
        var _result: Double = 0.0
        withUnsafePointer(to: statistic.rawValue) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(ENetPacketPeer.method_get_statistic, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_get_state: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_state")
        return withUnsafePointer(to: &ENetPacketPeer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 711068532)!
            }
            
        }
        
    }()
    
    /// Returns the current peer state. See ``ENetPacketPeer/PeerState``.
    public final func getState() -> ENetPacketPeer.PeerState {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall(ENetPacketPeer.method_get_state, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return ENetPacketPeer.PeerState (rawValue: _result)!
    }
    
    fileprivate static var method_get_channels: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_channels")
        return withUnsafePointer(to: &ENetPacketPeer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    /// Returns the number of channels allocated for communication with peer.
    public final func getChannels() -> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall(ENetPacketPeer.method_get_channels, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_is_active: GDExtensionMethodBindPtr = {
        let methodName = StringName("is_active")
        return withUnsafePointer(to: &ENetPacketPeer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the peer is currently active (i.e. the associated ``ENetConnection`` is still valid).
    public final func isActive() -> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall(ENetPacketPeer.method_is_active, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
}


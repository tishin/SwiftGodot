// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A singleton that provides access to static information about ``Theme`` resources used by the engine and by your project.
/// 
/// This singleton provides access to static information about ``Theme`` resources used by the engine and by your projects. You can fetch the default engine theme, as well as your project configured theme.
/// 
/// ``ThemeDB`` also contains fallback values for theme properties.
/// 
/// 
/// 
/// This object emits the following signals:
/// 
/// - ``fallbackChanged``
open class ThemeDB: Object {
    /// The shared instance of this class
    public static var shared: ThemeDB = {
        return withUnsafePointer (to: &ThemeDB.godotClassName.content) { ptr in
            ThemeDB (nativeHandle: gi.global_get_singleton (ptr)!)
        }
        
    }()
    
    override open class var godotClassName: StringName { "ThemeDB" }
    
    /* Properties */
    
    /// The fallback base scale factor of every ``Control`` node and ``Theme`` resource. Used when no other value is available to the control.
    /// 
    /// See also ``Theme/defaultBaseScale``.
    /// 
    static public var fallbackBaseScale: Double {
        get {
            return get_fallback_base_scale ()
        }
        
        set {
            set_fallback_base_scale (newValue)
        }
        
    }
    
    /// The fallback font of every ``Control`` node and ``Theme`` resource. Used when no other value is available to the control.
    /// 
    /// See also ``Theme/defaultFont``.
    /// 
    static public var fallbackFont: Font? {
        get {
            return get_fallback_font ()
        }
        
        set {
            set_fallback_font (newValue)
        }
        
    }
    
    /// The fallback font size of every ``Control`` node and ``Theme`` resource. Used when no other value is available to the control.
    /// 
    /// See also ``Theme/defaultFontSize``.
    /// 
    static public var fallbackFontSize: Int32 {
        get {
            return get_fallback_font_size ()
        }
        
        set {
            set_fallback_font_size (newValue)
        }
        
    }
    
    /// The fallback icon of every ``Control`` node and ``Theme`` resource. Used when no other value is available to the control.
    static public var fallbackIcon: Texture2D? {
        get {
            return get_fallback_icon ()
        }
        
        set {
            set_fallback_icon (newValue)
        }
        
    }
    
    /// The fallback stylebox of every ``Control`` node and ``Theme`` resource. Used when no other value is available to the control.
    static public var fallbackStylebox: StyleBox? {
        get {
            return get_fallback_stylebox ()
        }
        
        set {
            set_fallback_stylebox (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_get_default_theme: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_default_theme")
        return withUnsafePointer(to: &ThemeDB.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 754276358)!
            }
            
        }
        
    }()
    
    /// Returns a reference to the default engine ``Theme``. This theme resource is responsible for the out-of-the-box look of ``Control`` nodes and cannot be overridden.
    public static func getDefaultTheme() -> Theme? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall(method_get_default_theme, UnsafeMutableRawPointer(mutating: shared.handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_get_project_theme: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_project_theme")
        return withUnsafePointer(to: &ThemeDB.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 754276358)!
            }
            
        }
        
    }()
    
    /// Returns a reference to the custom project ``Theme``. This theme resources allows to override the default engine theme for every control node in the project.
    /// 
    /// To set the project theme, see ``ProjectSettings/gui/theme/custom``.
    /// 
    public static func getProjectTheme() -> Theme? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall(method_get_project_theme, UnsafeMutableRawPointer(mutating: shared.handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_fallback_base_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_fallback_base_scale")
        return withUnsafePointer(to: &ThemeDB.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate static func set_fallback_base_scale(_ baseScale: Double) {
        withUnsafePointer(to: baseScale) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_set_fallback_base_scale, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_fallback_base_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_fallback_base_scale")
        return withUnsafePointer(to: &ThemeDB.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 191475506)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate static func get_fallback_base_scale() -> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall(method_get_fallback_base_scale, UnsafeMutableRawPointer(mutating: shared.handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_fallback_font: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_fallback_font")
        return withUnsafePointer(to: &ThemeDB.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1262170328)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate static func set_fallback_font(_ font: Font?) {
        withUnsafePointer(to: font?.handle) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_set_fallback_font, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_fallback_font: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_fallback_font")
        return withUnsafePointer(to: &ThemeDB.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3656929885)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate static func get_fallback_font() -> Font? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall(method_get_fallback_font, UnsafeMutableRawPointer(mutating: shared.handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_fallback_font_size: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_fallback_font_size")
        return withUnsafePointer(to: &ThemeDB.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate static func set_fallback_font_size(_ fontSize: Int32) {
        withUnsafePointer(to: fontSize) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_set_fallback_font_size, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_fallback_font_size: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_fallback_font_size")
        return withUnsafePointer(to: &ThemeDB.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2455072627)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate static func get_fallback_font_size() -> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall(method_get_fallback_font_size, UnsafeMutableRawPointer(mutating: shared.handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_fallback_icon: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_fallback_icon")
        return withUnsafePointer(to: &ThemeDB.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 4051416890)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate static func set_fallback_icon(_ icon: Texture2D?) {
        withUnsafePointer(to: icon?.handle) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_set_fallback_icon, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_fallback_icon: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_fallback_icon")
        return withUnsafePointer(to: &ThemeDB.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 255860311)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate static func get_fallback_icon() -> Texture2D? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall(method_get_fallback_icon, UnsafeMutableRawPointer(mutating: shared.handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_fallback_stylebox: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_fallback_stylebox")
        return withUnsafePointer(to: &ThemeDB.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2797200388)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate static func set_fallback_stylebox(_ stylebox: StyleBox?) {
        withUnsafePointer(to: stylebox?.handle) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_set_fallback_stylebox, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_fallback_stylebox: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_fallback_stylebox")
        return withUnsafePointer(to: &ThemeDB.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 496040854)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate static func get_fallback_stylebox() -> StyleBox? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall(method_get_fallback_stylebox, UnsafeMutableRawPointer(mutating: shared.handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    // Signals 
    /// Emitted when one of the fallback values had been changed. Use it to refresh the look of controls that may rely on the fallback theme items.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.fallbackChanged.connect {
    ///    print ("caught signal")
    /// }
    /// ```
    public var fallbackChanged: SimpleSignal { SimpleSignal (target: self, signalName: "fallback_changed") }
    
}


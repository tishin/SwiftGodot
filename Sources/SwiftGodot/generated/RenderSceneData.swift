// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Abstract render data object, holds scene data related to rendering a single frame of a viewport.
/// 
/// Abstract scene data object, exists for the duration of rendering a single viewport.
/// 
/// > Note: This is an internal rendering server object, do not instantiate this from script.
/// 
open class RenderSceneData: Object {
    override open class var godotClassName: StringName { "RenderSceneData" }
    /* Methods */
    fileprivate static var method_get_cam_transform: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_cam_transform")
        return withUnsafePointer(to: &RenderSceneData.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3229777777)!
            }
            
        }
        
    }()
    
    /// Returns the camera transform used to render this frame.
    /// 
    /// > Note: If more than one view is rendered, this will return a centered transform.
    /// 
    public final func getCamTransform() -> Transform3D {
        var _result: Transform3D = Transform3D ()
        gi.object_method_bind_ptrcall(RenderSceneData.method_get_cam_transform, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_cam_projection: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_cam_projection")
        return withUnsafePointer(to: &RenderSceneData.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2910717950)!
            }
            
        }
        
    }()
    
    /// Returns the camera projection used to render this frame.
    /// 
    /// > Note: If more than one view is rendered, this will return a combined projection.
    /// 
    public final func getCamProjection() -> Projection {
        var _result: Projection = Projection ()
        gi.object_method_bind_ptrcall(RenderSceneData.method_get_cam_projection, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_view_count: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_view_count")
        return withUnsafePointer(to: &RenderSceneData.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    /// Returns the number of views being rendered.
    public final func getViewCount() -> UInt32 {
        var _result: UInt32 = 0
        gi.object_method_bind_ptrcall(RenderSceneData.method_get_view_count, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_view_eye_offset: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_view_eye_offset")
        return withUnsafePointer(to: &RenderSceneData.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 711720468)!
            }
            
        }
        
    }()
    
    /// Returns the eye offset per view used to render this frame. This is the offset between our camera transform and the eye transform.
    public final func getViewEyeOffset(view: UInt32) -> Vector3 {
        var _result: Vector3 = Vector3 ()
        withUnsafePointer(to: view) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(RenderSceneData.method_get_view_eye_offset, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_get_view_projection: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_view_projection")
        return withUnsafePointer(to: &RenderSceneData.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3179846605)!
            }
            
        }
        
    }()
    
    /// Returns the view projection per view used to render this frame.
    /// 
    /// > Note: If a single view is rendered, this returns the camera projection. If more than one view is rendered, this will return a projection for the given view including the eye offset.
    /// 
    public final func getViewProjection(view: UInt32) -> Projection {
        var _result: Projection = Projection ()
        withUnsafePointer(to: view) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(RenderSceneData.method_get_view_projection, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_get_uniform_buffer: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_uniform_buffer")
        return withUnsafePointer(to: &RenderSceneData.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2944877500)!
            }
            
        }
        
    }()
    
    /// Return the ``RID`` of the uniform buffer containing the scene data as a UBO.
    public final func getUniformBuffer() -> RID {
        let _result: RID = RID ()
        gi.object_method_bind_ptrcall(RenderSceneData.method_get_uniform_buffer, UnsafeMutableRawPointer(mutating: handle), nil, &_result.content)
        return _result
    }
    
}


// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A reference-counted holder object for a skeleton RID used in the ``RenderingServer``.
/// 
/// An internal object containing a mapping from a ``Skin`` used within the context of a particular ``MeshInstance3D`` to refer to the skeleton's ``RID`` in the RenderingServer.
/// 
/// See also ``MeshInstance3D/getSkinReference()`` and ``RenderingServer/instanceAttachSkeleton(instance:skeleton:)``.
/// 
/// Note that despite the similar naming, the skeleton RID used in the ``RenderingServer`` does not have a direct one-to-one correspondence to a ``Skeleton3D`` node.
/// 
/// In particular, a ``Skeleton3D`` node with no ``MeshInstance3D`` children may be unknown to the ``RenderingServer``.
/// 
/// On the other hand, a ``Skeleton3D`` with multiple ``MeshInstance3D`` nodes which each have different ``MeshInstance3D/skin`` objects may have multiple SkinReference instances (and hence, multiple skeleton ``RID``s).
/// 
open class SkinReference: RefCounted {
    override open class var godotClassName: StringName { "SkinReference" }
    /* Methods */
    fileprivate static var method_get_skeleton: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_skeleton")
        return withUnsafePointer(to: &SkinReference.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2944877500)!
            }
            
        }
        
    }()
    
    /// Returns the ``RID`` owned by this SkinReference, as returned by ``RenderingServer/skeletonCreate()``.
    public final func getSkeleton() -> RID {
        let _result: RID = RID ()
        gi.object_method_bind_ptrcall(SkinReference.method_get_skeleton, UnsafeMutableRawPointer(mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_get_skin: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_skin")
        return withUnsafePointer(to: &SkinReference.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2074563878)!
            }
            
        }
        
    }()
    
    /// Returns the ``Skin`` connected to this SkinReference. In the case of ``MeshInstance3D`` with no ``MeshInstance3D/skin`` assigned, this will reference an internal default ``Skin`` owned by that ``MeshInstance3D``.
    /// 
    /// Note that a single ``Skin`` may have more than one ``SkinReference`` in the case that it is shared by meshes across multiple ``Skeleton3D`` nodes.
    /// 
    public final func getSkin() -> Skin? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall(SkinReference.method_get_skin, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
}


// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Stream that can be fitted with sub-streams, which will be played in-sync.
/// 
/// This is a stream that can be fitted with sub-streams, which will be played in-sync. The streams being at exactly the same time when play is pressed, and will end when the last of them ends. If one of the sub-streams loops, then playback will continue.
open class AudioStreamSynchronized: AudioStream {
    override open class var godotClassName: StringName { "AudioStreamSynchronized" }
    /* Constants */
    /// Maximum amount of streams that can be synchrohized.
    public static let maxStreams = 32
    
    /* Properties */
    
    /// Set the total amount of streams that will be played back synchronized.
    final public var streamCount: Int32 {
        get {
            return get_stream_count ()
        }
        
        set {
            set_stream_count (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_stream_count: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_stream_count")
        return withUnsafePointer(to: &AudioStreamSynchronized.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_stream_count(_ streamCount: Int32) {
        withUnsafePointer(to: streamCount) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(AudioStreamSynchronized.method_set_stream_count, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_stream_count: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_stream_count")
        return withUnsafePointer(to: &AudioStreamSynchronized.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_stream_count() -> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall(AudioStreamSynchronized.method_get_stream_count, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_sync_stream: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_sync_stream")
        return withUnsafePointer(to: &AudioStreamSynchronized.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 111075094)!
            }
            
        }
        
    }()
    
    /// Set one of the synchronized streams, by index.
    public final func setSyncStream(streamIndex: Int32, audioStream: AudioStream?) {
        withUnsafePointer(to: streamIndex) { pArg0 in
            withUnsafePointer(to: audioStream?.handle) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(AudioStreamSynchronized.method_set_sync_stream, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_sync_stream: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_sync_stream")
        return withUnsafePointer(to: &AudioStreamSynchronized.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2739380747)!
            }
            
        }
        
    }()
    
    /// Get one of the synchronized streams, by index.
    public final func getSyncStream(streamIndex: Int32) -> AudioStream? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        withUnsafePointer(to: streamIndex) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(AudioStreamSynchronized.method_get_sync_stream, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                }
                
            }
            
        }
        
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_sync_stream_volume: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_sync_stream_volume")
        return withUnsafePointer(to: &AudioStreamSynchronized.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1602489585)!
            }
            
        }
        
    }()
    
    /// Set the volume of one of the synchronized streams, by index.
    public final func setSyncStreamVolume(streamIndex: Int32, volumeDb: Double) {
        withUnsafePointer(to: streamIndex) { pArg0 in
            withUnsafePointer(to: volumeDb) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(AudioStreamSynchronized.method_set_sync_stream_volume, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_sync_stream_volume: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_sync_stream_volume")
        return withUnsafePointer(to: &AudioStreamSynchronized.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2339986948)!
            }
            
        }
        
    }()
    
    /// Get the volume of one of the synchronized streams, by index.
    public final func getSyncStreamVolume(streamIndex: Int32) -> Double {
        var _result: Double = 0.0
        withUnsafePointer(to: streamIndex) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(AudioStreamSynchronized.method_get_sync_stream_volume, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
}


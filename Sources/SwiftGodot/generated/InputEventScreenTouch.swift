// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Represents a screen touch event.
/// 
/// Stores information about multi-touch press/release input events. Supports touch press, touch release and ``index`` for multi-touch count and order.
open class InputEventScreenTouch: InputEventFromWindow {
    override open class var godotClassName: StringName { "InputEventScreenTouch" }
    
    /* Properties */
    
    /// The touch index in the case of a multi-touch event. One index = one finger.
    final public var index: Int32 {
        get {
            return get_index ()
        }
        
        set {
            set_index (newValue)
        }
        
    }
    
    /// The touch position in the viewport the node is in, using the coordinate system of this viewport.
    final public var position: Vector2 {
        get {
            return get_position ()
        }
        
        set {
            set_position (newValue)
        }
        
    }
    
    /// If `true`, the touch event has been canceled.
    final public var canceled: Bool {
        get {
            return isCanceled ()
        }
        
        set {
            set_canceled (newValue)
        }
        
    }
    
    /// If `true`, the touch's state is pressed. If `false`, the touch's state is released.
    final public var pressed: Bool {
        get {
            return isPressed ()
        }
        
        set {
            set_pressed (newValue)
        }
        
    }
    
    /// If `true`, the touch's state is a double tap.
    final public var doubleTap: Bool {
        get {
            return is_double_tap ()
        }
        
        set {
            set_double_tap (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_index: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_index")
        return withUnsafePointer(to: &InputEventScreenTouch.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_index(_ index: Int32) {
        withUnsafePointer(to: index) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(InputEventScreenTouch.method_set_index, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_index: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_index")
        return withUnsafePointer(to: &InputEventScreenTouch.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_index() -> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall(InputEventScreenTouch.method_get_index, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_position: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_position")
        return withUnsafePointer(to: &InputEventScreenTouch.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 743155724)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_position(_ position: Vector2) {
        withUnsafePointer(to: position) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(InputEventScreenTouch.method_set_position, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_position: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_position")
        return withUnsafePointer(to: &InputEventScreenTouch.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3341600327)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_position() -> Vector2 {
        var _result: Vector2 = Vector2 ()
        gi.object_method_bind_ptrcall(InputEventScreenTouch.method_get_position, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_pressed: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_pressed")
        return withUnsafePointer(to: &InputEventScreenTouch.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_pressed(_ pressed: Bool) {
        withUnsafePointer(to: pressed) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(InputEventScreenTouch.method_set_pressed, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_set_canceled: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_canceled")
        return withUnsafePointer(to: &InputEventScreenTouch.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_canceled(_ canceled: Bool) {
        withUnsafePointer(to: canceled) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(InputEventScreenTouch.method_set_canceled, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_set_double_tap: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_double_tap")
        return withUnsafePointer(to: &InputEventScreenTouch.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_double_tap(_ doubleTap: Bool) {
        withUnsafePointer(to: doubleTap) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(InputEventScreenTouch.method_set_double_tap, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_is_double_tap: GDExtensionMethodBindPtr = {
        let methodName = StringName("is_double_tap")
        return withUnsafePointer(to: &InputEventScreenTouch.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_double_tap() -> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall(InputEventScreenTouch.method_is_double_tap, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
}


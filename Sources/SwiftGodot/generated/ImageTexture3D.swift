// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Texture with 3 dimensions.
/// 
/// ``ImageTexture3D`` is a 3-dimensional ``ImageTexture`` that has a width, height, and depth. See also ``ImageTextureLayered``.
/// 
/// 3D textures are typically used to store density maps for ``FogMaterial``, color correction LUTs for ``Environment``, vector fields for ``GPUParticlesAttractorVectorField3D`` and collision maps for ``GPUParticlesCollisionSDF3D``. 3D textures can also be used in custom shaders.
/// 
open class ImageTexture3D: Texture3D {
    override open class var godotClassName: StringName { "ImageTexture3D" }
    /* Methods */
    fileprivate static var method_create: GDExtensionMethodBindPtr = {
        let methodName = StringName("create")
        return withUnsafePointer(to: &ImageTexture3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1130379827)!
            }
            
        }
        
    }()
    
    /// Creates the ``ImageTexture3D`` with specified `width`, `height`, and `depth`. See ``Image.Format`` for `format` options. If `useMipmaps` is `true`, then generate mipmaps for the ``ImageTexture3D``.
    public final func create(format: Image.Format, width: Int32, height: Int32, depth: Int32, useMipmaps: Bool, data: ObjectCollection<Image>) -> GodotError {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        withUnsafePointer(to: format.rawValue) { pArg0 in
            withUnsafePointer(to: width) { pArg1 in
                withUnsafePointer(to: height) { pArg2 in
                    withUnsafePointer(to: depth) { pArg3 in
                        withUnsafePointer(to: useMipmaps) { pArg4 in
                            withUnsafePointer(to: data.array.content) { pArg5 in
                                withUnsafePointer(to: UnsafeRawPointersN6(pArg0, pArg1, pArg2, pArg3, pArg4, pArg5)) { pArgs in
                                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 6) { pArgs in
                                        gi.object_method_bind_ptrcall(ImageTexture3D.method_create, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                                    }
                                    
                                }
                                
                            }
                            
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        return GodotError (rawValue: _result)!
    }
    
    fileprivate static var method_update: GDExtensionMethodBindPtr = {
        let methodName = StringName("update")
        return withUnsafePointer(to: &ImageTexture3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 381264803)!
            }
            
        }
        
    }()
    
    /// Replaces the texture's existing data with the layers specified in `data`. The size of `data` must match the parameters that were used for ``create(format:width:height:depth:useMipmaps:data:)``. In other words, the texture cannot be resized or have its format changed by calling ``update(data:)``.
    public final func update(data: ObjectCollection<Image>) {
        withUnsafePointer(to: data.array.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(ImageTexture3D.method_update, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
}


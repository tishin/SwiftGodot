// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Configuration for properties to synchronize with a ``MultiplayerSynchronizer``.
open class SceneReplicationConfig: Resource {
    override open class var godotClassName: StringName { "SceneReplicationConfig" }
    public enum ReplicationMode: Int64, CaseIterable, CustomDebugStringConvertible {
        /// Do not keep the given property synchronized.
        case never = 0 // REPLICATION_MODE_NEVER
        /// Replicate the given property on process by constantly sending updates using unreliable transfer mode.
        case always = 1 // REPLICATION_MODE_ALWAYS
        /// Replicate the given property on process by sending updates using reliable transfer mode when its value changes.
        case onChange = 2 // REPLICATION_MODE_ON_CHANGE
        /// A textual representation of this instance, suitable for debugging
        public var debugDescription: String {
            switch self {
                case .never: return ".never"
                case .always: return ".always"
                case .onChange: return ".onChange"
            }
            
        }
        
    }
    
    /* Methods */
    fileprivate static var method_get_properties: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_properties")
        return withUnsafePointer(to: &SceneReplicationConfig.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3995934104)!
            }
            
        }
        
    }()
    
    /// Returns a list of synchronized property ``NodePath``s.
    public final func getProperties() -> VariantCollection<NodePath> {
        var _result: Int64 = 0
        gi.object_method_bind_ptrcall(SceneReplicationConfig.method_get_properties, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return VariantCollection<NodePath>(content: _result)
    }
    
    fileprivate static var method_add_property: GDExtensionMethodBindPtr = {
        let methodName = StringName("add_property")
        return withUnsafePointer(to: &SceneReplicationConfig.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 4094619021)!
            }
            
        }
        
    }()
    
    /// Adds the property identified by the given `path` to the list of the properties being synchronized, optionally passing an `index`.
    /// 
    /// > Note: For details on restrictions and limitations on property synchronization, see ``MultiplayerSynchronizer``.
    /// 
    public final func addProperty(path: NodePath, index: Int32 = -1) {
        withUnsafePointer(to: path.content) { pArg0 in
            withUnsafePointer(to: index) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(SceneReplicationConfig.method_add_property, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_has_property: GDExtensionMethodBindPtr = {
        let methodName = StringName("has_property")
        return withUnsafePointer(to: &SceneReplicationConfig.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 861721659)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the given `path` is configured for synchronization.
    public final func hasProperty(path: NodePath) -> Bool {
        var _result: Bool = false
        withUnsafePointer(to: path.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(SceneReplicationConfig.method_has_property, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_remove_property: GDExtensionMethodBindPtr = {
        let methodName = StringName("remove_property")
        return withUnsafePointer(to: &SceneReplicationConfig.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1348162250)!
            }
            
        }
        
    }()
    
    /// Removes the property identified by the given `path` from the configuration.
    public final func removeProperty(path: NodePath) {
        withUnsafePointer(to: path.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(SceneReplicationConfig.method_remove_property, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_property_get_index: GDExtensionMethodBindPtr = {
        let methodName = StringName("property_get_index")
        return withUnsafePointer(to: &SceneReplicationConfig.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1382022557)!
            }
            
        }
        
    }()
    
    /// Finds the index of the given `path`.
    public final func propertyGetIndex(path: NodePath) -> Int32 {
        var _result: Int32 = 0
        withUnsafePointer(to: path.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(SceneReplicationConfig.method_property_get_index, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_property_get_spawn: GDExtensionMethodBindPtr = {
        let methodName = StringName("property_get_spawn")
        return withUnsafePointer(to: &SceneReplicationConfig.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3456846888)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the property identified by the given `path` is configured to be synchronized on spawn.
    public final func propertyGetSpawn(path: NodePath) -> Bool {
        var _result: Bool = false
        withUnsafePointer(to: path.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(SceneReplicationConfig.method_property_get_spawn, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_property_set_spawn: GDExtensionMethodBindPtr = {
        let methodName = StringName("property_set_spawn")
        return withUnsafePointer(to: &SceneReplicationConfig.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3868023870)!
            }
            
        }
        
    }()
    
    /// Sets whether the property identified by the given `path` is configured to be synchronized on spawn.
    public final func propertySetSpawn(path: NodePath, enabled: Bool) {
        withUnsafePointer(to: path.content) { pArg0 in
            withUnsafePointer(to: enabled) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(SceneReplicationConfig.method_property_set_spawn, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_property_get_replication_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName("property_get_replication_mode")
        return withUnsafePointer(to: &SceneReplicationConfig.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2870606336)!
            }
            
        }
        
    }()
    
    /// Returns the replication mode for the property identified by the given `path`. See ``SceneReplicationConfig/ReplicationMode``.
    public final func propertyGetReplicationMode(path: NodePath) -> SceneReplicationConfig.ReplicationMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        withUnsafePointer(to: path.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(SceneReplicationConfig.method_property_get_replication_mode, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return SceneReplicationConfig.ReplicationMode (rawValue: _result)!
    }
    
    fileprivate static var method_property_set_replication_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName("property_set_replication_mode")
        return withUnsafePointer(to: &SceneReplicationConfig.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3200083865)!
            }
            
        }
        
    }()
    
    /// Sets the synchronization mode for the property identified by the given `path`. See ``SceneReplicationConfig/ReplicationMode``.
    public final func propertySetReplicationMode(path: NodePath, mode: SceneReplicationConfig.ReplicationMode) {
        withUnsafePointer(to: path.content) { pArg0 in
            withUnsafePointer(to: mode.rawValue) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(SceneReplicationConfig.method_property_set_replication_mode, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_property_get_sync: GDExtensionMethodBindPtr = {
        let methodName = StringName("property_get_sync")
        return withUnsafePointer(to: &SceneReplicationConfig.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3456846888)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the property identified by the given `path` is configured to be synchronized on process.
    public final func propertyGetSync(path: NodePath) -> Bool {
        var _result: Bool = false
        withUnsafePointer(to: path.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(SceneReplicationConfig.method_property_get_sync, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_property_set_sync: GDExtensionMethodBindPtr = {
        let methodName = StringName("property_set_sync")
        return withUnsafePointer(to: &SceneReplicationConfig.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3868023870)!
            }
            
        }
        
    }()
    
    /// Sets whether the property identified by the given `path` is configured to be synchronized on process.
    public final func propertySetSync(path: NodePath, enabled: Bool) {
        withUnsafePointer(to: path.content) { pArg0 in
            withUnsafePointer(to: enabled) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(SceneReplicationConfig.method_property_set_sync, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_property_get_watch: GDExtensionMethodBindPtr = {
        let methodName = StringName("property_get_watch")
        return withUnsafePointer(to: &SceneReplicationConfig.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3456846888)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the property identified by the given `path` is configured to be reliably synchronized when changes are detected on process.
    public final func propertyGetWatch(path: NodePath) -> Bool {
        var _result: Bool = false
        withUnsafePointer(to: path.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(SceneReplicationConfig.method_property_get_watch, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_property_set_watch: GDExtensionMethodBindPtr = {
        let methodName = StringName("property_set_watch")
        return withUnsafePointer(to: &SceneReplicationConfig.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3868023870)!
            }
            
        }
        
    }()
    
    /// Sets whether the property identified by the given `path` is configured to be reliably synchronized when changes are detected on process.
    public final func propertySetWatch(path: NodePath, enabled: Bool) {
        withUnsafePointer(to: path.content) { pArg0 in
            withUnsafePointer(to: enabled) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(SceneReplicationConfig.method_property_set_watch, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
}


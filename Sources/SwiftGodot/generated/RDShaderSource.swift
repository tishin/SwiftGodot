// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Shader source code (used by ``RenderingDevice``).
/// 
/// Shader source code in text form.
/// 
/// See also ``RDShaderFile``. ``RDShaderSource`` is only meant to be used with the ``RenderingDevice`` API. It should not be confused with Godot's own ``Shader`` resource, which is what Godot's various nodes use for high-level shader programming.
/// 
open class RDShaderSource: RefCounted {
    override open class var godotClassName: StringName { "RDShaderSource" }
    
    /* Properties */
    
    /// Source code for the shader's vertex stage.
    final public var sourceVertex: String {
        get {
            return get_stage_source (RenderingDevice.ShaderStage (rawValue: 0)!)
        }
        
        set {
            set_stage_source (RenderingDevice.ShaderStage (rawValue: 0)!, newValue)
        }
        
    }
    
    /// Source code for the shader's fragment stage.
    final public var sourceFragment: String {
        get {
            return get_stage_source (RenderingDevice.ShaderStage (rawValue: 1)!)
        }
        
        set {
            set_stage_source (RenderingDevice.ShaderStage (rawValue: 1)!, newValue)
        }
        
    }
    
    /// Source code for the shader's tessellation control stage.
    final public var sourceTesselationControl: String {
        get {
            return get_stage_source (RenderingDevice.ShaderStage (rawValue: 2)!)
        }
        
        set {
            set_stage_source (RenderingDevice.ShaderStage (rawValue: 2)!, newValue)
        }
        
    }
    
    /// Source code for the shader's tessellation evaluation stage.
    final public var sourceTesselationEvaluation: String {
        get {
            return get_stage_source (RenderingDevice.ShaderStage (rawValue: 3)!)
        }
        
        set {
            set_stage_source (RenderingDevice.ShaderStage (rawValue: 3)!, newValue)
        }
        
    }
    
    /// Source code for the shader's compute stage.
    final public var sourceCompute: String {
        get {
            return get_stage_source (RenderingDevice.ShaderStage (rawValue: 4)!)
        }
        
        set {
            set_stage_source (RenderingDevice.ShaderStage (rawValue: 4)!, newValue)
        }
        
    }
    
    /// The language the shader is written in.
    final public var language: RenderingDevice.ShaderLanguage {
        get {
            return get_language ()
        }
        
        set {
            set_language (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_stage_source: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_stage_source")
        return withUnsafePointer(to: &RDShaderSource.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 620821314)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Sets `source` code for the specified shader `stage`. Equivalent to setting one of ``sourceCompute``, ``sourceFragment``, ``sourceTesselationControl``, ``sourceTesselationEvaluation`` or ``sourceVertex``.
    fileprivate final func set_stage_source(_ stage: RenderingDevice.ShaderStage, _ source: String) {
        withUnsafePointer(to: stage.rawValue) { pArg0 in
            let source = GString(source)
            withUnsafePointer(to: source.content) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(RDShaderSource.method_set_stage_source, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_stage_source: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_stage_source")
        return withUnsafePointer(to: &RDShaderSource.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3354920045)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Returns source code for the specified shader `stage`. Equivalent to getting one of ``sourceCompute``, ``sourceFragment``, ``sourceTesselationControl``, ``sourceTesselationEvaluation`` or ``sourceVertex``.
    fileprivate final func get_stage_source(_ stage: RenderingDevice.ShaderStage) -> String {
        let _result = GString ()
        withUnsafePointer(to: stage.rawValue) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(RDShaderSource.method_get_stage_source, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result.content)
                }
                
            }
            
        }
        
        return _result.description
    }
    
    fileprivate static var method_set_language: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_language")
        return withUnsafePointer(to: &RDShaderSource.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3422186742)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_language(_ language: RenderingDevice.ShaderLanguage) {
        withUnsafePointer(to: language.rawValue) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(RDShaderSource.method_set_language, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_language: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_language")
        return withUnsafePointer(to: &RDShaderSource.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1063538261)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_language() -> RenderingDevice.ShaderLanguage {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall(RDShaderSource.method_get_language, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return RenderingDevice.ShaderLanguage (rawValue: _result)!
    }
    
}


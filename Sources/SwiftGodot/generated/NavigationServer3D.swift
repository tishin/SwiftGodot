// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A server interface for low-level 3D navigation access.
/// 
/// NavigationServer3D is the server that handles navigation maps, regions and agents. It does not handle A* navigation from ``AStar3D``.
/// 
/// Maps are divided into regions, which are composed of navigation meshes. Together, they define the navigable areas in the 3D world.
/// 
/// > Note: Most ``NavigationServer3D`` changes take effect after the next physics frame and not immediately. This includes all changes made to maps, regions or agents by navigation-related nodes in the scene tree or made through scripts.
/// 
/// For two regions to be connected to each other, they must share a similar edge. An edge is considered connected to another if both of its two vertices are at a distance less than `edge_connection_margin` to the respective other edge's vertex.
/// 
/// You may assign navigation layers to regions with ``NavigationServer3D/regionSetNavigationLayers(region:navigationLayers:)``, which then can be checked upon when requesting a path with ``NavigationServer3D/mapGetPath(map:origin:destination:optimize:navigationLayers:)``. This can be used to allow or deny certain areas for some objects.
/// 
/// To use the collision avoidance system, you may use agents. You can set an agent's target velocity, then the servers will emit a callback with a modified velocity.
/// 
/// > Note: The collision avoidance system ignores regions. Using the modified velocity directly may move an agent outside of the traversable area. This is a limitation of the collision avoidance system, any more complex situation may require the use of the physics engine.
/// 
/// This server keeps tracks of any call and executes them during the sync phase. This means that you can request any change to the map, using any thread, without worrying.
/// 
/// 
/// 
/// This object emits the following signals:
/// 
/// - ``mapChanged``
/// - ``navigationDebugChanged``
/// - ``avoidanceDebugChanged``
open class NavigationServer3D: Object {
    /// The shared instance of this class
    public static var shared: NavigationServer3D = {
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { ptr in
            NavigationServer3D (nativeHandle: gi.global_get_singleton (ptr)!)
        }
        
    }()
    
    override open class var godotClassName: StringName { "NavigationServer3D" }
    public enum ProcessInfo: Int64, CaseIterable, CustomDebugStringConvertible {
        /// Constant to get the number of active navigation maps.
        case activeMaps = 0 // INFO_ACTIVE_MAPS
        /// Constant to get the number of active navigation regions.
        case regionCount = 1 // INFO_REGION_COUNT
        /// Constant to get the number of active navigation agents processing avoidance.
        case agentCount = 2 // INFO_AGENT_COUNT
        /// Constant to get the number of active navigation links.
        case linkCount = 3 // INFO_LINK_COUNT
        /// Constant to get the number of navigation mesh polygons.
        case polygonCount = 4 // INFO_POLYGON_COUNT
        /// Constant to get the number of navigation mesh polygon edges.
        case edgeCount = 5 // INFO_EDGE_COUNT
        /// Constant to get the number of navigation mesh polygon edges that were merged due to edge key overlap.
        case edgeMergeCount = 6 // INFO_EDGE_MERGE_COUNT
        /// Constant to get the number of navigation mesh polygon edges that are considered connected by edge proximity.
        case edgeConnectionCount = 7 // INFO_EDGE_CONNECTION_COUNT
        /// Constant to get the number of navigation mesh polygon edges that could not be merged but may be still connected by edge proximity or with links.
        case edgeFreeCount = 8 // INFO_EDGE_FREE_COUNT
        /// A textual representation of this instance, suitable for debugging
        public var debugDescription: String {
            switch self {
                case .activeMaps: return ".activeMaps"
                case .regionCount: return ".regionCount"
                case .agentCount: return ".agentCount"
                case .linkCount: return ".linkCount"
                case .polygonCount: return ".polygonCount"
                case .edgeCount: return ".edgeCount"
                case .edgeMergeCount: return ".edgeMergeCount"
                case .edgeConnectionCount: return ".edgeConnectionCount"
                case .edgeFreeCount: return ".edgeFreeCount"
            }
            
        }
        
    }
    
    /* Methods */
    fileprivate static var method_get_maps: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_maps")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3995934104)!
            }
            
        }
        
    }()
    
    /// Returns all created navigation map ``RID``s on the NavigationServer. This returns both 2D and 3D created navigation maps as there is technically no distinction between them.
    public static func getMaps() -> VariantCollection<RID> {
        var _result: Int64 = 0
        gi.object_method_bind_ptrcall(method_get_maps, UnsafeMutableRawPointer(mutating: shared.handle), nil, &_result)
        return VariantCollection<RID>(content: _result)
    }
    
    fileprivate static var method_map_create: GDExtensionMethodBindPtr = {
        let methodName = StringName("map_create")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 529393457)!
            }
            
        }
        
    }()
    
    /// Create a new map.
    public static func mapCreate() -> RID {
        let _result: RID = RID ()
        gi.object_method_bind_ptrcall(method_map_create, UnsafeMutableRawPointer(mutating: shared.handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_map_set_active: GDExtensionMethodBindPtr = {
        let methodName = StringName("map_set_active")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1265174801)!
            }
            
        }
        
    }()
    
    /// Sets the map active.
    public static func mapSetActive(map: RID, active: Bool) {
        withUnsafePointer(to: map.content) { pArg0 in
            withUnsafePointer(to: active) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_map_set_active, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_map_is_active: GDExtensionMethodBindPtr = {
        let methodName = StringName("map_is_active")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 4155700596)!
            }
            
        }
        
    }()
    
    /// Returns true if the map is active.
    public static func mapIsActive(map: RID) -> Bool {
        var _result: Bool = false
        withUnsafePointer(to: map.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_map_is_active, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_map_set_up: GDExtensionMethodBindPtr = {
        let methodName = StringName("map_set_up")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3227306858)!
            }
            
        }
        
    }()
    
    /// Sets the map up direction.
    public static func mapSetUp(map: RID, up: Vector3) {
        withUnsafePointer(to: map.content) { pArg0 in
            withUnsafePointer(to: up) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_map_set_up, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_map_get_up: GDExtensionMethodBindPtr = {
        let methodName = StringName("map_get_up")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 531438156)!
            }
            
        }
        
    }()
    
    /// Returns the map's up direction.
    public static func mapGetUp(map: RID) -> Vector3 {
        var _result: Vector3 = Vector3 ()
        withUnsafePointer(to: map.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_map_get_up, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_map_set_cell_size: GDExtensionMethodBindPtr = {
        let methodName = StringName("map_set_cell_size")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1794382983)!
            }
            
        }
        
    }()
    
    /// Sets the map cell size used to rasterize the navigation mesh vertices on the XZ plane. Must match with the cell size of the used navigation meshes.
    public static func mapSetCellSize(map: RID, cellSize: Double) {
        withUnsafePointer(to: map.content) { pArg0 in
            withUnsafePointer(to: cellSize) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_map_set_cell_size, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_map_get_cell_size: GDExtensionMethodBindPtr = {
        let methodName = StringName("map_get_cell_size")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 866169185)!
            }
            
        }
        
    }()
    
    /// Returns the map cell size used to rasterize the navigation mesh vertices on the XZ plane.
    public static func mapGetCellSize(map: RID) -> Double {
        var _result: Double = 0.0
        withUnsafePointer(to: map.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_map_get_cell_size, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_map_set_cell_height: GDExtensionMethodBindPtr = {
        let methodName = StringName("map_set_cell_height")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1794382983)!
            }
            
        }
        
    }()
    
    /// Sets the map cell height used to rasterize the navigation mesh vertices on the Y axis. Must match with the cell height of the used navigation meshes.
    public static func mapSetCellHeight(map: RID, cellHeight: Double) {
        withUnsafePointer(to: map.content) { pArg0 in
            withUnsafePointer(to: cellHeight) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_map_set_cell_height, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_map_get_cell_height: GDExtensionMethodBindPtr = {
        let methodName = StringName("map_get_cell_height")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 866169185)!
            }
            
        }
        
    }()
    
    /// Returns the map cell height used to rasterize the navigation mesh vertices on the Y axis.
    public static func mapGetCellHeight(map: RID) -> Double {
        var _result: Double = 0.0
        withUnsafePointer(to: map.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_map_get_cell_height, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_map_set_merge_rasterizer_cell_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName("map_set_merge_rasterizer_cell_scale")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1794382983)!
            }
            
        }
        
    }()
    
    /// Set the map's internal merge rasterizer cell scale used to control merging sensitivity.
    public static func mapSetMergeRasterizerCellScale(map: RID, scale: Double) {
        withUnsafePointer(to: map.content) { pArg0 in
            withUnsafePointer(to: scale) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_map_set_merge_rasterizer_cell_scale, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_map_get_merge_rasterizer_cell_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName("map_get_merge_rasterizer_cell_scale")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 866169185)!
            }
            
        }
        
    }()
    
    /// Returns map's internal merge rasterizer cell scale.
    public static func mapGetMergeRasterizerCellScale(map: RID) -> Double {
        var _result: Double = 0.0
        withUnsafePointer(to: map.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_map_get_merge_rasterizer_cell_scale, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_map_set_use_edge_connections: GDExtensionMethodBindPtr = {
        let methodName = StringName("map_set_use_edge_connections")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1265174801)!
            }
            
        }
        
    }()
    
    /// Set the navigation `map` edge connection use. If `enabled` is `true`, the navigation map allows navigation regions to use edge connections to connect with other navigation regions within proximity of the navigation map edge connection margin.
    public static func mapSetUseEdgeConnections(map: RID, enabled: Bool) {
        withUnsafePointer(to: map.content) { pArg0 in
            withUnsafePointer(to: enabled) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_map_set_use_edge_connections, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_map_get_use_edge_connections: GDExtensionMethodBindPtr = {
        let methodName = StringName("map_get_use_edge_connections")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 4155700596)!
            }
            
        }
        
    }()
    
    /// Returns true if the navigation `map` allows navigation regions to use edge connections to connect with other navigation regions within proximity of the navigation map edge connection margin.
    public static func mapGetUseEdgeConnections(map: RID) -> Bool {
        var _result: Bool = false
        withUnsafePointer(to: map.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_map_get_use_edge_connections, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_map_set_edge_connection_margin: GDExtensionMethodBindPtr = {
        let methodName = StringName("map_set_edge_connection_margin")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1794382983)!
            }
            
        }
        
    }()
    
    /// Set the map edge connection margin used to weld the compatible region edges.
    public static func mapSetEdgeConnectionMargin(map: RID, margin: Double) {
        withUnsafePointer(to: map.content) { pArg0 in
            withUnsafePointer(to: margin) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_map_set_edge_connection_margin, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_map_get_edge_connection_margin: GDExtensionMethodBindPtr = {
        let methodName = StringName("map_get_edge_connection_margin")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 866169185)!
            }
            
        }
        
    }()
    
    /// Returns the edge connection margin of the map. This distance is the minimum vertex distance needed to connect two edges from different regions.
    public static func mapGetEdgeConnectionMargin(map: RID) -> Double {
        var _result: Double = 0.0
        withUnsafePointer(to: map.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_map_get_edge_connection_margin, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_map_set_link_connection_radius: GDExtensionMethodBindPtr = {
        let methodName = StringName("map_set_link_connection_radius")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1794382983)!
            }
            
        }
        
    }()
    
    /// Set the map's link connection radius used to connect links to navigation polygons.
    public static func mapSetLinkConnectionRadius(map: RID, radius: Double) {
        withUnsafePointer(to: map.content) { pArg0 in
            withUnsafePointer(to: radius) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_map_set_link_connection_radius, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_map_get_link_connection_radius: GDExtensionMethodBindPtr = {
        let methodName = StringName("map_get_link_connection_radius")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 866169185)!
            }
            
        }
        
    }()
    
    /// Returns the link connection radius of the map. This distance is the maximum range any link will search for navigation mesh polygons to connect to.
    public static func mapGetLinkConnectionRadius(map: RID) -> Double {
        var _result: Double = 0.0
        withUnsafePointer(to: map.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_map_get_link_connection_radius, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_map_get_path: GDExtensionMethodBindPtr = {
        let methodName = StringName("map_get_path")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1187418690)!
            }
            
        }
        
    }()
    
    /// Returns the navigation path to reach the destination from the origin. `navigationLayers` is a bitmask of all region navigation layers that are allowed to be in the path.
    public static func mapGetPath(map: RID, origin: Vector3, destination: Vector3, optimize: Bool, navigationLayers: UInt32 = 1) -> PackedVector3Array {
        let _result: PackedVector3Array = PackedVector3Array ()
        withUnsafePointer(to: map.content) { pArg0 in
            withUnsafePointer(to: origin) { pArg1 in
                withUnsafePointer(to: destination) { pArg2 in
                    withUnsafePointer(to: optimize) { pArg3 in
                        withUnsafePointer(to: navigationLayers) { pArg4 in
                            withUnsafePointer(to: UnsafeRawPointersN5(pArg0, pArg1, pArg2, pArg3, pArg4)) { pArgs in
                                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 5) { pArgs in
                                    gi.object_method_bind_ptrcall(method_map_get_path, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result.content)
                                }
                                
                            }
                            
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_map_get_closest_point_to_segment: GDExtensionMethodBindPtr = {
        let methodName = StringName("map_get_closest_point_to_segment")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3830095642)!
            }
            
        }
        
    }()
    
    /// Returns the closest point between the navigation surface and the segment.
    public static func mapGetClosestPointToSegment(map: RID, start: Vector3, end: Vector3, useCollision: Bool = false) -> Vector3 {
        var _result: Vector3 = Vector3 ()
        withUnsafePointer(to: map.content) { pArg0 in
            withUnsafePointer(to: start) { pArg1 in
                withUnsafePointer(to: end) { pArg2 in
                    withUnsafePointer(to: useCollision) { pArg3 in
                        withUnsafePointer(to: UnsafeRawPointersN4(pArg0, pArg1, pArg2, pArg3)) { pArgs in
                            pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 4) { pArgs in
                                gi.object_method_bind_ptrcall(method_map_get_closest_point_to_segment, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                            }
                            
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_map_get_closest_point: GDExtensionMethodBindPtr = {
        let methodName = StringName("map_get_closest_point")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2056183332)!
            }
            
        }
        
    }()
    
    /// Returns the point closest to the provided `toPoint` on the navigation mesh surface.
    public static func mapGetClosestPoint(map: RID, toPoint: Vector3) -> Vector3 {
        var _result: Vector3 = Vector3 ()
        withUnsafePointer(to: map.content) { pArg0 in
            withUnsafePointer(to: toPoint) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_map_get_closest_point, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                    }
                    
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_map_get_closest_point_normal: GDExtensionMethodBindPtr = {
        let methodName = StringName("map_get_closest_point_normal")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2056183332)!
            }
            
        }
        
    }()
    
    /// Returns the normal for the point returned by ``mapGetClosestPoint(map:toPoint:)``.
    public static func mapGetClosestPointNormal(map: RID, toPoint: Vector3) -> Vector3 {
        var _result: Vector3 = Vector3 ()
        withUnsafePointer(to: map.content) { pArg0 in
            withUnsafePointer(to: toPoint) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_map_get_closest_point_normal, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                    }
                    
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_map_get_closest_point_owner: GDExtensionMethodBindPtr = {
        let methodName = StringName("map_get_closest_point_owner")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 553364610)!
            }
            
        }
        
    }()
    
    /// Returns the owner region RID for the point returned by ``mapGetClosestPoint(map:toPoint:)``.
    public static func mapGetClosestPointOwner(map: RID, toPoint: Vector3) -> RID {
        let _result: RID = RID ()
        withUnsafePointer(to: map.content) { pArg0 in
            withUnsafePointer(to: toPoint) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_map_get_closest_point_owner, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result.content)
                    }
                    
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_map_get_links: GDExtensionMethodBindPtr = {
        let methodName = StringName("map_get_links")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2684255073)!
            }
            
        }
        
    }()
    
    /// Returns all navigation link ``RID``s that are currently assigned to the requested navigation `map`.
    public static func mapGetLinks(map: RID) -> VariantCollection<RID> {
        var _result: Int64 = 0
        withUnsafePointer(to: map.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_map_get_links, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return VariantCollection<RID>(content: _result)
    }
    
    fileprivate static var method_map_get_regions: GDExtensionMethodBindPtr = {
        let methodName = StringName("map_get_regions")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2684255073)!
            }
            
        }
        
    }()
    
    /// Returns all navigation regions ``RID``s that are currently assigned to the requested navigation `map`.
    public static func mapGetRegions(map: RID) -> VariantCollection<RID> {
        var _result: Int64 = 0
        withUnsafePointer(to: map.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_map_get_regions, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return VariantCollection<RID>(content: _result)
    }
    
    fileprivate static var method_map_get_agents: GDExtensionMethodBindPtr = {
        let methodName = StringName("map_get_agents")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2684255073)!
            }
            
        }
        
    }()
    
    /// Returns all navigation agents ``RID``s that are currently assigned to the requested navigation `map`.
    public static func mapGetAgents(map: RID) -> VariantCollection<RID> {
        var _result: Int64 = 0
        withUnsafePointer(to: map.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_map_get_agents, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return VariantCollection<RID>(content: _result)
    }
    
    fileprivate static var method_map_get_obstacles: GDExtensionMethodBindPtr = {
        let methodName = StringName("map_get_obstacles")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2684255073)!
            }
            
        }
        
    }()
    
    /// Returns all navigation obstacle ``RID``s that are currently assigned to the requested navigation `map`.
    public static func mapGetObstacles(map: RID) -> VariantCollection<RID> {
        var _result: Int64 = 0
        withUnsafePointer(to: map.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_map_get_obstacles, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return VariantCollection<RID>(content: _result)
    }
    
    fileprivate static var method_map_force_update: GDExtensionMethodBindPtr = {
        let methodName = StringName("map_force_update")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2722037293)!
            }
            
        }
        
    }()
    
    /// This function immediately forces synchronization of the specified navigation `map` ``RID``. By default navigation maps are only synchronized at the end of each physics frame. This function can be used to immediately (re)calculate all the navigation meshes and region connections of the navigation map. This makes it possible to query a navigation path for a changed map immediately and in the same frame (multiple times if needed).
    /// 
    /// Due to technical restrictions the current NavigationServer command queue will be flushed. This means all already queued update commands for this physics frame will be executed, even those intended for other maps, regions and agents not part of the specified map. The expensive computation of the navigation meshes and region connections of a map will only be done for the specified map. Other maps will receive the normal synchronization at the end of the physics frame. Should the specified map receive changes after the forced update it will update again as well when the other maps receive their update.
    /// 
    /// Avoidance processing and dispatch of the `safe_velocity` signals is unaffected by this function and continues to happen for all maps and agents at the end of the physics frame.
    /// 
    /// > Note: With great power comes great responsibility. This function should only be used by users that really know what they are doing and have a good reason for it. Forcing an immediate update of a navigation map requires locking the NavigationServer and flushing the entire NavigationServer command queue. Not only can this severely impact the performance of a game but it can also introduce bugs if used inappropriately without much foresight.
    /// 
    public static func mapForceUpdate(map: RID) {
        withUnsafePointer(to: map.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_map_force_update, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_map_get_iteration_id: GDExtensionMethodBindPtr = {
        let methodName = StringName("map_get_iteration_id")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2198884583)!
            }
            
        }
        
    }()
    
    /// Returns the current iteration id of the navigation map. Every time the navigation map changes and synchronizes the iteration id increases. An iteration id of 0 means the navigation map has never synchronized.
    /// 
    /// > Note: The iteration id will wrap back to 1 after reaching its range limit.
    /// 
    public static func mapGetIterationId(map: RID) -> UInt32 {
        var _result: UInt32 = 0
        withUnsafePointer(to: map.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_map_get_iteration_id, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_map_get_random_point: GDExtensionMethodBindPtr = {
        let methodName = StringName("map_get_random_point")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 722801526)!
            }
            
        }
        
    }()
    
    /// Returns a random position picked from all map region polygons with matching `navigationLayers`.
    /// 
    /// If `uniformly` is `true`, all map regions, polygons, and faces are weighted by their surface area (slower).
    /// 
    /// If `uniformly` is `false`, just a random region and a random polygon are picked (faster).
    /// 
    public static func mapGetRandomPoint(map: RID, navigationLayers: UInt32, uniformly: Bool) -> Vector3 {
        var _result: Vector3 = Vector3 ()
        withUnsafePointer(to: map.content) { pArg0 in
            withUnsafePointer(to: navigationLayers) { pArg1 in
                withUnsafePointer(to: uniformly) { pArg2 in
                    withUnsafePointer(to: UnsafeRawPointersN3(pArg0, pArg1, pArg2)) { pArgs in
                        pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 3) { pArgs in
                            gi.object_method_bind_ptrcall(method_map_get_random_point, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_query_path: GDExtensionMethodBindPtr = {
        let methodName = StringName("query_path")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3415008901)!
            }
            
        }
        
    }()
    
    /// Queries a path in a given navigation map. Start and target position and other parameters are defined through ``NavigationPathQueryParameters3D``. Updates the provided ``NavigationPathQueryResult3D`` result object with the path among other results requested by the query.
    public static func queryPath(parameters: NavigationPathQueryParameters3D?, result: NavigationPathQueryResult3D?) {
        withUnsafePointer(to: parameters?.handle) { pArg0 in
            withUnsafePointer(to: result?.handle) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_query_path, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_region_create: GDExtensionMethodBindPtr = {
        let methodName = StringName("region_create")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 529393457)!
            }
            
        }
        
    }()
    
    /// Creates a new region.
    public static func regionCreate() -> RID {
        let _result: RID = RID ()
        gi.object_method_bind_ptrcall(method_region_create, UnsafeMutableRawPointer(mutating: shared.handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_region_set_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName("region_set_enabled")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1265174801)!
            }
            
        }
        
    }()
    
    /// If `enabled` is `true`, the specified `region` will contribute to its current navigation map.
    public static func regionSetEnabled(region: RID, enabled: Bool) {
        withUnsafePointer(to: region.content) { pArg0 in
            withUnsafePointer(to: enabled) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_region_set_enabled, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_region_get_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName("region_get_enabled")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 4155700596)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the specified `region` is enabled.
    public static func regionGetEnabled(region: RID) -> Bool {
        var _result: Bool = false
        withUnsafePointer(to: region.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_region_get_enabled, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_region_set_use_edge_connections: GDExtensionMethodBindPtr = {
        let methodName = StringName("region_set_use_edge_connections")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1265174801)!
            }
            
        }
        
    }()
    
    /// If `enabled` is `true`, the navigation `region` will use edge connections to connect with other navigation regions within proximity of the navigation map edge connection margin.
    public static func regionSetUseEdgeConnections(region: RID, enabled: Bool) {
        withUnsafePointer(to: region.content) { pArg0 in
            withUnsafePointer(to: enabled) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_region_set_use_edge_connections, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_region_get_use_edge_connections: GDExtensionMethodBindPtr = {
        let methodName = StringName("region_get_use_edge_connections")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 4155700596)!
            }
            
        }
        
    }()
    
    /// Returns true if the navigation `region` is set to use edge connections to connect with other navigation regions within proximity of the navigation map edge connection margin.
    public static func regionGetUseEdgeConnections(region: RID) -> Bool {
        var _result: Bool = false
        withUnsafePointer(to: region.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_region_get_use_edge_connections, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_region_set_enter_cost: GDExtensionMethodBindPtr = {
        let methodName = StringName("region_set_enter_cost")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1794382983)!
            }
            
        }
        
    }()
    
    /// Sets the `enterCost` for this `region`.
    public static func regionSetEnterCost(region: RID, enterCost: Double) {
        withUnsafePointer(to: region.content) { pArg0 in
            withUnsafePointer(to: enterCost) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_region_set_enter_cost, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_region_get_enter_cost: GDExtensionMethodBindPtr = {
        let methodName = StringName("region_get_enter_cost")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 866169185)!
            }
            
        }
        
    }()
    
    /// Returns the enter cost of this `region`.
    public static func regionGetEnterCost(region: RID) -> Double {
        var _result: Double = 0.0
        withUnsafePointer(to: region.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_region_get_enter_cost, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_region_set_travel_cost: GDExtensionMethodBindPtr = {
        let methodName = StringName("region_set_travel_cost")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1794382983)!
            }
            
        }
        
    }()
    
    /// Sets the `travelCost` for this `region`.
    public static func regionSetTravelCost(region: RID, travelCost: Double) {
        withUnsafePointer(to: region.content) { pArg0 in
            withUnsafePointer(to: travelCost) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_region_set_travel_cost, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_region_get_travel_cost: GDExtensionMethodBindPtr = {
        let methodName = StringName("region_get_travel_cost")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 866169185)!
            }
            
        }
        
    }()
    
    /// Returns the travel cost of this `region`.
    public static func regionGetTravelCost(region: RID) -> Double {
        var _result: Double = 0.0
        withUnsafePointer(to: region.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_region_get_travel_cost, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_region_set_owner_id: GDExtensionMethodBindPtr = {
        let methodName = StringName("region_set_owner_id")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3411492887)!
            }
            
        }
        
    }()
    
    /// Set the `ObjectID` of the object which manages this region.
    public static func regionSetOwnerId(region: RID, ownerId: UInt) {
        withUnsafePointer(to: region.content) { pArg0 in
            withUnsafePointer(to: ownerId) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_region_set_owner_id, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_region_get_owner_id: GDExtensionMethodBindPtr = {
        let methodName = StringName("region_get_owner_id")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2198884583)!
            }
            
        }
        
    }()
    
    /// Returns the `ObjectID` of the object which manages this region.
    public static func regionGetOwnerId(region: RID) -> UInt {
        var _result: UInt = 0
        withUnsafePointer(to: region.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_region_get_owner_id, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_region_owns_point: GDExtensionMethodBindPtr = {
        let methodName = StringName("region_owns_point")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2360011153)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the provided `point` in world space is currently owned by the provided navigation `region`. Owned in this context means that one of the region's navigation mesh polygon faces has a possible position at the closest distance to this point compared to all other navigation meshes from other navigation regions that are also registered on the navigation map of the provided region.
    /// 
    /// If multiple navigation meshes have positions at equal distance the navigation region whose polygons are processed first wins the ownership. Polygons are processed in the same order that navigation regions were registered on the NavigationServer.
    /// 
    /// > Note: If navigation meshes from different navigation regions overlap (which should be avoided in general) the result might not be what is expected.
    /// 
    public static func regionOwnsPoint(region: RID, point: Vector3) -> Bool {
        var _result: Bool = false
        withUnsafePointer(to: region.content) { pArg0 in
            withUnsafePointer(to: point) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_region_owns_point, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                    }
                    
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_region_set_map: GDExtensionMethodBindPtr = {
        let methodName = StringName("region_set_map")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 395945892)!
            }
            
        }
        
    }()
    
    /// Sets the map for the region.
    public static func regionSetMap(region: RID, map: RID) {
        withUnsafePointer(to: region.content) { pArg0 in
            withUnsafePointer(to: map.content) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_region_set_map, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_region_get_map: GDExtensionMethodBindPtr = {
        let methodName = StringName("region_get_map")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3814569979)!
            }
            
        }
        
    }()
    
    /// Returns the navigation map ``RID`` the requested `region` is currently assigned to.
    public static func regionGetMap(region: RID) -> RID {
        let _result: RID = RID ()
        withUnsafePointer(to: region.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_region_get_map, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result.content)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_region_set_navigation_layers: GDExtensionMethodBindPtr = {
        let methodName = StringName("region_set_navigation_layers")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3411492887)!
            }
            
        }
        
    }()
    
    /// Set the region's navigation layers. This allows selecting regions from a path request (when using ``NavigationServer3D/mapGetPath(map:origin:destination:optimize:navigationLayers:)``).
    public static func regionSetNavigationLayers(region: RID, navigationLayers: UInt32) {
        withUnsafePointer(to: region.content) { pArg0 in
            withUnsafePointer(to: navigationLayers) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_region_set_navigation_layers, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_region_get_navigation_layers: GDExtensionMethodBindPtr = {
        let methodName = StringName("region_get_navigation_layers")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2198884583)!
            }
            
        }
        
    }()
    
    /// Returns the region's navigation layers.
    public static func regionGetNavigationLayers(region: RID) -> UInt32 {
        var _result: UInt32 = 0
        withUnsafePointer(to: region.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_region_get_navigation_layers, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_region_set_transform: GDExtensionMethodBindPtr = {
        let methodName = StringName("region_set_transform")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3935195649)!
            }
            
        }
        
    }()
    
    /// Sets the global transformation for the region.
    public static func regionSetTransform(region: RID, transform: Transform3D) {
        withUnsafePointer(to: region.content) { pArg0 in
            withUnsafePointer(to: transform) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_region_set_transform, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_region_get_transform: GDExtensionMethodBindPtr = {
        let methodName = StringName("region_get_transform")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1128465797)!
            }
            
        }
        
    }()
    
    /// Returns the global transformation of this `region`.
    public static func regionGetTransform(region: RID) -> Transform3D {
        var _result: Transform3D = Transform3D ()
        withUnsafePointer(to: region.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_region_get_transform, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_region_set_navigation_mesh: GDExtensionMethodBindPtr = {
        let methodName = StringName("region_set_navigation_mesh")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2764952978)!
            }
            
        }
        
    }()
    
    /// Sets the navigation mesh for the region.
    public static func regionSetNavigationMesh(region: RID, navigationMesh: NavigationMesh?) {
        withUnsafePointer(to: region.content) { pArg0 in
            withUnsafePointer(to: navigationMesh?.handle) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_region_set_navigation_mesh, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_region_bake_navigation_mesh: GDExtensionMethodBindPtr = {
        let methodName = StringName("region_bake_navigation_mesh")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1401173477)!
            }
            
        }
        
    }()
    
    /// Bakes the `navigationMesh` with bake source geometry collected starting from the `rootNode`.
    public static func regionBakeNavigationMesh(_ navigationMesh: NavigationMesh?, rootNode: Node?) {
        withUnsafePointer(to: navigationMesh?.handle) { pArg0 in
            withUnsafePointer(to: rootNode?.handle) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_region_bake_navigation_mesh, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_region_get_connections_count: GDExtensionMethodBindPtr = {
        let methodName = StringName("region_get_connections_count")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2198884583)!
            }
            
        }
        
    }()
    
    /// Returns how many connections this `region` has with other regions in the map.
    public static func regionGetConnectionsCount(region: RID) -> Int32 {
        var _result: Int32 = 0
        withUnsafePointer(to: region.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_region_get_connections_count, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_region_get_connection_pathway_start: GDExtensionMethodBindPtr = {
        let methodName = StringName("region_get_connection_pathway_start")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3440143363)!
            }
            
        }
        
    }()
    
    /// Returns the starting point of a connection door. `connection` is an index between 0 and the return value of ``regionGetConnectionsCount(region:)``.
    public static func regionGetConnectionPathwayStart(region: RID, connection: Int32) -> Vector3 {
        var _result: Vector3 = Vector3 ()
        withUnsafePointer(to: region.content) { pArg0 in
            withUnsafePointer(to: connection) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_region_get_connection_pathway_start, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                    }
                    
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_region_get_connection_pathway_end: GDExtensionMethodBindPtr = {
        let methodName = StringName("region_get_connection_pathway_end")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3440143363)!
            }
            
        }
        
    }()
    
    /// Returns the ending point of a connection door. `connection` is an index between 0 and the return value of ``regionGetConnectionsCount(region:)``.
    public static func regionGetConnectionPathwayEnd(region: RID, connection: Int32) -> Vector3 {
        var _result: Vector3 = Vector3 ()
        withUnsafePointer(to: region.content) { pArg0 in
            withUnsafePointer(to: connection) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_region_get_connection_pathway_end, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                    }
                    
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_region_get_random_point: GDExtensionMethodBindPtr = {
        let methodName = StringName("region_get_random_point")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 722801526)!
            }
            
        }
        
    }()
    
    /// Returns a random position picked from all region polygons with matching `navigationLayers`.
    /// 
    /// If `uniformly` is `true`, all region polygons and faces are weighted by their surface area (slower).
    /// 
    /// If `uniformly` is `false`, just a random polygon and face is picked (faster).
    /// 
    public static func regionGetRandomPoint(region: RID, navigationLayers: UInt32, uniformly: Bool) -> Vector3 {
        var _result: Vector3 = Vector3 ()
        withUnsafePointer(to: region.content) { pArg0 in
            withUnsafePointer(to: navigationLayers) { pArg1 in
                withUnsafePointer(to: uniformly) { pArg2 in
                    withUnsafePointer(to: UnsafeRawPointersN3(pArg0, pArg1, pArg2)) { pArgs in
                        pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 3) { pArgs in
                            gi.object_method_bind_ptrcall(method_region_get_random_point, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_link_create: GDExtensionMethodBindPtr = {
        let methodName = StringName("link_create")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 529393457)!
            }
            
        }
        
    }()
    
    /// Create a new link between two positions on a map.
    public static func linkCreate() -> RID {
        let _result: RID = RID ()
        gi.object_method_bind_ptrcall(method_link_create, UnsafeMutableRawPointer(mutating: shared.handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_link_set_map: GDExtensionMethodBindPtr = {
        let methodName = StringName("link_set_map")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 395945892)!
            }
            
        }
        
    }()
    
    /// Sets the navigation map ``RID`` for the link.
    public static func linkSetMap(link: RID, map: RID) {
        withUnsafePointer(to: link.content) { pArg0 in
            withUnsafePointer(to: map.content) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_link_set_map, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_link_get_map: GDExtensionMethodBindPtr = {
        let methodName = StringName("link_get_map")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3814569979)!
            }
            
        }
        
    }()
    
    /// Returns the navigation map ``RID`` the requested `link` is currently assigned to.
    public static func linkGetMap(link: RID) -> RID {
        let _result: RID = RID ()
        withUnsafePointer(to: link.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_link_get_map, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result.content)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_link_set_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName("link_set_enabled")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1265174801)!
            }
            
        }
        
    }()
    
    /// If `enabled` is `true`, the specified `link` will contribute to its current navigation map.
    public static func linkSetEnabled(link: RID, enabled: Bool) {
        withUnsafePointer(to: link.content) { pArg0 in
            withUnsafePointer(to: enabled) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_link_set_enabled, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_link_get_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName("link_get_enabled")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 4155700596)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the specified `link` is enabled.
    public static func linkGetEnabled(link: RID) -> Bool {
        var _result: Bool = false
        withUnsafePointer(to: link.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_link_get_enabled, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_link_set_bidirectional: GDExtensionMethodBindPtr = {
        let methodName = StringName("link_set_bidirectional")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1265174801)!
            }
            
        }
        
    }()
    
    /// Sets whether this `link` can be travelled in both directions.
    public static func linkSetBidirectional(link: RID, bidirectional: Bool) {
        withUnsafePointer(to: link.content) { pArg0 in
            withUnsafePointer(to: bidirectional) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_link_set_bidirectional, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_link_is_bidirectional: GDExtensionMethodBindPtr = {
        let methodName = StringName("link_is_bidirectional")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 4155700596)!
            }
            
        }
        
    }()
    
    /// Returns whether this `link` can be travelled in both directions.
    public static func linkIsBidirectional(link: RID) -> Bool {
        var _result: Bool = false
        withUnsafePointer(to: link.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_link_is_bidirectional, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_link_set_navigation_layers: GDExtensionMethodBindPtr = {
        let methodName = StringName("link_set_navigation_layers")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3411492887)!
            }
            
        }
        
    }()
    
    /// Set the links's navigation layers. This allows selecting links from a path request (when using ``NavigationServer3D/mapGetPath(map:origin:destination:optimize:navigationLayers:)``).
    public static func linkSetNavigationLayers(link: RID, navigationLayers: UInt32) {
        withUnsafePointer(to: link.content) { pArg0 in
            withUnsafePointer(to: navigationLayers) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_link_set_navigation_layers, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_link_get_navigation_layers: GDExtensionMethodBindPtr = {
        let methodName = StringName("link_get_navigation_layers")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2198884583)!
            }
            
        }
        
    }()
    
    /// Returns the navigation layers for this `link`.
    public static func linkGetNavigationLayers(link: RID) -> UInt32 {
        var _result: UInt32 = 0
        withUnsafePointer(to: link.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_link_get_navigation_layers, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_link_set_start_position: GDExtensionMethodBindPtr = {
        let methodName = StringName("link_set_start_position")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3227306858)!
            }
            
        }
        
    }()
    
    /// Sets the entry position for this `link`.
    public static func linkSetStartPosition(link: RID, position: Vector3) {
        withUnsafePointer(to: link.content) { pArg0 in
            withUnsafePointer(to: position) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_link_set_start_position, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_link_get_start_position: GDExtensionMethodBindPtr = {
        let methodName = StringName("link_get_start_position")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 531438156)!
            }
            
        }
        
    }()
    
    /// Returns the starting position of this `link`.
    public static func linkGetStartPosition(link: RID) -> Vector3 {
        var _result: Vector3 = Vector3 ()
        withUnsafePointer(to: link.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_link_get_start_position, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_link_set_end_position: GDExtensionMethodBindPtr = {
        let methodName = StringName("link_set_end_position")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3227306858)!
            }
            
        }
        
    }()
    
    /// Sets the exit position for the `link`.
    public static func linkSetEndPosition(link: RID, position: Vector3) {
        withUnsafePointer(to: link.content) { pArg0 in
            withUnsafePointer(to: position) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_link_set_end_position, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_link_get_end_position: GDExtensionMethodBindPtr = {
        let methodName = StringName("link_get_end_position")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 531438156)!
            }
            
        }
        
    }()
    
    /// Returns the ending position of this `link`.
    public static func linkGetEndPosition(link: RID) -> Vector3 {
        var _result: Vector3 = Vector3 ()
        withUnsafePointer(to: link.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_link_get_end_position, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_link_set_enter_cost: GDExtensionMethodBindPtr = {
        let methodName = StringName("link_set_enter_cost")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1794382983)!
            }
            
        }
        
    }()
    
    /// Sets the `enterCost` for this `link`.
    public static func linkSetEnterCost(link: RID, enterCost: Double) {
        withUnsafePointer(to: link.content) { pArg0 in
            withUnsafePointer(to: enterCost) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_link_set_enter_cost, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_link_get_enter_cost: GDExtensionMethodBindPtr = {
        let methodName = StringName("link_get_enter_cost")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 866169185)!
            }
            
        }
        
    }()
    
    /// Returns the enter cost of this `link`.
    public static func linkGetEnterCost(link: RID) -> Double {
        var _result: Double = 0.0
        withUnsafePointer(to: link.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_link_get_enter_cost, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_link_set_travel_cost: GDExtensionMethodBindPtr = {
        let methodName = StringName("link_set_travel_cost")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1794382983)!
            }
            
        }
        
    }()
    
    /// Sets the `travelCost` for this `link`.
    public static func linkSetTravelCost(link: RID, travelCost: Double) {
        withUnsafePointer(to: link.content) { pArg0 in
            withUnsafePointer(to: travelCost) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_link_set_travel_cost, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_link_get_travel_cost: GDExtensionMethodBindPtr = {
        let methodName = StringName("link_get_travel_cost")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 866169185)!
            }
            
        }
        
    }()
    
    /// Returns the travel cost of this `link`.
    public static func linkGetTravelCost(link: RID) -> Double {
        var _result: Double = 0.0
        withUnsafePointer(to: link.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_link_get_travel_cost, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_link_set_owner_id: GDExtensionMethodBindPtr = {
        let methodName = StringName("link_set_owner_id")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3411492887)!
            }
            
        }
        
    }()
    
    /// Set the `ObjectID` of the object which manages this link.
    public static func linkSetOwnerId(link: RID, ownerId: UInt) {
        withUnsafePointer(to: link.content) { pArg0 in
            withUnsafePointer(to: ownerId) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_link_set_owner_id, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_link_get_owner_id: GDExtensionMethodBindPtr = {
        let methodName = StringName("link_get_owner_id")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2198884583)!
            }
            
        }
        
    }()
    
    /// Returns the `ObjectID` of the object which manages this link.
    public static func linkGetOwnerId(link: RID) -> UInt {
        var _result: UInt = 0
        withUnsafePointer(to: link.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_link_get_owner_id, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_agent_create: GDExtensionMethodBindPtr = {
        let methodName = StringName("agent_create")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 529393457)!
            }
            
        }
        
    }()
    
    /// Creates the agent.
    public static func agentCreate() -> RID {
        let _result: RID = RID ()
        gi.object_method_bind_ptrcall(method_agent_create, UnsafeMutableRawPointer(mutating: shared.handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_agent_set_avoidance_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName("agent_set_avoidance_enabled")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1265174801)!
            }
            
        }
        
    }()
    
    /// If `enabled` is `true`, the provided `agent` calculates avoidance.
    public static func agentSetAvoidanceEnabled(agent: RID, enabled: Bool) {
        withUnsafePointer(to: agent.content) { pArg0 in
            withUnsafePointer(to: enabled) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_agent_set_avoidance_enabled, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_agent_get_avoidance_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName("agent_get_avoidance_enabled")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 4155700596)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the provided `agent` has avoidance enabled.
    public static func agentGetAvoidanceEnabled(agent: RID) -> Bool {
        var _result: Bool = false
        withUnsafePointer(to: agent.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_agent_get_avoidance_enabled, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_agent_set_use_3d_avoidance: GDExtensionMethodBindPtr = {
        let methodName = StringName("agent_set_use_3d_avoidance")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1265174801)!
            }
            
        }
        
    }()
    
    /// Sets if the agent uses the 2D avoidance or the 3D avoidance while avoidance is enabled.
    /// 
    /// If `true` the agent calculates avoidance velocities in 3D for the xyz-axis, e.g. for games that take place in air, underwater or space. The 3D using agent only avoids other 3D avoidance using agent's. The 3D using agent only reacts to radius based avoidance obstacles. The 3D using agent ignores any vertices based obstacles. The 3D using agent only avoids other 3D using agent's.
    /// 
    /// If `false` the agent calculates avoidance velocities in 2D along the xz-axis ignoring the y-axis. The 2D using agent only avoids other 2D avoidance using agent's. The 2D using agent reacts to radius avoidance obstacles. The 2D using agent reacts to vertices based avoidance obstacles. The 2D using agent only avoids other 2D using agent's. 2D using agents will ignore other 2D using agents or obstacles that are below their current position or above their current position including the agents height in 2D avoidance.
    /// 
    public static func agentSetUse3dAvoidance(agent: RID, enabled: Bool) {
        withUnsafePointer(to: agent.content) { pArg0 in
            withUnsafePointer(to: enabled) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_agent_set_use_3d_avoidance, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_agent_get_use_3d_avoidance: GDExtensionMethodBindPtr = {
        let methodName = StringName("agent_get_use_3d_avoidance")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 4155700596)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the provided `agent` uses avoidance in 3D space Vector3(x,y,z) instead of horizontal 2D Vector2(x,y) / Vector3(x,0.0,z).
    public static func agentGetUse3dAvoidance(agent: RID) -> Bool {
        var _result: Bool = false
        withUnsafePointer(to: agent.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_agent_get_use_3d_avoidance, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_agent_set_map: GDExtensionMethodBindPtr = {
        let methodName = StringName("agent_set_map")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 395945892)!
            }
            
        }
        
    }()
    
    /// Puts the agent in the map.
    public static func agentSetMap(agent: RID, map: RID) {
        withUnsafePointer(to: agent.content) { pArg0 in
            withUnsafePointer(to: map.content) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_agent_set_map, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_agent_get_map: GDExtensionMethodBindPtr = {
        let methodName = StringName("agent_get_map")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3814569979)!
            }
            
        }
        
    }()
    
    /// Returns the navigation map ``RID`` the requested `agent` is currently assigned to.
    public static func agentGetMap(agent: RID) -> RID {
        let _result: RID = RID ()
        withUnsafePointer(to: agent.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_agent_get_map, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result.content)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_agent_set_paused: GDExtensionMethodBindPtr = {
        let methodName = StringName("agent_set_paused")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1265174801)!
            }
            
        }
        
    }()
    
    /// If `paused` is true the specified `agent` will not be processed, e.g. calculate avoidance velocities or receive avoidance callbacks.
    public static func agentSetPaused(agent: RID, paused: Bool) {
        withUnsafePointer(to: agent.content) { pArg0 in
            withUnsafePointer(to: paused) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_agent_set_paused, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_agent_get_paused: GDExtensionMethodBindPtr = {
        let methodName = StringName("agent_get_paused")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 4155700596)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the specified `agent` is paused.
    public static func agentGetPaused(agent: RID) -> Bool {
        var _result: Bool = false
        withUnsafePointer(to: agent.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_agent_get_paused, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_agent_set_neighbor_distance: GDExtensionMethodBindPtr = {
        let methodName = StringName("agent_set_neighbor_distance")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1794382983)!
            }
            
        }
        
    }()
    
    /// Sets the maximum distance to other agents this agent takes into account in the navigation. The larger this number, the longer the running time of the simulation. If the number is too low, the simulation will not be safe.
    public static func agentSetNeighborDistance(agent: RID, distance: Double) {
        withUnsafePointer(to: agent.content) { pArg0 in
            withUnsafePointer(to: distance) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_agent_set_neighbor_distance, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_agent_get_neighbor_distance: GDExtensionMethodBindPtr = {
        let methodName = StringName("agent_get_neighbor_distance")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 866169185)!
            }
            
        }
        
    }()
    
    /// Returns the maximum distance to other agents the specified `agent` takes into account in the navigation.
    public static func agentGetNeighborDistance(agent: RID) -> Double {
        var _result: Double = 0.0
        withUnsafePointer(to: agent.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_agent_get_neighbor_distance, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_agent_set_max_neighbors: GDExtensionMethodBindPtr = {
        let methodName = StringName("agent_set_max_neighbors")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3411492887)!
            }
            
        }
        
    }()
    
    /// Sets the maximum number of other agents the agent takes into account in the navigation. The larger this number, the longer the running time of the simulation. If the number is too low, the simulation will not be safe.
    public static func agentSetMaxNeighbors(agent: RID, count: Int32) {
        withUnsafePointer(to: agent.content) { pArg0 in
            withUnsafePointer(to: count) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_agent_set_max_neighbors, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_agent_get_max_neighbors: GDExtensionMethodBindPtr = {
        let methodName = StringName("agent_get_max_neighbors")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2198884583)!
            }
            
        }
        
    }()
    
    /// Returns the maximum number of other agents the specified `agent` takes into account in the navigation.
    public static func agentGetMaxNeighbors(agent: RID) -> Int32 {
        var _result: Int32 = 0
        withUnsafePointer(to: agent.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_agent_get_max_neighbors, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_agent_set_time_horizon_agents: GDExtensionMethodBindPtr = {
        let methodName = StringName("agent_set_time_horizon_agents")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1794382983)!
            }
            
        }
        
    }()
    
    /// The minimal amount of time for which the agent's velocities that are computed by the simulation are safe with respect to other agents. The larger this number, the sooner this agent will respond to the presence of other agents, but the less freedom this agent has in choosing its velocities. A too high value will slow down agents movement considerably. Must be positive.
    public static func agentSetTimeHorizonAgents(agent: RID, timeHorizon: Double) {
        withUnsafePointer(to: agent.content) { pArg0 in
            withUnsafePointer(to: timeHorizon) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_agent_set_time_horizon_agents, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_agent_get_time_horizon_agents: GDExtensionMethodBindPtr = {
        let methodName = StringName("agent_get_time_horizon_agents")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 866169185)!
            }
            
        }
        
    }()
    
    /// Returns the minimal amount of time for which the specified `agent`'s velocities that are computed by the simulation are safe with respect to other agents.
    public static func agentGetTimeHorizonAgents(agent: RID) -> Double {
        var _result: Double = 0.0
        withUnsafePointer(to: agent.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_agent_get_time_horizon_agents, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_agent_set_time_horizon_obstacles: GDExtensionMethodBindPtr = {
        let methodName = StringName("agent_set_time_horizon_obstacles")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1794382983)!
            }
            
        }
        
    }()
    
    /// The minimal amount of time for which the agent's velocities that are computed by the simulation are safe with respect to static avoidance obstacles. The larger this number, the sooner this agent will respond to the presence of static avoidance obstacles, but the less freedom this agent has in choosing its velocities. A too high value will slow down agents movement considerably. Must be positive.
    public static func agentSetTimeHorizonObstacles(agent: RID, timeHorizon: Double) {
        withUnsafePointer(to: agent.content) { pArg0 in
            withUnsafePointer(to: timeHorizon) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_agent_set_time_horizon_obstacles, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_agent_get_time_horizon_obstacles: GDExtensionMethodBindPtr = {
        let methodName = StringName("agent_get_time_horizon_obstacles")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 866169185)!
            }
            
        }
        
    }()
    
    /// Returns the minimal amount of time for which the specified `agent`'s velocities that are computed by the simulation are safe with respect to static avoidance obstacles.
    public static func agentGetTimeHorizonObstacles(agent: RID) -> Double {
        var _result: Double = 0.0
        withUnsafePointer(to: agent.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_agent_get_time_horizon_obstacles, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_agent_set_radius: GDExtensionMethodBindPtr = {
        let methodName = StringName("agent_set_radius")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1794382983)!
            }
            
        }
        
    }()
    
    /// Sets the radius of the agent.
    public static func agentSetRadius(agent: RID, radius: Double) {
        withUnsafePointer(to: agent.content) { pArg0 in
            withUnsafePointer(to: radius) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_agent_set_radius, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_agent_get_radius: GDExtensionMethodBindPtr = {
        let methodName = StringName("agent_get_radius")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 866169185)!
            }
            
        }
        
    }()
    
    /// Returns the radius of the specified `agent`.
    public static func agentGetRadius(agent: RID) -> Double {
        var _result: Double = 0.0
        withUnsafePointer(to: agent.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_agent_get_radius, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_agent_set_height: GDExtensionMethodBindPtr = {
        let methodName = StringName("agent_set_height")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1794382983)!
            }
            
        }
        
    }()
    
    /// Updates the provided `agent` `height`.
    public static func agentSetHeight(agent: RID, height: Double) {
        withUnsafePointer(to: agent.content) { pArg0 in
            withUnsafePointer(to: height) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_agent_set_height, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_agent_get_height: GDExtensionMethodBindPtr = {
        let methodName = StringName("agent_get_height")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 866169185)!
            }
            
        }
        
    }()
    
    /// Returns the `height` of the specified `agent`.
    public static func agentGetHeight(agent: RID) -> Double {
        var _result: Double = 0.0
        withUnsafePointer(to: agent.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_agent_get_height, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_agent_set_max_speed: GDExtensionMethodBindPtr = {
        let methodName = StringName("agent_set_max_speed")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1794382983)!
            }
            
        }
        
    }()
    
    /// Sets the maximum speed of the agent. Must be positive.
    public static func agentSetMaxSpeed(agent: RID, maxSpeed: Double) {
        withUnsafePointer(to: agent.content) { pArg0 in
            withUnsafePointer(to: maxSpeed) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_agent_set_max_speed, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_agent_get_max_speed: GDExtensionMethodBindPtr = {
        let methodName = StringName("agent_get_max_speed")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 866169185)!
            }
            
        }
        
    }()
    
    /// Returns the maximum speed of the specified `agent`.
    public static func agentGetMaxSpeed(agent: RID) -> Double {
        var _result: Double = 0.0
        withUnsafePointer(to: agent.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_agent_get_max_speed, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_agent_set_velocity_forced: GDExtensionMethodBindPtr = {
        let methodName = StringName("agent_set_velocity_forced")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3227306858)!
            }
            
        }
        
    }()
    
    /// Replaces the internal velocity in the collision avoidance simulation with `velocity` for the specified `agent`. When an agent is teleported to a new position this function should be used in the same frame. If called frequently this function can get agents stuck.
    public static func agentSetVelocityForced(agent: RID, velocity: Vector3) {
        withUnsafePointer(to: agent.content) { pArg0 in
            withUnsafePointer(to: velocity) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_agent_set_velocity_forced, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_agent_set_velocity: GDExtensionMethodBindPtr = {
        let methodName = StringName("agent_set_velocity")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3227306858)!
            }
            
        }
        
    }()
    
    /// Sets `velocity` as the new wanted velocity for the specified `agent`. The avoidance simulation will try to fulfill this velocity if possible but will modify it to avoid collision with other agent's and obstacles. When an agent is teleported to a new position use ``agentSetVelocityForced(agent:velocity:)`` as well to reset the internal simulation velocity.
    public static func agentSetVelocity(agent: RID, velocity: Vector3) {
        withUnsafePointer(to: agent.content) { pArg0 in
            withUnsafePointer(to: velocity) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_agent_set_velocity, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_agent_get_velocity: GDExtensionMethodBindPtr = {
        let methodName = StringName("agent_get_velocity")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 531438156)!
            }
            
        }
        
    }()
    
    /// Returns the velocity of the specified `agent`.
    public static func agentGetVelocity(agent: RID) -> Vector3 {
        var _result: Vector3 = Vector3 ()
        withUnsafePointer(to: agent.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_agent_get_velocity, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_agent_set_position: GDExtensionMethodBindPtr = {
        let methodName = StringName("agent_set_position")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3227306858)!
            }
            
        }
        
    }()
    
    /// Sets the position of the agent in world space.
    public static func agentSetPosition(agent: RID, position: Vector3) {
        withUnsafePointer(to: agent.content) { pArg0 in
            withUnsafePointer(to: position) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_agent_set_position, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_agent_get_position: GDExtensionMethodBindPtr = {
        let methodName = StringName("agent_get_position")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 531438156)!
            }
            
        }
        
    }()
    
    /// Returns the position of the specified `agent` in world space.
    public static func agentGetPosition(agent: RID) -> Vector3 {
        var _result: Vector3 = Vector3 ()
        withUnsafePointer(to: agent.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_agent_get_position, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_agent_is_map_changed: GDExtensionMethodBindPtr = {
        let methodName = StringName("agent_is_map_changed")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 4155700596)!
            }
            
        }
        
    }()
    
    /// Returns true if the map got changed the previous frame.
    public static func agentIsMapChanged(agent: RID) -> Bool {
        var _result: Bool = false
        withUnsafePointer(to: agent.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_agent_is_map_changed, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_agent_set_avoidance_callback: GDExtensionMethodBindPtr = {
        let methodName = StringName("agent_set_avoidance_callback")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3379118538)!
            }
            
        }
        
    }()
    
    /// Sets the callback ``Callable`` that gets called after each avoidance processing step for the `agent`. The calculated `safe_velocity` will be dispatched with a signal to the object just before the physics calculations.
    /// 
    /// > Note: Created callbacks are always processed independently of the SceneTree state as long as the agent is on a navigation map and not freed. To disable the dispatch of a callback from an agent use ``agentSetAvoidanceCallback(agent:callback:)`` again with an empty ``Callable``.
    /// 
    public static func agentSetAvoidanceCallback(agent: RID, callback: Callable) {
        withUnsafePointer(to: agent.content) { pArg0 in
            withUnsafePointer(to: callback.content) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_agent_set_avoidance_callback, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_agent_has_avoidance_callback: GDExtensionMethodBindPtr = {
        let methodName = StringName("agent_has_avoidance_callback")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 4155700596)!
            }
            
        }
        
    }()
    
    /// Return `true` if the specified `agent` has an avoidance callback.
    public static func agentHasAvoidanceCallback(agent: RID) -> Bool {
        var _result: Bool = false
        withUnsafePointer(to: agent.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_agent_has_avoidance_callback, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_agent_set_avoidance_layers: GDExtensionMethodBindPtr = {
        let methodName = StringName("agent_set_avoidance_layers")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3411492887)!
            }
            
        }
        
    }()
    
    /// Set the agent's `avoidance_layers` bitmask.
    public static func agentSetAvoidanceLayers(agent: RID, layers: UInt32) {
        withUnsafePointer(to: agent.content) { pArg0 in
            withUnsafePointer(to: layers) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_agent_set_avoidance_layers, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_agent_get_avoidance_layers: GDExtensionMethodBindPtr = {
        let methodName = StringName("agent_get_avoidance_layers")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2198884583)!
            }
            
        }
        
    }()
    
    /// Returns the `avoidance_layers` bitmask of the specified `agent`.
    public static func agentGetAvoidanceLayers(agent: RID) -> UInt32 {
        var _result: UInt32 = 0
        withUnsafePointer(to: agent.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_agent_get_avoidance_layers, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_agent_set_avoidance_mask: GDExtensionMethodBindPtr = {
        let methodName = StringName("agent_set_avoidance_mask")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3411492887)!
            }
            
        }
        
    }()
    
    /// Set the agent's `avoidance_mask` bitmask.
    public static func agentSetAvoidanceMask(agent: RID, mask: UInt32) {
        withUnsafePointer(to: agent.content) { pArg0 in
            withUnsafePointer(to: mask) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_agent_set_avoidance_mask, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_agent_get_avoidance_mask: GDExtensionMethodBindPtr = {
        let methodName = StringName("agent_get_avoidance_mask")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2198884583)!
            }
            
        }
        
    }()
    
    /// Returns the `avoidance_mask` bitmask of the specified `agent`.
    public static func agentGetAvoidanceMask(agent: RID) -> UInt32 {
        var _result: UInt32 = 0
        withUnsafePointer(to: agent.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_agent_get_avoidance_mask, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_agent_set_avoidance_priority: GDExtensionMethodBindPtr = {
        let methodName = StringName("agent_set_avoidance_priority")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1794382983)!
            }
            
        }
        
    }()
    
    /// Set the agent's `avoidance_priority` with a `priority` between 0.0 (lowest priority) to 1.0 (highest priority).
    /// 
    /// The specified `agent` does not adjust the velocity for other agents that would match the `avoidance_mask` but have a lower `avoidance_priority`. This in turn makes the other agents with lower priority adjust their velocities even more to avoid collision with this agent.
    /// 
    public static func agentSetAvoidancePriority(agent: RID, priority: Double) {
        withUnsafePointer(to: agent.content) { pArg0 in
            withUnsafePointer(to: priority) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_agent_set_avoidance_priority, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_agent_get_avoidance_priority: GDExtensionMethodBindPtr = {
        let methodName = StringName("agent_get_avoidance_priority")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 866169185)!
            }
            
        }
        
    }()
    
    /// Returns the `avoidance_priority` of the specified `agent`.
    public static func agentGetAvoidancePriority(agent: RID) -> Double {
        var _result: Double = 0.0
        withUnsafePointer(to: agent.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_agent_get_avoidance_priority, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_obstacle_create: GDExtensionMethodBindPtr = {
        let methodName = StringName("obstacle_create")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 529393457)!
            }
            
        }
        
    }()
    
    /// Creates a new obstacle.
    public static func obstacleCreate() -> RID {
        let _result: RID = RID ()
        gi.object_method_bind_ptrcall(method_obstacle_create, UnsafeMutableRawPointer(mutating: shared.handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_obstacle_set_avoidance_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName("obstacle_set_avoidance_enabled")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1265174801)!
            }
            
        }
        
    }()
    
    /// If `enabled` is `true`, the provided `obstacle` affects avoidance using agents.
    public static func obstacleSetAvoidanceEnabled(obstacle: RID, enabled: Bool) {
        withUnsafePointer(to: obstacle.content) { pArg0 in
            withUnsafePointer(to: enabled) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_obstacle_set_avoidance_enabled, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_obstacle_get_avoidance_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName("obstacle_get_avoidance_enabled")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 4155700596)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the provided `obstacle` has avoidance enabled.
    public static func obstacleGetAvoidanceEnabled(obstacle: RID) -> Bool {
        var _result: Bool = false
        withUnsafePointer(to: obstacle.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_obstacle_get_avoidance_enabled, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_obstacle_set_use_3d_avoidance: GDExtensionMethodBindPtr = {
        let methodName = StringName("obstacle_set_use_3d_avoidance")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1265174801)!
            }
            
        }
        
    }()
    
    /// Sets if the `obstacle` uses the 2D avoidance or the 3D avoidance while avoidance is enabled.
    public static func obstacleSetUse3dAvoidance(obstacle: RID, enabled: Bool) {
        withUnsafePointer(to: obstacle.content) { pArg0 in
            withUnsafePointer(to: enabled) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_obstacle_set_use_3d_avoidance, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_obstacle_get_use_3d_avoidance: GDExtensionMethodBindPtr = {
        let methodName = StringName("obstacle_get_use_3d_avoidance")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 4155700596)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the provided `obstacle` uses avoidance in 3D space Vector3(x,y,z) instead of horizontal 2D Vector2(x,y) / Vector3(x,0.0,z).
    public static func obstacleGetUse3dAvoidance(obstacle: RID) -> Bool {
        var _result: Bool = false
        withUnsafePointer(to: obstacle.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_obstacle_get_use_3d_avoidance, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_obstacle_set_map: GDExtensionMethodBindPtr = {
        let methodName = StringName("obstacle_set_map")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 395945892)!
            }
            
        }
        
    }()
    
    /// Assigns the `obstacle` to a navigation map.
    public static func obstacleSetMap(obstacle: RID, map: RID) {
        withUnsafePointer(to: obstacle.content) { pArg0 in
            withUnsafePointer(to: map.content) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_obstacle_set_map, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_obstacle_get_map: GDExtensionMethodBindPtr = {
        let methodName = StringName("obstacle_get_map")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3814569979)!
            }
            
        }
        
    }()
    
    /// Returns the navigation map ``RID`` the requested `obstacle` is currently assigned to.
    public static func obstacleGetMap(obstacle: RID) -> RID {
        let _result: RID = RID ()
        withUnsafePointer(to: obstacle.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_obstacle_get_map, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result.content)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_obstacle_set_paused: GDExtensionMethodBindPtr = {
        let methodName = StringName("obstacle_set_paused")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1265174801)!
            }
            
        }
        
    }()
    
    /// If `paused` is true the specified `obstacle` will not be processed, e.g. affect avoidance velocities.
    public static func obstacleSetPaused(obstacle: RID, paused: Bool) {
        withUnsafePointer(to: obstacle.content) { pArg0 in
            withUnsafePointer(to: paused) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_obstacle_set_paused, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_obstacle_get_paused: GDExtensionMethodBindPtr = {
        let methodName = StringName("obstacle_get_paused")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 4155700596)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the specified `obstacle` is paused.
    public static func obstacleGetPaused(obstacle: RID) -> Bool {
        var _result: Bool = false
        withUnsafePointer(to: obstacle.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_obstacle_get_paused, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_obstacle_set_radius: GDExtensionMethodBindPtr = {
        let methodName = StringName("obstacle_set_radius")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1794382983)!
            }
            
        }
        
    }()
    
    /// Sets the radius of the dynamic obstacle.
    public static func obstacleSetRadius(obstacle: RID, radius: Double) {
        withUnsafePointer(to: obstacle.content) { pArg0 in
            withUnsafePointer(to: radius) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_obstacle_set_radius, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_obstacle_get_radius: GDExtensionMethodBindPtr = {
        let methodName = StringName("obstacle_get_radius")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 866169185)!
            }
            
        }
        
    }()
    
    /// Returns the radius of the specified dynamic `obstacle`.
    public static func obstacleGetRadius(obstacle: RID) -> Double {
        var _result: Double = 0.0
        withUnsafePointer(to: obstacle.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_obstacle_get_radius, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_obstacle_set_height: GDExtensionMethodBindPtr = {
        let methodName = StringName("obstacle_set_height")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1794382983)!
            }
            
        }
        
    }()
    
    /// Sets the `height` for the `obstacle`. In 3D agents will ignore obstacles that are above or below them while using 2D avoidance.
    public static func obstacleSetHeight(obstacle: RID, height: Double) {
        withUnsafePointer(to: obstacle.content) { pArg0 in
            withUnsafePointer(to: height) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_obstacle_set_height, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_obstacle_get_height: GDExtensionMethodBindPtr = {
        let methodName = StringName("obstacle_get_height")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 866169185)!
            }
            
        }
        
    }()
    
    /// Returns the `height` of the specified `obstacle`.
    public static func obstacleGetHeight(obstacle: RID) -> Double {
        var _result: Double = 0.0
        withUnsafePointer(to: obstacle.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_obstacle_get_height, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_obstacle_set_velocity: GDExtensionMethodBindPtr = {
        let methodName = StringName("obstacle_set_velocity")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3227306858)!
            }
            
        }
        
    }()
    
    /// Sets `velocity` of the dynamic `obstacle`. Allows other agents to better predict the movement of the dynamic obstacle. Only works in combination with the radius of the obstacle.
    public static func obstacleSetVelocity(obstacle: RID, velocity: Vector3) {
        withUnsafePointer(to: obstacle.content) { pArg0 in
            withUnsafePointer(to: velocity) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_obstacle_set_velocity, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_obstacle_get_velocity: GDExtensionMethodBindPtr = {
        let methodName = StringName("obstacle_get_velocity")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 531438156)!
            }
            
        }
        
    }()
    
    /// Returns the velocity of the specified dynamic `obstacle`.
    public static func obstacleGetVelocity(obstacle: RID) -> Vector3 {
        var _result: Vector3 = Vector3 ()
        withUnsafePointer(to: obstacle.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_obstacle_get_velocity, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_obstacle_set_position: GDExtensionMethodBindPtr = {
        let methodName = StringName("obstacle_set_position")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3227306858)!
            }
            
        }
        
    }()
    
    /// Updates the `position` in world space for the `obstacle`.
    public static func obstacleSetPosition(obstacle: RID, position: Vector3) {
        withUnsafePointer(to: obstacle.content) { pArg0 in
            withUnsafePointer(to: position) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_obstacle_set_position, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_obstacle_get_position: GDExtensionMethodBindPtr = {
        let methodName = StringName("obstacle_get_position")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 531438156)!
            }
            
        }
        
    }()
    
    /// Returns the position of the specified `obstacle` in world space.
    public static func obstacleGetPosition(obstacle: RID) -> Vector3 {
        var _result: Vector3 = Vector3 ()
        withUnsafePointer(to: obstacle.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_obstacle_get_position, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_obstacle_set_vertices: GDExtensionMethodBindPtr = {
        let methodName = StringName("obstacle_set_vertices")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 4030257846)!
            }
            
        }
        
    }()
    
    /// Sets the outline vertices for the obstacle. If the vertices are winded in clockwise order agents will be pushed in by the obstacle, else they will be pushed out.
    public static func obstacleSetVertices(obstacle: RID, vertices: PackedVector3Array) {
        withUnsafePointer(to: obstacle.content) { pArg0 in
            withUnsafePointer(to: vertices.content) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_obstacle_set_vertices, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_obstacle_get_vertices: GDExtensionMethodBindPtr = {
        let methodName = StringName("obstacle_get_vertices")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 808965560)!
            }
            
        }
        
    }()
    
    /// Returns the outline vertices for the specified `obstacle`.
    public static func obstacleGetVertices(obstacle: RID) -> PackedVector3Array {
        let _result: PackedVector3Array = PackedVector3Array ()
        withUnsafePointer(to: obstacle.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_obstacle_get_vertices, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result.content)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_obstacle_set_avoidance_layers: GDExtensionMethodBindPtr = {
        let methodName = StringName("obstacle_set_avoidance_layers")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3411492887)!
            }
            
        }
        
    }()
    
    /// Set the obstacles's `avoidance_layers` bitmask.
    public static func obstacleSetAvoidanceLayers(obstacle: RID, layers: UInt32) {
        withUnsafePointer(to: obstacle.content) { pArg0 in
            withUnsafePointer(to: layers) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_obstacle_set_avoidance_layers, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_obstacle_get_avoidance_layers: GDExtensionMethodBindPtr = {
        let methodName = StringName("obstacle_get_avoidance_layers")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2198884583)!
            }
            
        }
        
    }()
    
    /// Returns the `avoidance_layers` bitmask of the specified `obstacle`.
    public static func obstacleGetAvoidanceLayers(obstacle: RID) -> UInt32 {
        var _result: UInt32 = 0
        withUnsafePointer(to: obstacle.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_obstacle_get_avoidance_layers, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_parse_source_geometry_data: GDExtensionMethodBindPtr = {
        let methodName = StringName("parse_source_geometry_data")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 685862123)!
            }
            
        }
        
    }()
    
    /// Parses the ``SceneTree`` for source geometry according to the properties of `navigationMesh`. Updates the provided `sourceGeometryData` resource with the resulting data. The resource can then be used to bake a navigation mesh with ``bakeFromSourceGeometryData(navigationMesh:sourceGeometryData:callback:)``. After the process is finished the optional `callback` will be called.
    /// 
    /// > Note: This function needs to run on the main thread or with a deferred call as the SceneTree is not thread-safe.
    /// 
    /// **Performance:** While convenient, reading data arrays from ``Mesh`` resources can affect the frame rate negatively. The data needs to be received from the GPU, stalling the ``RenderingServer`` in the process. For performance prefer the use of e.g. collision shapes or creating the data arrays entirely in code.
    /// 
    public static func parseSourceGeometryData(navigationMesh: NavigationMesh?, sourceGeometryData: NavigationMeshSourceGeometryData3D?, rootNode: Node?, callback: Callable = Callable()) {
        withUnsafePointer(to: navigationMesh?.handle) { pArg0 in
            withUnsafePointer(to: sourceGeometryData?.handle) { pArg1 in
                withUnsafePointer(to: rootNode?.handle) { pArg2 in
                    withUnsafePointer(to: callback.content) { pArg3 in
                        withUnsafePointer(to: UnsafeRawPointersN4(pArg0, pArg1, pArg2, pArg3)) { pArgs in
                            pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 4) { pArgs in
                                gi.object_method_bind_ptrcall(method_parse_source_geometry_data, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                            }
                            
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_bake_from_source_geometry_data: GDExtensionMethodBindPtr = {
        let methodName = StringName("bake_from_source_geometry_data")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2469318639)!
            }
            
        }
        
    }()
    
    /// Bakes the provided `navigationMesh` with the data from the provided `sourceGeometryData`. After the process is finished the optional `callback` will be called.
    public static func bakeFromSourceGeometryData(navigationMesh: NavigationMesh?, sourceGeometryData: NavigationMeshSourceGeometryData3D?, callback: Callable = Callable()) {
        withUnsafePointer(to: navigationMesh?.handle) { pArg0 in
            withUnsafePointer(to: sourceGeometryData?.handle) { pArg1 in
                withUnsafePointer(to: callback.content) { pArg2 in
                    withUnsafePointer(to: UnsafeRawPointersN3(pArg0, pArg1, pArg2)) { pArgs in
                        pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 3) { pArgs in
                            gi.object_method_bind_ptrcall(method_bake_from_source_geometry_data, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_bake_from_source_geometry_data_async: GDExtensionMethodBindPtr = {
        let methodName = StringName("bake_from_source_geometry_data_async")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2469318639)!
            }
            
        }
        
    }()
    
    /// Bakes the provided `navigationMesh` with the data from the provided `sourceGeometryData` as an async task running on a background thread. After the process is finished the optional `callback` will be called.
    public static func bakeFromSourceGeometryDataAsync(navigationMesh: NavigationMesh?, sourceGeometryData: NavigationMeshSourceGeometryData3D?, callback: Callable = Callable()) {
        withUnsafePointer(to: navigationMesh?.handle) { pArg0 in
            withUnsafePointer(to: sourceGeometryData?.handle) { pArg1 in
                withUnsafePointer(to: callback.content) { pArg2 in
                    withUnsafePointer(to: UnsafeRawPointersN3(pArg0, pArg1, pArg2)) { pArgs in
                        pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 3) { pArgs in
                            gi.object_method_bind_ptrcall(method_bake_from_source_geometry_data_async, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_is_baking_navigation_mesh: GDExtensionMethodBindPtr = {
        let methodName = StringName("is_baking_navigation_mesh")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3142026141)!
            }
            
        }
        
    }()
    
    /// Returns `true` when the provided navigation mesh is being baked on a background thread.
    public static func isBakingNavigationMesh(_ navigationMesh: NavigationMesh?) -> Bool {
        var _result: Bool = false
        withUnsafePointer(to: navigationMesh?.handle) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_is_baking_navigation_mesh, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_source_geometry_parser_create: GDExtensionMethodBindPtr = {
        let methodName = StringName("source_geometry_parser_create")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 529393457)!
            }
            
        }
        
    }()
    
    /// Creates a new source geometry parser. If a ``Callable`` is set for the parser with ``sourceGeometryParserSetCallback(parser:callback:)`` the callback will be called for every single node that gets parsed whenever ``parseSourceGeometryData(navigationMesh:sourceGeometryData:rootNode:callback:)`` is used.
    public static func sourceGeometryParserCreate() -> RID {
        let _result: RID = RID ()
        gi.object_method_bind_ptrcall(method_source_geometry_parser_create, UnsafeMutableRawPointer(mutating: shared.handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_source_geometry_parser_set_callback: GDExtensionMethodBindPtr = {
        let methodName = StringName("source_geometry_parser_set_callback")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3379118538)!
            }
            
        }
        
    }()
    
    /// Sets the `callback` ``Callable`` for the specific source geometry `parser`. The ``Callable`` will receive a call with the following parameters:
    /// 
    /// - `navigation_mesh` - The ``NavigationMesh`` reference used to define the parse settings. Do NOT edit or add directly to the navigation mesh.
    /// 
    /// - `source_geometry_data` - The ``NavigationMeshSourceGeometryData3D`` reference. Add custom source geometry for navigation mesh baking to this object.
    /// 
    /// - `node` - The ``Node`` that is parsed.
    /// 
    public static func sourceGeometryParserSetCallback(parser: RID, callback: Callable) {
        withUnsafePointer(to: parser.content) { pArg0 in
            withUnsafePointer(to: callback.content) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_source_geometry_parser_set_callback, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_simplify_path: GDExtensionMethodBindPtr = {
        let methodName = StringName("simplify_path")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2344122170)!
            }
            
        }
        
    }()
    
    /// Returns a simplified version of `path` with less critical path points removed. The simplification amount is in worlds units and controlled by `epsilon`. The simplification uses a variant of Ramer-Douglas-Peucker algorithm for curve point decimation.
    /// 
    /// Path simplification can be helpful to mitigate various path following issues that can arise with certain agent types and script behaviors. E.g. "steering" agents or avoidance in "open fields".
    /// 
    public static func simplifyPath(_ path: PackedVector3Array, epsilon: Double) -> PackedVector3Array {
        let _result: PackedVector3Array = PackedVector3Array ()
        withUnsafePointer(to: path.content) { pArg0 in
            withUnsafePointer(to: epsilon) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_simplify_path, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result.content)
                    }
                    
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_free_rid: GDExtensionMethodBindPtr = {
        let methodName = StringName("free_rid")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2722037293)!
            }
            
        }
        
    }()
    
    /// Destroys the given RID.
    public static func freeRid(_ rid: RID) {
        withUnsafePointer(to: rid.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_free_rid, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_set_active: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_active")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    /// Control activation of this server.
    public static func setActive(_ active: Bool) {
        withUnsafePointer(to: active) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_set_active, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_set_debug_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_debug_enabled")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    /// If `true` enables debug mode on the NavigationServer.
    public static func setDebugEnabled(_ enabled: Bool) {
        withUnsafePointer(to: enabled) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_set_debug_enabled, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_debug_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_debug_enabled")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    /// Returns `true` when the NavigationServer has debug enabled.
    public static func getDebugEnabled() -> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall(method_get_debug_enabled, UnsafeMutableRawPointer(mutating: shared.handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_process_info: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_process_info")
        return withUnsafePointer(to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1938440894)!
            }
            
        }
        
    }()
    
    /// Returns information about the current state of the NavigationServer. See ``NavigationServer3D/ProcessInfo`` for a list of available states.
    public static func getProcessInfo(_ processInfo: NavigationServer3D.ProcessInfo) -> Int32 {
        var _result: Int32 = 0
        withUnsafePointer(to: processInfo.rawValue) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_get_process_info, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    // Signals 
    /// Signal support.
    /// 
    /// 
    /// 
    /// Use the ``Signal1/connect(flags:_:)`` method to connect to the signal on the container object, and ``Signal1/disconnect(_:)`` to drop the connection.
    /// 
    /// You can also await the ``Signal1/emitted`` property for waiting for a single emission of the signal.
    /// 
    public class Signal1 {
        var target: Object
        var signalName: StringName
        init (target: Object, signalName: StringName) {
            self.target = target
            self.signalName = signalName
        }
        
        /// Connects the signal to the specified callback
        /// 
        /// 
        /// 
        /// To disconnect, call the disconnect method, with the returned token on success
        /// 
        /// - Parameters:
        /// 
        /// - callback: the method to invoke when this signal is raised
        /// 
        /// - flags: Optional, can be also added to configure the connection's behavior (see ``Object/ConnectFlags`` constants).
        /// 
        /// - Returns: an object token that can be used to disconnect the object from the target on success, or the error produced by Godot.
        /// 
        @discardableResult /* Signal1 */
        public func connect (flags: Object.ConnectFlags = [], _ callback: @escaping (_ map: RID) -> ()) -> Object {
            let signalProxy = SignalProxy()
            signalProxy.proxy =  {
                args in
                let arg_0 = RID (args [0])!
                
                callback (arg_0)
            }
            
            let callable = Callable(object: signalProxy, method: SignalProxy.proxyName)
            let r = target.connect(signal: signalName, callable: callable, flags: UInt32 (flags.rawValue))
            if r != .ok { print ("Warning, error connecting to signal, code: \(r)") }
            return signalProxy
        }
        
        /// Disconnects a signal that was previously connected, the return value from calling ``connect(flags:_:)``
        public func disconnect (_ token: Object) {
            target.disconnect(signal: signalName, callable: Callable (object: token, method: SignalProxy.proxyName))
        }
        
        /// You can await this property to wait for the signal to be emitted once
        public var emitted: Void  {
            get async {
                await withCheckedContinuation {
                    c in
                    connect (flags: .oneShot) { _ in c.resume () }
                }
                
            }
            
        }
        
    }
    
    /// Emitted when a navigation map is updated, when a region moves or is modified.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.mapChanged.connect { map in
    ///    print ("caught signal")
    /// }
    /// ```
    public var mapChanged: Signal1 { Signal1 (target: self, signalName: "map_changed") }
    
    /// Emitted when navigation debug settings are changed. Only available in debug builds.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.navigationDebugChanged.connect {
    ///    print ("caught signal")
    /// }
    /// ```
    public var navigationDebugChanged: SimpleSignal { SimpleSignal (target: self, signalName: "navigation_debug_changed") }
    
    /// Emitted when avoidance debug settings are changed. Only available in debug builds.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.avoidanceDebugChanged.connect {
    ///    print ("caught signal")
    /// }
    /// ```
    public var avoidanceDebugChanged: SimpleSignal { SimpleSignal (target: self, signalName: "avoidance_debug_changed") }
    
}


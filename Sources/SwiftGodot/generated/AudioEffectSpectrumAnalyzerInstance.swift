// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Queryable instance of an ``AudioEffectSpectrumAnalyzer``.
/// 
/// The runtime part of an ``AudioEffectSpectrumAnalyzer``, which can be used to query the magnitude of a frequency range on its host bus.
/// 
/// An instance of this class can be acquired with ``AudioServer/getBusEffectInstance(busIdx:effectIdx:channel:)``.
/// 
open class AudioEffectSpectrumAnalyzerInstance: AudioEffectInstance {
    override open class var godotClassName: StringName { "AudioEffectSpectrumAnalyzerInstance" }
    public enum MagnitudeMode: Int64, CaseIterable, CustomDebugStringConvertible {
        /// Use the average value across the frequency range as magnitude.
        case average = 0 // MAGNITUDE_AVERAGE
        /// Use the maximum value of the frequency range as magnitude.
        case max = 1 // MAGNITUDE_MAX
        /// A textual representation of this instance, suitable for debugging
        public var debugDescription: String {
            switch self {
                case .average: return ".average"
                case .max: return ".max"
            }
            
        }
        
    }
    
    /* Methods */
    fileprivate static var method_get_magnitude_for_frequency_range: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_magnitude_for_frequency_range")
        return withUnsafePointer(to: &AudioEffectSpectrumAnalyzerInstance.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 797993915)!
            }
            
        }
        
    }()
    
    /// Returns the magnitude of the frequencies from `fromHz` to `toHz` in linear energy as a Vector2. The `x` component of the return value represents the left stereo channel, and `y` represents the right channel.
    /// 
    /// `mode` determines how the frequency range will be processed. See ``AudioEffectSpectrumAnalyzerInstance/MagnitudeMode``.
    /// 
    public final func getMagnitudeForFrequencyRange(fromHz: Double, toHz: Double, mode: AudioEffectSpectrumAnalyzerInstance.MagnitudeMode = .max) -> Vector2 {
        var _result: Vector2 = Vector2 ()
        withUnsafePointer(to: fromHz) { pArg0 in
            withUnsafePointer(to: toHz) { pArg1 in
                withUnsafePointer(to: mode.rawValue) { pArg2 in
                    withUnsafePointer(to: UnsafeRawPointersN3(pArg0, pArg1, pArg2)) { pArgs in
                        pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 3) { pArgs in
                            gi.object_method_bind_ptrcall(AudioEffectSpectrumAnalyzerInstance.method_get_magnitude_for_frequency_range, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        return _result
    }
    
}


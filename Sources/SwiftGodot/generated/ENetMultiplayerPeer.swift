// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A MultiplayerPeer implementation using the <a href="http://enet.bespin.org/index.html">ENet</a> library.
/// 
/// A MultiplayerPeer implementation that should be passed to ``MultiplayerAPI/multiplayerPeer`` after being initialized as either a client, server, or mesh. Events can then be handled by connecting to ``MultiplayerAPI`` signals. See ``ENetConnection`` for more information on the ENet library wrapper.
/// 
/// > Note: ENet only uses UDP, not TCP. When forwarding the server port to make your server accessible on the public Internet, you only need to forward the server port in UDP. You can use the ``UPNP`` class to try to forward the server port automatically when starting the server.
/// 
open class ENetMultiplayerPeer: MultiplayerPeer {
    override open class var godotClassName: StringName { "ENetMultiplayerPeer" }
    
    /* Properties */
    
    /// The underlying ``ENetConnection`` created after ``createClient(address:port:channelCount:inBandwidth:outBandwidth:localPort:)`` and ``createServer(port:maxClients:maxChannels:inBandwidth:outBandwidth:)``.
    final public var host: ENetConnection? {
        get {
            return get_host ()
        }
        
    }
    
    /* Methods */
    fileprivate static var method_create_server: GDExtensionMethodBindPtr = {
        let methodName = StringName("create_server")
        return withUnsafePointer(to: &ENetMultiplayerPeer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2917761309)!
            }
            
        }
        
    }()
    
    /// Create server that listens to connections via `port`. The port needs to be an available, unused port between 0 and 65535. Note that ports below 1024 are privileged and may require elevated permissions depending on the platform. To change the interface the server listens on, use ``setBindIp(_:)``. The default IP is the wildcard `"*"`, which listens on all available interfaces. `maxClients` is the maximum number of clients that are allowed at once, any number up to 4095 may be used, although the achievable number of simultaneous clients may be far lower and depends on the application. For additional details on the bandwidth parameters, see ``createClient(address:port:channelCount:inBandwidth:outBandwidth:localPort:)``. Returns ``GodotError/ok`` if a server was created, ``GodotError/errAlreadyInUse`` if this ENetMultiplayerPeer instance already has an open connection (in which case you need to call ``MultiplayerPeer/close()`` first) or ``GodotError/errCantCreate`` if the server could not be created.
    public final func createServer(port: Int32, maxClients: Int32 = 32, maxChannels: Int32 = 0, inBandwidth: Int32 = 0, outBandwidth: Int32 = 0) -> GodotError {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        withUnsafePointer(to: port) { pArg0 in
            withUnsafePointer(to: maxClients) { pArg1 in
                withUnsafePointer(to: maxChannels) { pArg2 in
                    withUnsafePointer(to: inBandwidth) { pArg3 in
                        withUnsafePointer(to: outBandwidth) { pArg4 in
                            withUnsafePointer(to: UnsafeRawPointersN5(pArg0, pArg1, pArg2, pArg3, pArg4)) { pArgs in
                                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 5) { pArgs in
                                    gi.object_method_bind_ptrcall(ENetMultiplayerPeer.method_create_server, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                                }
                                
                            }
                            
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        return GodotError (rawValue: _result)!
    }
    
    fileprivate static var method_create_client: GDExtensionMethodBindPtr = {
        let methodName = StringName("create_client")
        return withUnsafePointer(to: &ENetMultiplayerPeer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2327163476)!
            }
            
        }
        
    }()
    
    /// Create client that connects to a server at `address` using specified `port`. The given address needs to be either a fully qualified domain name (e.g. `"www.example.com"`) or an IP address in IPv4 or IPv6 format (e.g. `"192.168.1.1"`). The `port` is the port the server is listening on. The `channelCount` parameter can be used to specify the number of ENet channels allocated for the connection. The `inBandwidth` and `outBandwidth` parameters can be used to limit the incoming and outgoing bandwidth to the given number of bytes per second. The default of 0 means unlimited bandwidth. Note that ENet will strategically drop packets on specific sides of a connection between peers to ensure the peer's bandwidth is not overwhelmed. The bandwidth parameters also determine the window size of a connection which limits the amount of reliable packets that may be in transit at any given time. Returns ``GodotError/ok`` if a client was created, ``GodotError/errAlreadyInUse`` if this ENetMultiplayerPeer instance already has an open connection (in which case you need to call ``MultiplayerPeer/close()`` first) or ``GodotError/errCantCreate`` if the client could not be created. If `localPort` is specified, the client will also listen to the given port; this is useful for some NAT traversal techniques.
    public final func createClient(address: String, port: Int32, channelCount: Int32 = 0, inBandwidth: Int32 = 0, outBandwidth: Int32 = 0, localPort: Int32 = 0) -> GodotError {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        let address = GString(address)
        withUnsafePointer(to: address.content) { pArg0 in
            withUnsafePointer(to: port) { pArg1 in
                withUnsafePointer(to: channelCount) { pArg2 in
                    withUnsafePointer(to: inBandwidth) { pArg3 in
                        withUnsafePointer(to: outBandwidth) { pArg4 in
                            withUnsafePointer(to: localPort) { pArg5 in
                                withUnsafePointer(to: UnsafeRawPointersN6(pArg0, pArg1, pArg2, pArg3, pArg4, pArg5)) { pArgs in
                                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 6) { pArgs in
                                        gi.object_method_bind_ptrcall(ENetMultiplayerPeer.method_create_client, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                                    }
                                    
                                }
                                
                            }
                            
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        return GodotError (rawValue: _result)!
    }
    
    fileprivate static var method_create_mesh: GDExtensionMethodBindPtr = {
        let methodName = StringName("create_mesh")
        return withUnsafePointer(to: &ENetMultiplayerPeer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 844576869)!
            }
            
        }
        
    }()
    
    /// Initialize this ``MultiplayerPeer`` in mesh mode. The provided `uniqueId` will be used as the local peer network unique ID once assigned as the ``MultiplayerAPI/multiplayerPeer``. In the mesh configuration you will need to set up each new peer manually using ``ENetConnection`` before calling ``addMeshPeer(peerId:host:)``. While this technique is more advanced, it allows for better control over the connection process (e.g. when dealing with NAT punch-through) and for better distribution of the network load (which would otherwise be more taxing on the server).
    public final func createMesh(uniqueId: Int32) -> GodotError {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        withUnsafePointer(to: uniqueId) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(ENetMultiplayerPeer.method_create_mesh, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return GodotError (rawValue: _result)!
    }
    
    fileprivate static var method_add_mesh_peer: GDExtensionMethodBindPtr = {
        let methodName = StringName("add_mesh_peer")
        return withUnsafePointer(to: &ENetMultiplayerPeer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1293458335)!
            }
            
        }
        
    }()
    
    /// Add a new remote peer with the given `peerId` connected to the given `host`.
    /// 
    /// > Note: The `host` must have exactly one peer in the ``ENetPacketPeer/PeerState/stateConnected`` state.
    /// 
    public final func addMeshPeer(peerId: Int32, host: ENetConnection?) -> GodotError {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        withUnsafePointer(to: peerId) { pArg0 in
            withUnsafePointer(to: host?.handle) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(ENetMultiplayerPeer.method_add_mesh_peer, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                    }
                    
                }
                
            }
            
        }
        
        return GodotError (rawValue: _result)!
    }
    
    fileprivate static var method_set_bind_ip: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_bind_ip")
        return withUnsafePointer(to: &ENetMultiplayerPeer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    /// The IP used when creating a server. This is set to the wildcard `"*"` by default, which binds to all available interfaces. The given IP needs to be in IPv4 or IPv6 address format, for example: `"192.168.1.1"`.
    public final func setBindIp(_ ip: String) {
        let ip = GString(ip)
        withUnsafePointer(to: ip.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(ENetMultiplayerPeer.method_set_bind_ip, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_host: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_host")
        return withUnsafePointer(to: &ENetMultiplayerPeer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 4103238886)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_host() -> ENetConnection? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall(ENetMultiplayerPeer.method_get_host, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_get_peer: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_peer")
        return withUnsafePointer(to: &ENetMultiplayerPeer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3793311544)!
            }
            
        }
        
    }()
    
    /// Returns the ``ENetPacketPeer`` associated to the given `id`.
    public final func getPeer(id: Int32) -> ENetPacketPeer? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        withUnsafePointer(to: id) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(ENetMultiplayerPeer.method_get_peer, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                }
                
            }
            
        }
        
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
}


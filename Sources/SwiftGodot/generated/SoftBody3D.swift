// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A deformable 3D physics mesh.
/// 
/// A deformable 3D physics mesh. Used to create elastic or deformable objects such as cloth, rubber, or other flexible materials.
/// 
/// Additionally, ``SoftBody3D`` is subject to wind forces defined in ``Area3D`` (see ``Area3D/windSourcePath``, ``Area3D/windForceMagnitude``, and ``Area3D/windAttenuationFactor``).
/// 
/// > Note: There are many known bugs in ``SoftBody3D``. Therefore, it's not recommended to use them for things that can affect gameplay (such as trampolines).
/// 
open class SoftBody3D: MeshInstance3D {
    override open class var godotClassName: StringName { "SoftBody3D" }
    public enum DisableMode: Int64, CaseIterable, CustomDebugStringConvertible {
        /// When ``Node/processMode`` is set to ``Node/ProcessMode/disabled``, remove from the physics simulation to stop all physics interactions with this ``SoftBody3D``.
        /// 
        /// Automatically re-added to the physics simulation when the ``Node`` is processed again.
        /// 
        case remove = 0 // DISABLE_MODE_REMOVE
        /// When ``Node/processMode`` is set to ``Node/ProcessMode/disabled``, do not affect the physics simulation.
        case keepActive = 1 // DISABLE_MODE_KEEP_ACTIVE
        /// A textual representation of this instance, suitable for debugging
        public var debugDescription: String {
            switch self {
                case .remove: return ".remove"
                case .keepActive: return ".keepActive"
            }
            
        }
        
    }
    
    
    /* Properties */
    
    /// The physics layers this SoftBody3D **is in**. Collision objects can exist in one or more of 32 different layers. See also ``collisionMask``.
    /// 
    /// > Note: Object A can detect a contact with object B only if object B is in any of the layers that object A scans. See <a href="https://docs.godotengine.org/en//tutorials/physics/physics_introduction.html#collision-layers-and-masks">Collision layers and masks</a> in the documentation for more information.
    /// 
    final public var collisionLayer: UInt32 {
        get {
            return get_collision_layer ()
        }
        
        set {
            set_collision_layer (newValue)
        }
        
    }
    
    /// The physics layers this SoftBody3D **scans**. Collision objects can scan one or more of 32 different layers. See also ``collisionLayer``.
    /// 
    /// > Note: Object A can detect a contact with object B only if object B is in any of the layers that object A scans. See <a href="https://docs.godotengine.org/en//tutorials/physics/physics_introduction.html#collision-layers-and-masks">Collision layers and masks</a> in the documentation for more information.
    /// 
    final public var collisionMask: UInt32 {
        get {
            return get_collision_mask ()
        }
        
        set {
            set_collision_mask (newValue)
        }
        
    }
    
    /// ``NodePath`` to a ``CollisionObject3D`` this SoftBody3D should avoid clipping.
    final public var parentCollisionIgnore: NodePath {
        get {
            return get_parent_collision_ignore ()
        }
        
        set {
            set_parent_collision_ignore (newValue)
        }
        
    }
    
    /// Increasing this value will improve the resulting simulation, but can affect performance. Use with care.
    final public var simulationPrecision: Int32 {
        get {
            return get_simulation_precision ()
        }
        
        set {
            set_simulation_precision (newValue)
        }
        
    }
    
    /// The SoftBody3D's mass.
    final public var totalMass: Double {
        get {
            return get_total_mass ()
        }
        
        set {
            set_total_mass (newValue)
        }
        
    }
    
    /// Higher values will result in a stiffer body, while lower values will increase the body's ability to bend. The value can be between `0.0` and `1.0` (inclusive).
    final public var linearStiffness: Double {
        get {
            return get_linear_stiffness ()
        }
        
        set {
            set_linear_stiffness (newValue)
        }
        
    }
    
    /// The pressure coefficient of this soft body. Simulate pressure build-up from inside this body. Higher values increase the strength of this effect.
    final public var pressureCoefficient: Double {
        get {
            return get_pressure_coefficient ()
        }
        
        set {
            set_pressure_coefficient (newValue)
        }
        
    }
    
    /// The body's damping coefficient. Higher values will slow down the body more noticeably when forces are applied.
    final public var dampingCoefficient: Double {
        get {
            return get_damping_coefficient ()
        }
        
        set {
            set_damping_coefficient (newValue)
        }
        
    }
    
    /// The body's drag coefficient. Higher values increase this body's air resistance.
    /// 
    /// > Note: This value is currently unused by Godot's default physics implementation.
    /// 
    final public var dragCoefficient: Double {
        get {
            return get_drag_coefficient ()
        }
        
        set {
            set_drag_coefficient (newValue)
        }
        
    }
    
    /// If `true`, the ``SoftBody3D`` will respond to ``RayCast3D``s.
    final public var rayPickable: Bool {
        get {
            return is_ray_pickable ()
        }
        
        set {
            set_ray_pickable (newValue)
        }
        
    }
    
    /// Defines the behavior in physics when ``Node/processMode`` is set to ``Node/ProcessMode/disabled``. See ``SoftBody3D/DisableMode`` for more details about the different modes.
    final public var disableMode: SoftBody3D.DisableMode {
        get {
            return get_disable_mode ()
        }
        
        set {
            set_disable_mode (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_get_physics_rid: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_physics_rid")
        return withUnsafePointer(to: &SoftBody3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2944877500)!
            }
            
        }
        
    }()
    
    /// Returns the internal ``RID`` used by the ``PhysicsServer3D`` for this body.
    public final func getPhysicsRid() -> RID {
        let _result: RID = RID ()
        gi.object_method_bind_ptrcall(SoftBody3D.method_get_physics_rid, UnsafeMutableRawPointer(mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_set_collision_mask: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_collision_mask")
        return withUnsafePointer(to: &SoftBody3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_collision_mask(_ collisionMask: UInt32) {
        withUnsafePointer(to: collisionMask) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(SoftBody3D.method_set_collision_mask, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_collision_mask: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_collision_mask")
        return withUnsafePointer(to: &SoftBody3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_collision_mask() -> UInt32 {
        var _result: UInt32 = 0
        gi.object_method_bind_ptrcall(SoftBody3D.method_get_collision_mask, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_collision_layer: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_collision_layer")
        return withUnsafePointer(to: &SoftBody3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_collision_layer(_ collisionLayer: UInt32) {
        withUnsafePointer(to: collisionLayer) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(SoftBody3D.method_set_collision_layer, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_collision_layer: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_collision_layer")
        return withUnsafePointer(to: &SoftBody3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_collision_layer() -> UInt32 {
        var _result: UInt32 = 0
        gi.object_method_bind_ptrcall(SoftBody3D.method_get_collision_layer, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_collision_mask_value: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_collision_mask_value")
        return withUnsafePointer(to: &SoftBody3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 300928843)!
            }
            
        }
        
    }()
    
    /// Based on `value`, enables or disables the specified layer in the ``collisionMask``, given a `layerNumber` between 1 and 32.
    public final func setCollisionMaskValue(layerNumber: Int32, value: Bool) {
        withUnsafePointer(to: layerNumber) { pArg0 in
            withUnsafePointer(to: value) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(SoftBody3D.method_set_collision_mask_value, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_collision_mask_value: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_collision_mask_value")
        return withUnsafePointer(to: &SoftBody3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1116898809)!
            }
            
        }
        
    }()
    
    /// Returns whether or not the specified layer of the ``collisionMask`` is enabled, given a `layerNumber` between 1 and 32.
    public final func getCollisionMaskValue(layerNumber: Int32) -> Bool {
        var _result: Bool = false
        withUnsafePointer(to: layerNumber) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(SoftBody3D.method_get_collision_mask_value, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_set_collision_layer_value: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_collision_layer_value")
        return withUnsafePointer(to: &SoftBody3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 300928843)!
            }
            
        }
        
    }()
    
    /// Based on `value`, enables or disables the specified layer in the ``collisionLayer``, given a `layerNumber` between 1 and 32.
    public final func setCollisionLayerValue(layerNumber: Int32, value: Bool) {
        withUnsafePointer(to: layerNumber) { pArg0 in
            withUnsafePointer(to: value) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(SoftBody3D.method_set_collision_layer_value, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_collision_layer_value: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_collision_layer_value")
        return withUnsafePointer(to: &SoftBody3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1116898809)!
            }
            
        }
        
    }()
    
    /// Returns whether or not the specified layer of the ``collisionLayer`` is enabled, given a `layerNumber` between 1 and 32.
    public final func getCollisionLayerValue(layerNumber: Int32) -> Bool {
        var _result: Bool = false
        withUnsafePointer(to: layerNumber) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(SoftBody3D.method_get_collision_layer_value, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_set_parent_collision_ignore: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_parent_collision_ignore")
        return withUnsafePointer(to: &SoftBody3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1348162250)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_parent_collision_ignore(_ parentCollisionIgnore: NodePath) {
        withUnsafePointer(to: parentCollisionIgnore.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(SoftBody3D.method_set_parent_collision_ignore, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_parent_collision_ignore: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_parent_collision_ignore")
        return withUnsafePointer(to: &SoftBody3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 4075236667)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_parent_collision_ignore() -> NodePath {
        let _result: NodePath = NodePath ()
        gi.object_method_bind_ptrcall(SoftBody3D.method_get_parent_collision_ignore, UnsafeMutableRawPointer(mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_set_disable_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_disable_mode")
        return withUnsafePointer(to: &SoftBody3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1104158384)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_disable_mode(_ mode: SoftBody3D.DisableMode) {
        withUnsafePointer(to: mode.rawValue) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(SoftBody3D.method_set_disable_mode, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_disable_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_disable_mode")
        return withUnsafePointer(to: &SoftBody3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 4135042476)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_disable_mode() -> SoftBody3D.DisableMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall(SoftBody3D.method_get_disable_mode, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return SoftBody3D.DisableMode (rawValue: _result)!
    }
    
    fileprivate static var method_get_collision_exceptions: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_collision_exceptions")
        return withUnsafePointer(to: &SoftBody3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2915620761)!
            }
            
        }
        
    }()
    
    /// Returns an array of nodes that were added as collision exceptions for this body.
    public final func getCollisionExceptions() -> ObjectCollection<PhysicsBody3D> {
        var _result: Int64 = 0
        gi.object_method_bind_ptrcall(SoftBody3D.method_get_collision_exceptions, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return ObjectCollection<PhysicsBody3D>(content: _result)
    }
    
    fileprivate static var method_add_collision_exception_with: GDExtensionMethodBindPtr = {
        let methodName = StringName("add_collision_exception_with")
        return withUnsafePointer(to: &SoftBody3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1078189570)!
            }
            
        }
        
    }()
    
    /// Adds a body to the list of bodies that this body can't collide with.
    public final func addCollisionExceptionWith(body: Node?) {
        withUnsafePointer(to: body?.handle) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(SoftBody3D.method_add_collision_exception_with, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_remove_collision_exception_with: GDExtensionMethodBindPtr = {
        let methodName = StringName("remove_collision_exception_with")
        return withUnsafePointer(to: &SoftBody3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1078189570)!
            }
            
        }
        
    }()
    
    /// Removes a body from the list of bodies that this body can't collide with.
    public final func removeCollisionExceptionWith(body: Node?) {
        withUnsafePointer(to: body?.handle) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(SoftBody3D.method_remove_collision_exception_with, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_set_simulation_precision: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_simulation_precision")
        return withUnsafePointer(to: &SoftBody3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_simulation_precision(_ simulationPrecision: Int32) {
        withUnsafePointer(to: simulationPrecision) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(SoftBody3D.method_set_simulation_precision, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_simulation_precision: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_simulation_precision")
        return withUnsafePointer(to: &SoftBody3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2455072627)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_simulation_precision() -> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall(SoftBody3D.method_get_simulation_precision, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_total_mass: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_total_mass")
        return withUnsafePointer(to: &SoftBody3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_total_mass(_ mass: Double) {
        withUnsafePointer(to: mass) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(SoftBody3D.method_set_total_mass, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_total_mass: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_total_mass")
        return withUnsafePointer(to: &SoftBody3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 191475506)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_total_mass() -> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall(SoftBody3D.method_get_total_mass, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_linear_stiffness: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_linear_stiffness")
        return withUnsafePointer(to: &SoftBody3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_linear_stiffness(_ linearStiffness: Double) {
        withUnsafePointer(to: linearStiffness) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(SoftBody3D.method_set_linear_stiffness, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_linear_stiffness: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_linear_stiffness")
        return withUnsafePointer(to: &SoftBody3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 191475506)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_linear_stiffness() -> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall(SoftBody3D.method_get_linear_stiffness, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_pressure_coefficient: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_pressure_coefficient")
        return withUnsafePointer(to: &SoftBody3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_pressure_coefficient(_ pressureCoefficient: Double) {
        withUnsafePointer(to: pressureCoefficient) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(SoftBody3D.method_set_pressure_coefficient, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_pressure_coefficient: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_pressure_coefficient")
        return withUnsafePointer(to: &SoftBody3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 191475506)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_pressure_coefficient() -> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall(SoftBody3D.method_get_pressure_coefficient, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_damping_coefficient: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_damping_coefficient")
        return withUnsafePointer(to: &SoftBody3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_damping_coefficient(_ dampingCoefficient: Double) {
        withUnsafePointer(to: dampingCoefficient) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(SoftBody3D.method_set_damping_coefficient, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_damping_coefficient: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_damping_coefficient")
        return withUnsafePointer(to: &SoftBody3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 191475506)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_damping_coefficient() -> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall(SoftBody3D.method_get_damping_coefficient, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_drag_coefficient: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_drag_coefficient")
        return withUnsafePointer(to: &SoftBody3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_drag_coefficient(_ dragCoefficient: Double) {
        withUnsafePointer(to: dragCoefficient) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(SoftBody3D.method_set_drag_coefficient, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_drag_coefficient: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_drag_coefficient")
        return withUnsafePointer(to: &SoftBody3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 191475506)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_drag_coefficient() -> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall(SoftBody3D.method_get_drag_coefficient, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_point_transform: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_point_transform")
        return withUnsafePointer(to: &SoftBody3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 871989493)!
            }
            
        }
        
    }()
    
    /// Returns local translation of a vertex in the surface array.
    public final func getPointTransform(pointIndex: Int32) -> Vector3 {
        var _result: Vector3 = Vector3 ()
        withUnsafePointer(to: pointIndex) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(SoftBody3D.method_get_point_transform, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_set_point_pinned: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_point_pinned")
        return withUnsafePointer(to: &SoftBody3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3814935226)!
            }
            
        }
        
    }()
    
    /// Sets the pinned state of a surface vertex. When set to `true`, the optional `attachmentPath` can define a ``Node3D`` the pinned vertex will be attached to.
    public final func setPointPinned(pointIndex: Int32, pinned: Bool, attachmentPath: NodePath = NodePath("")) {
        withUnsafePointer(to: pointIndex) { pArg0 in
            withUnsafePointer(to: pinned) { pArg1 in
                withUnsafePointer(to: attachmentPath.content) { pArg2 in
                    withUnsafePointer(to: UnsafeRawPointersN3(pArg0, pArg1, pArg2)) { pArgs in
                        pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 3) { pArgs in
                            gi.object_method_bind_ptrcall(SoftBody3D.method_set_point_pinned, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_is_point_pinned: GDExtensionMethodBindPtr = {
        let methodName = StringName("is_point_pinned")
        return withUnsafePointer(to: &SoftBody3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1116898809)!
            }
            
        }
        
    }()
    
    /// Returns `true` if vertex is set to pinned.
    public final func isPointPinned(pointIndex: Int32) -> Bool {
        var _result: Bool = false
        withUnsafePointer(to: pointIndex) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(SoftBody3D.method_is_point_pinned, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_set_ray_pickable: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_ray_pickable")
        return withUnsafePointer(to: &SoftBody3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_ray_pickable(_ rayPickable: Bool) {
        withUnsafePointer(to: rayPickable) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(SoftBody3D.method_set_ray_pickable, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_is_ray_pickable: GDExtensionMethodBindPtr = {
        let methodName = StringName("is_ray_pickable")
        return withUnsafePointer(to: &SoftBody3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_ray_pickable() -> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall(SoftBody3D.method_is_ray_pickable, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
}


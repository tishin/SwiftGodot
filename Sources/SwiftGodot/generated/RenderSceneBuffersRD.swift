// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Render scene buffer implementation for the RenderingDevice based renderers.
/// 
/// This object manages all 3D rendering buffers for the rendering device based renderers. An instance of this object is created for every viewport that has 3D rendering enabled.
/// 
/// All buffers are organized in **contexts**. The default context is called **render_buffers** and can contain amongst others the color buffer, depth buffer, velocity buffers, VRS density map and MSAA variants of these buffers.
/// 
/// Buffers are only guaranteed to exist during rendering of the viewport.
/// 
/// > Note: This is an internal rendering server object, do not instantiate this from script.
/// 
open class RenderSceneBuffersRD: RenderSceneBuffers {
    override open class var godotClassName: StringName { "RenderSceneBuffersRD" }
    /* Methods */
    fileprivate static var method_has_texture: GDExtensionMethodBindPtr = {
        let methodName = StringName("has_texture")
        return withUnsafePointer(to: &RenderSceneBuffersRD.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 471820014)!
            }
            
        }
        
    }()
    
    /// Returns `true` if a cached texture exists for this name.
    public final func hasTexture(context: StringName, name: StringName) -> Bool {
        var _result: Bool = false
        withUnsafePointer(to: context.content) { pArg0 in
            withUnsafePointer(to: name.content) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(RenderSceneBuffersRD.method_has_texture, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                    }
                    
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_create_texture: GDExtensionMethodBindPtr = {
        let methodName = StringName("create_texture")
        return withUnsafePointer(to: &RenderSceneBuffersRD.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3559915770)!
            }
            
        }
        
    }()
    
    /// Create a new texture with the given definition and cache this under the given name. Will return the existing texture if it already exists.
    public final func createTexture(context: StringName, name: StringName, dataFormat: RenderingDevice.DataFormat, usageBits: UInt32, textureSamples: RenderingDevice.TextureSamples, size: Vector2i, layers: UInt32, mipmaps: UInt32, unique: Bool) -> RID {
        let _result: RID = RID ()
        withUnsafePointer(to: context.content) { pArg0 in
            withUnsafePointer(to: name.content) { pArg1 in
                withUnsafePointer(to: dataFormat.rawValue) { pArg2 in
                    withUnsafePointer(to: usageBits) { pArg3 in
                        withUnsafePointer(to: textureSamples.rawValue) { pArg4 in
                            withUnsafePointer(to: size) { pArg5 in
                                withUnsafePointer(to: layers) { pArg6 in
                                    withUnsafePointer(to: mipmaps) { pArg7 in
                                        withUnsafePointer(to: unique) { pArg8 in
                                            withUnsafePointer(to: UnsafeRawPointersN9(pArg0, pArg1, pArg2, pArg3, pArg4, pArg5, pArg6, pArg7, pArg8)) { pArgs in
                                                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 9) { pArgs in
                                                    gi.object_method_bind_ptrcall(RenderSceneBuffersRD.method_create_texture, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result.content)
                                                }
                                                
                                            }
                                            
                                        }
                                        
                                    }
                                    
                                }
                                
                            }
                            
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_create_texture_from_format: GDExtensionMethodBindPtr = {
        let methodName = StringName("create_texture_from_format")
        return withUnsafePointer(to: &RenderSceneBuffersRD.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3344669382)!
            }
            
        }
        
    }()
    
    /// Create a new texture using the given format and view and cache this under the given name. Will return the existing texture if it already exists.
    public final func createTextureFromFormat(context: StringName, name: StringName, format: RDTextureFormat?, view: RDTextureView?, unique: Bool) -> RID {
        let _result: RID = RID ()
        withUnsafePointer(to: context.content) { pArg0 in
            withUnsafePointer(to: name.content) { pArg1 in
                withUnsafePointer(to: format?.handle) { pArg2 in
                    withUnsafePointer(to: view?.handle) { pArg3 in
                        withUnsafePointer(to: unique) { pArg4 in
                            withUnsafePointer(to: UnsafeRawPointersN5(pArg0, pArg1, pArg2, pArg3, pArg4)) { pArgs in
                                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 5) { pArgs in
                                    gi.object_method_bind_ptrcall(RenderSceneBuffersRD.method_create_texture_from_format, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result.content)
                                }
                                
                            }
                            
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_create_texture_view: GDExtensionMethodBindPtr = {
        let methodName = StringName("create_texture_view")
        return withUnsafePointer(to: &RenderSceneBuffersRD.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 283055834)!
            }
            
        }
        
    }()
    
    /// Create a new texture view for an existing texture and cache this under the given view_name. Will return the existing teture view if it already exists. Will error if the source texture doesn't exist.
    public final func createTextureView(context: StringName, name: StringName, viewName: StringName, view: RDTextureView?) -> RID {
        let _result: RID = RID ()
        withUnsafePointer(to: context.content) { pArg0 in
            withUnsafePointer(to: name.content) { pArg1 in
                withUnsafePointer(to: viewName.content) { pArg2 in
                    withUnsafePointer(to: view?.handle) { pArg3 in
                        withUnsafePointer(to: UnsafeRawPointersN4(pArg0, pArg1, pArg2, pArg3)) { pArgs in
                            pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 4) { pArgs in
                                gi.object_method_bind_ptrcall(RenderSceneBuffersRD.method_create_texture_view, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result.content)
                            }
                            
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_get_texture: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_texture")
        return withUnsafePointer(to: &RenderSceneBuffersRD.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 750006389)!
            }
            
        }
        
    }()
    
    /// Returns a cached texture with this name.
    public final func getTexture(context: StringName, name: StringName) -> RID {
        let _result: RID = RID ()
        withUnsafePointer(to: context.content) { pArg0 in
            withUnsafePointer(to: name.content) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(RenderSceneBuffersRD.method_get_texture, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result.content)
                    }
                    
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_get_texture_format: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_texture_format")
        return withUnsafePointer(to: &RenderSceneBuffersRD.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 371461758)!
            }
            
        }
        
    }()
    
    /// Returns the texture format information with which a cached texture was created.
    public final func getTextureFormat(context: StringName, name: StringName) -> RDTextureFormat? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        withUnsafePointer(to: context.content) { pArg0 in
            withUnsafePointer(to: name.content) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(RenderSceneBuffersRD.method_get_texture_format, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                    }
                    
                }
                
            }
            
        }
        
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_get_texture_slice: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_texture_slice")
        return withUnsafePointer(to: &RenderSceneBuffersRD.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 588440706)!
            }
            
        }
        
    }()
    
    /// Returns a specific slice (layer or mipmap) for a cached texture.
    public final func getTextureSlice(context: StringName, name: StringName, layer: UInt32, mipmap: UInt32, layers: UInt32, mipmaps: UInt32) -> RID {
        let _result: RID = RID ()
        withUnsafePointer(to: context.content) { pArg0 in
            withUnsafePointer(to: name.content) { pArg1 in
                withUnsafePointer(to: layer) { pArg2 in
                    withUnsafePointer(to: mipmap) { pArg3 in
                        withUnsafePointer(to: layers) { pArg4 in
                            withUnsafePointer(to: mipmaps) { pArg5 in
                                withUnsafePointer(to: UnsafeRawPointersN6(pArg0, pArg1, pArg2, pArg3, pArg4, pArg5)) { pArgs in
                                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 6) { pArgs in
                                        gi.object_method_bind_ptrcall(RenderSceneBuffersRD.method_get_texture_slice, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result.content)
                                    }
                                    
                                }
                                
                            }
                            
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_get_texture_slice_view: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_texture_slice_view")
        return withUnsafePointer(to: &RenderSceneBuffersRD.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 682451778)!
            }
            
        }
        
    }()
    
    /// Returns a specific view of a slice (layer or mipmap) for a cached texture.
    public final func getTextureSliceView(context: StringName, name: StringName, layer: UInt32, mipmap: UInt32, layers: UInt32, mipmaps: UInt32, view: RDTextureView?) -> RID {
        let _result: RID = RID ()
        withUnsafePointer(to: context.content) { pArg0 in
            withUnsafePointer(to: name.content) { pArg1 in
                withUnsafePointer(to: layer) { pArg2 in
                    withUnsafePointer(to: mipmap) { pArg3 in
                        withUnsafePointer(to: layers) { pArg4 in
                            withUnsafePointer(to: mipmaps) { pArg5 in
                                withUnsafePointer(to: view?.handle) { pArg6 in
                                    withUnsafePointer(to: UnsafeRawPointersN7(pArg0, pArg1, pArg2, pArg3, pArg4, pArg5, pArg6)) { pArgs in
                                        pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 7) { pArgs in
                                            gi.object_method_bind_ptrcall(RenderSceneBuffersRD.method_get_texture_slice_view, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result.content)
                                        }
                                        
                                    }
                                    
                                }
                                
                            }
                            
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_get_texture_slice_size: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_texture_slice_size")
        return withUnsafePointer(to: &RenderSceneBuffersRD.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2617625368)!
            }
            
        }
        
    }()
    
    /// Returns the texture size of a given slice of a cached texture.
    public final func getTextureSliceSize(context: StringName, name: StringName, mipmap: UInt32) -> Vector2i {
        var _result: Vector2i = Vector2i ()
        withUnsafePointer(to: context.content) { pArg0 in
            withUnsafePointer(to: name.content) { pArg1 in
                withUnsafePointer(to: mipmap) { pArg2 in
                    withUnsafePointer(to: UnsafeRawPointersN3(pArg0, pArg1, pArg2)) { pArgs in
                        pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 3) { pArgs in
                            gi.object_method_bind_ptrcall(RenderSceneBuffersRD.method_get_texture_slice_size, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_clear_context: GDExtensionMethodBindPtr = {
        let methodName = StringName("clear_context")
        return withUnsafePointer(to: &RenderSceneBuffersRD.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3304788590)!
            }
            
        }
        
    }()
    
    /// Frees all buffers related to this context.
    public final func clearContext(_ context: StringName) {
        withUnsafePointer(to: context.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(RenderSceneBuffersRD.method_clear_context, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_color_texture: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_color_texture")
        return withUnsafePointer(to: &RenderSceneBuffersRD.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3050822880)!
            }
            
        }
        
    }()
    
    /// Returns the color texture we are rendering 3D content to. If multiview is used this will be a texture array with all views.
    /// 
    /// If `msaa` is **true** and MSAA is enabled, this returns the MSAA variant of the buffer.
    /// 
    public final func getColorTexture(msaa: Bool = false) -> RID {
        let _result: RID = RID ()
        withUnsafePointer(to: msaa) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(RenderSceneBuffersRD.method_get_color_texture, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result.content)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_get_color_layer: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_color_layer")
        return withUnsafePointer(to: &RenderSceneBuffersRD.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3087988589)!
            }
            
        }
        
    }()
    
    /// Returns the specified layer from the color texture we are rendering 3D content to.
    /// 
    /// If `msaa` is **true** and MSAA is enabled, this returns the MSAA variant of the buffer.
    /// 
    public final func getColorLayer(_ layer: UInt32, msaa: Bool = false) -> RID {
        let _result: RID = RID ()
        withUnsafePointer(to: layer) { pArg0 in
            withUnsafePointer(to: msaa) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(RenderSceneBuffersRD.method_get_color_layer, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result.content)
                    }
                    
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_get_depth_texture: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_depth_texture")
        return withUnsafePointer(to: &RenderSceneBuffersRD.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3050822880)!
            }
            
        }
        
    }()
    
    /// Returns the depth texture we are rendering 3D content to. If multiview is used this will be a texture array with all views.
    /// 
    /// If `msaa` is **true** and MSAA is enabled, this returns the MSAA variant of the buffer.
    /// 
    public final func getDepthTexture(msaa: Bool = false) -> RID {
        let _result: RID = RID ()
        withUnsafePointer(to: msaa) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(RenderSceneBuffersRD.method_get_depth_texture, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result.content)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_get_depth_layer: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_depth_layer")
        return withUnsafePointer(to: &RenderSceneBuffersRD.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3087988589)!
            }
            
        }
        
    }()
    
    /// Returns the specified layer from the depth texture we are rendering 3D content to.
    /// 
    /// If `msaa` is **true** and MSAA is enabled, this returns the MSAA variant of the buffer.
    /// 
    public final func getDepthLayer(_ layer: UInt32, msaa: Bool = false) -> RID {
        let _result: RID = RID ()
        withUnsafePointer(to: layer) { pArg0 in
            withUnsafePointer(to: msaa) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(RenderSceneBuffersRD.method_get_depth_layer, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result.content)
                    }
                    
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_get_velocity_texture: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_velocity_texture")
        return withUnsafePointer(to: &RenderSceneBuffersRD.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3050822880)!
            }
            
        }
        
    }()
    
    /// Returns the velocity texture we are rendering 3D content to. If multiview is used this will be a texture array with all views.
    /// 
    /// If `msaa` is **true** and MSAA is enabled, this returns the MSAA variant of the buffer.
    /// 
    public final func getVelocityTexture(msaa: Bool = false) -> RID {
        let _result: RID = RID ()
        withUnsafePointer(to: msaa) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(RenderSceneBuffersRD.method_get_velocity_texture, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result.content)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_get_velocity_layer: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_velocity_layer")
        return withUnsafePointer(to: &RenderSceneBuffersRD.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3087988589)!
            }
            
        }
        
    }()
    
    /// Returns the specified layer from the velocity texture we are rendering 3D content to.
    public final func getVelocityLayer(_ layer: UInt32, msaa: Bool = false) -> RID {
        let _result: RID = RID ()
        withUnsafePointer(to: layer) { pArg0 in
            withUnsafePointer(to: msaa) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(RenderSceneBuffersRD.method_get_velocity_layer, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result.content)
                    }
                    
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_get_render_target: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_render_target")
        return withUnsafePointer(to: &RenderSceneBuffersRD.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2944877500)!
            }
            
        }
        
    }()
    
    /// Returns the render target associated with this buffers object.
    public final func getRenderTarget() -> RID {
        let _result: RID = RID ()
        gi.object_method_bind_ptrcall(RenderSceneBuffersRD.method_get_render_target, UnsafeMutableRawPointer(mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_get_view_count: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_view_count")
        return withUnsafePointer(to: &RenderSceneBuffersRD.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    /// Returns the view count for the associated viewport.
    public final func getViewCount() -> UInt32 {
        var _result: UInt32 = 0
        gi.object_method_bind_ptrcall(RenderSceneBuffersRD.method_get_view_count, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_internal_size: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_internal_size")
        return withUnsafePointer(to: &RenderSceneBuffersRD.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3690982128)!
            }
            
        }
        
    }()
    
    /// Returns the internal size of the render buffer (size before upscaling) with which textures are created by default.
    public final func getInternalSize() -> Vector2i {
        var _result: Vector2i = Vector2i ()
        gi.object_method_bind_ptrcall(RenderSceneBuffersRD.method_get_internal_size, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_msaa_3d: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_msaa_3d")
        return withUnsafePointer(to: &RenderSceneBuffersRD.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3109158617)!
            }
            
        }
        
    }()
    
    /// Returns the applied 3D MSAA mode for this viewport.
    public final func getMsaa3d() -> RenderingServer.ViewportMSAA {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall(RenderSceneBuffersRD.method_get_msaa_3d, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return RenderingServer.ViewportMSAA (rawValue: _result)!
    }
    
    fileprivate static var method_get_use_taa: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_use_taa")
        return withUnsafePointer(to: &RenderSceneBuffersRD.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    /// Returns `true` if TAA is enabled.
    public final func getUseTaa() -> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall(RenderSceneBuffersRD.method_get_use_taa, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
}


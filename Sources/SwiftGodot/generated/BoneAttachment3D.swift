// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// А node that dynamically copies or overrides the 3D transform of a bone in its parent ``Skeleton3D``.
/// 
/// This node selects a bone in a ``Skeleton3D`` and attaches to it. This means that the ``BoneAttachment3D`` node will either dynamically copy or override the 3D transform of the selected bone.
open class BoneAttachment3D: Node3D {
    override open class var godotClassName: StringName { "BoneAttachment3D" }
    
    /* Properties */
    
    /// The name of the attached bone.
    final public var boneName: String {
        get {
            return get_bone_name ()
        }
        
        set {
            set_bone_name (newValue)
        }
        
    }
    
    /// The index of the attached bone.
    final public var boneIdx: Int32 {
        get {
            return get_bone_idx ()
        }
        
        set {
            set_bone_idx (newValue)
        }
        
    }
    
    /// Whether the BoneAttachment3D node will override the bone pose of the bone it is attached to. When set to `true`, the BoneAttachment3D node can change the pose of the bone. When set to `false`, the BoneAttachment3D will always be set to the bone's transform.
    /// 
    /// > Note: This override performs interruptively in the skeleton update process using signals due to the old design. It may cause unintended behavior when used at the same time with ``SkeletonModifier3D``.
    /// 
    final public var overridePose: Bool {
        get {
            return get_override_pose ()
        }
        
        set {
            set_override_pose (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_bone_name: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_bone_name")
        return withUnsafePointer(to: &BoneAttachment3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_bone_name(_ boneName: String) {
        let boneName = GString(boneName)
        withUnsafePointer(to: boneName.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(BoneAttachment3D.method_set_bone_name, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_bone_name: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_bone_name")
        return withUnsafePointer(to: &BoneAttachment3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_bone_name() -> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall(BoneAttachment3D.method_get_bone_name, UnsafeMutableRawPointer(mutating: handle), nil, &_result.content)
        return _result.description
    }
    
    fileprivate static var method_set_bone_idx: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_bone_idx")
        return withUnsafePointer(to: &BoneAttachment3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_bone_idx(_ boneIdx: Int32) {
        withUnsafePointer(to: boneIdx) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(BoneAttachment3D.method_set_bone_idx, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_bone_idx: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_bone_idx")
        return withUnsafePointer(to: &BoneAttachment3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_bone_idx() -> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall(BoneAttachment3D.method_get_bone_idx, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_on_skeleton_update: GDExtensionMethodBindPtr = {
        let methodName = StringName("on_skeleton_update")
        return withUnsafePointer(to: &BoneAttachment3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// A function that is called automatically when the ``Skeleton3D`` is updated. This function is where the ``BoneAttachment3D`` node updates its position so it is correctly bound when it is _not_ set to override the bone pose.
    public final func onSkeletonUpdate() {
        gi.object_method_bind_ptrcall(BoneAttachment3D.method_on_skeleton_update, UnsafeMutableRawPointer(mutating: handle), nil, nil)
        
    }
    
    fileprivate static var method_set_override_pose: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_override_pose")
        return withUnsafePointer(to: &BoneAttachment3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_override_pose(_ overridePose: Bool) {
        withUnsafePointer(to: overridePose) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(BoneAttachment3D.method_set_override_pose, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_override_pose: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_override_pose")
        return withUnsafePointer(to: &BoneAttachment3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_override_pose() -> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall(BoneAttachment3D.method_get_override_pose, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_use_external_skeleton: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_use_external_skeleton")
        return withUnsafePointer(to: &BoneAttachment3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    /// Sets whether the BoneAttachment3D node will use an external ``Skeleton3D`` node rather than attempting to use its parent node as the ``Skeleton3D``. When set to `true`, the BoneAttachment3D node will use the external ``Skeleton3D`` node set in ``setExternalSkeleton(_:)``.
    public final func setUseExternalSkeleton(_ useExternalSkeleton: Bool) {
        withUnsafePointer(to: useExternalSkeleton) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(BoneAttachment3D.method_set_use_external_skeleton, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_use_external_skeleton: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_use_external_skeleton")
        return withUnsafePointer(to: &BoneAttachment3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    /// Returns whether the BoneAttachment3D node is using an external ``Skeleton3D`` rather than attempting to use its parent node as the ``Skeleton3D``.
    public final func getUseExternalSkeleton() -> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall(BoneAttachment3D.method_get_use_external_skeleton, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_external_skeleton: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_external_skeleton")
        return withUnsafePointer(to: &BoneAttachment3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1348162250)!
            }
            
        }
        
    }()
    
    /// Sets the ``NodePath`` to the external skeleton that the BoneAttachment3D node should use. See ``setUseExternalSkeleton(_:)`` to enable the external ``Skeleton3D`` node.
    public final func setExternalSkeleton(_ externalSkeleton: NodePath) {
        withUnsafePointer(to: externalSkeleton.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(BoneAttachment3D.method_set_external_skeleton, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_external_skeleton: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_external_skeleton")
        return withUnsafePointer(to: &BoneAttachment3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 4075236667)!
            }
            
        }
        
    }()
    
    /// Returns the ``NodePath`` to the external ``Skeleton3D`` node, if one has been set.
    public final func getExternalSkeleton() -> NodePath {
        let _result: NodePath = NodePath ()
        gi.object_method_bind_ptrcall(BoneAttachment3D.method_get_external_skeleton, UnsafeMutableRawPointer(mutating: handle), nil, &_result.content)
        return _result
    }
    
}


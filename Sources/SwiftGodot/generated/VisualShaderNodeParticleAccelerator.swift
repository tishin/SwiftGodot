// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A visual shader node that accelerates particles.
/// 
/// Particle accelerator can be used in "process" step of particle shader. It will accelerate the particles. Connect it to the Velocity output port.
open class VisualShaderNodeParticleAccelerator: VisualShaderNode {
    override open class var godotClassName: StringName { "VisualShaderNodeParticleAccelerator" }
    public enum Mode: Int64, CaseIterable, CustomDebugStringConvertible {
        /// The particles will be accelerated based on their velocity.
        case linear = 0 // MODE_LINEAR
        /// The particles will be accelerated towards or away from the center.
        case radial = 1 // MODE_RADIAL
        /// The particles will be accelerated tangentially to the radius vector from center to their position.
        case tangential = 2 // MODE_TANGENTIAL
        /// Represents the size of the ``VisualShaderNodeParticleAccelerator/Mode`` enum.
        case max = 3 // MODE_MAX
        /// A textual representation of this instance, suitable for debugging
        public var debugDescription: String {
            switch self {
                case .linear: return ".linear"
                case .radial: return ".radial"
                case .tangential: return ".tangential"
                case .max: return ".max"
            }
            
        }
        
    }
    
    
    /* Properties */
    
    /// Defines in what manner the particles will be accelerated.
    final public var mode: VisualShaderNodeParticleAccelerator.Mode {
        get {
            return get_mode ()
        }
        
        set {
            set_mode (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_mode")
        return withUnsafePointer(to: &VisualShaderNodeParticleAccelerator.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3457585749)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_mode(_ mode: VisualShaderNodeParticleAccelerator.Mode) {
        withUnsafePointer(to: mode.rawValue) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(VisualShaderNodeParticleAccelerator.method_set_mode, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_mode")
        return withUnsafePointer(to: &VisualShaderNodeParticleAccelerator.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2660365633)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_mode() -> VisualShaderNodeParticleAccelerator.Mode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall(VisualShaderNodeParticleAccelerator.method_get_mode, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return VisualShaderNodeParticleAccelerator.Mode (rawValue: _result)!
    }
    
}


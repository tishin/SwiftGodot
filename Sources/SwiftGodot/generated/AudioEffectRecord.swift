// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Audio effect used for recording the sound from an audio bus.
/// 
/// Allows the user to record the sound from an audio bus into an ``AudioStreamWAV``. When used on the "Master" audio bus, this includes all audio output by Godot.
/// 
/// Unlike ``AudioEffectCapture``, this effect encodes the recording with the given format (8-bit, 16-bit, or compressed) instead of giving access to the raw audio samples.
/// 
/// Can be used (with an ``AudioStreamMicrophone``) to record from a microphone.
/// 
/// > Note: ``ProjectSettings/audio/driver/enableInput`` must be `true` for audio input to work. See also that setting's description for caveats related to permissions and operating system privacy settings.
/// 
open class AudioEffectRecord: AudioEffect {
    override open class var godotClassName: StringName { "AudioEffectRecord" }
    
    /* Properties */
    
    /// Specifies the format in which the sample will be recorded. See ``AudioStreamWAV.Format`` for available formats.
    final public var format: AudioStreamWAV.Format {
        get {
            return get_format ()
        }
        
        set {
            set_format (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_recording_active: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_recording_active")
        return withUnsafePointer(to: &AudioEffectRecord.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    /// If `true`, the sound will be recorded. Note that restarting the recording will remove the previously recorded sample.
    public final func setRecordingActive(record: Bool) {
        withUnsafePointer(to: record) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(AudioEffectRecord.method_set_recording_active, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_is_recording_active: GDExtensionMethodBindPtr = {
        let methodName = StringName("is_recording_active")
        return withUnsafePointer(to: &AudioEffectRecord.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    /// Returns whether the recording is active or not.
    public final func isRecordingActive() -> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall(AudioEffectRecord.method_is_recording_active, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_format: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_format")
        return withUnsafePointer(to: &AudioEffectRecord.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 60648488)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_format(_ format: AudioStreamWAV.Format) {
        withUnsafePointer(to: format.rawValue) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(AudioEffectRecord.method_set_format, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_format: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_format")
        return withUnsafePointer(to: &AudioEffectRecord.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3151724922)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_format() -> AudioStreamWAV.Format {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall(AudioEffectRecord.method_get_format, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return AudioStreamWAV.Format (rawValue: _result)!
    }
    
    fileprivate static var method_get_recording: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_recording")
        return withUnsafePointer(to: &AudioEffectRecord.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2964110865)!
            }
            
        }
        
    }()
    
    /// Returns the recorded sample.
    public final func getRecording() -> AudioStreamWAV? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall(AudioEffectRecord.method_get_recording, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
}


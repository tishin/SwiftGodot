// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A snippet of shader code to be included in a ``Shader`` with `#include`.
/// 
/// A shader include file, saved with the `.gdshaderinc` extension. This class allows you to define a custom shader snippet that can be included in a ``Shader`` by using the preprocessor directive `#include`, followed by the file path (e.g. `#include "res://shader_lib.gdshaderinc"`). The snippet doesn't have to be a valid shader on its own.
open class ShaderInclude: Resource {
    override open class var godotClassName: StringName { "ShaderInclude" }
    
    /* Properties */
    
    /// Returns the code of the shader include file. The returned text is what the user has written, not the full generated code used internally.
    final public var code: String {
        get {
            return get_code ()
        }
        
        set {
            set_code (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_code: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_code")
        return withUnsafePointer(to: &ShaderInclude.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_code(_ code: String) {
        let code = GString(code)
        withUnsafePointer(to: code.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(ShaderInclude.method_set_code, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_code: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_code")
        return withUnsafePointer(to: &ShaderInclude.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_code() -> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall(ShaderInclude.method_get_code, UnsafeMutableRawPointer(mutating: handle), nil, &_result.content)
        return _result.description
    }
    
}


// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Base class for ``AnimationNode``s with multiple input ports that must be synchronized.
/// 
/// An animation node used to combine, mix, or blend two or more animations together while keeping them synchronized within an ``AnimationTree``.
open class AnimationNodeSync: AnimationNode {
    override open class var godotClassName: StringName { "AnimationNodeSync" }
    
    /* Properties */
    
    /// If `false`, the blended animations' frame are stopped when the blend value is `0`.
    /// 
    /// If `true`, forcing the blended animations to advance frame.
    /// 
    final public var sync: Bool {
        get {
            return is_using_sync ()
        }
        
        set {
            set_use_sync (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_use_sync: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_use_sync")
        return withUnsafePointer(to: &AnimationNodeSync.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_use_sync(_ enable: Bool) {
        withUnsafePointer(to: enable) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(AnimationNodeSync.method_set_use_sync, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_is_using_sync: GDExtensionMethodBindPtr = {
        let methodName = StringName("is_using_sync")
        return withUnsafePointer(to: &AnimationNodeSync.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_using_sync() -> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall(AnimationNodeSync.method_is_using_sync, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
}


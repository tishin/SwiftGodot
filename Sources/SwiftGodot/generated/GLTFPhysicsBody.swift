// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Represents a GLTF physics body.
/// 
/// Represents a physics body as an intermediary between the `OMI_physics_body` GLTF data and Godot's nodes, and it's abstracted in a way that allows adding support for different GLTF physics extensions in the future.
open class GLTFPhysicsBody: Resource {
    override open class var godotClassName: StringName { "GLTFPhysicsBody" }
    
    /* Properties */
    
    /// The type of the body. When importing, this controls what type of ``CollisionObject3D`` node Godot should generate. Valid values are "static", "animatable", "character", "rigid", "vehicle", and "trigger". When exporting, this will be squashed down to one of "static", "kinematic", or "dynamic" motion types, or the "trigger" property.
    final public var bodyType: String {
        get {
            return get_body_type ()
        }
        
        set {
            set_body_type (newValue)
        }
        
    }
    
    /// The mass of the physics body, in kilograms. This is only used when the body type is "rigid" or "vehicle".
    final public var mass: Double {
        get {
            return get_mass ()
        }
        
        set {
            set_mass (newValue)
        }
        
    }
    
    /// The linear velocity of the physics body, in meters per second. This is only used when the body type is "rigid" or "vehicle".
    final public var linearVelocity: Vector3 {
        get {
            return get_linear_velocity ()
        }
        
        set {
            set_linear_velocity (newValue)
        }
        
    }
    
    /// The angular velocity of the physics body, in radians per second. This is only used when the body type is "rigid" or "vehicle".
    final public var angularVelocity: Vector3 {
        get {
            return get_angular_velocity ()
        }
        
        set {
            set_angular_velocity (newValue)
        }
        
    }
    
    /// The center of mass of the body, in meters. This is in local space relative to the body. By default, the center of the mass is the body's origin.
    final public var centerOfMass: Vector3 {
        get {
            return get_center_of_mass ()
        }
        
        set {
            set_center_of_mass (newValue)
        }
        
    }
    
    /// The inertia strength of the physics body, in kilogram meter squared (kg⋅m²). This represents the inertia around the principle axes, the diagonal of the inertia tensor matrix. This is only used when the body type is "rigid" or "vehicle".
    /// 
    /// When converted to a Godot ``RigidBody3D`` node, if this value is zero, then the inertia will be calculated automatically.
    /// 
    final public var inertiaDiagonal: Vector3 {
        get {
            return get_inertia_diagonal ()
        }
        
        set {
            set_inertia_diagonal (newValue)
        }
        
    }
    
    /// The inertia orientation of the physics body. This defines the rotation of the inertia's principle axes relative to the object's local axes. This is only used when the body type is "rigid" or "vehicle" and ``inertiaDiagonal`` is set to a non-zero value.
    final public var inertiaOrientation: Quaternion {
        get {
            return get_inertia_orientation ()
        }
        
        set {
            set_inertia_orientation (newValue)
        }
        
    }
    
    /// The inertia tensor of the physics body, in kilogram meter squared (kg⋅m²). This is only used when the body type is "rigid" or "vehicle".
    /// 
    /// When converted to a Godot ``RigidBody3D`` node, if this value is zero, then the inertia will be calculated automatically.
    /// 
    final public var inertiaTensor: Basis {
        get {
            return get_inertia_tensor ()
        }
        
        set {
            set_inertia_tensor (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_from_node: GDExtensionMethodBindPtr = {
        let methodName = StringName("from_node")
        return withUnsafePointer(to: &GLTFPhysicsBody.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 420544174)!
            }
            
        }
        
    }()
    
    /// Creates a new GLTFPhysicsBody instance from the given Godot ``CollisionObject3D`` node.
    public static func fromNode(bodyNode: CollisionObject3D?) -> GLTFPhysicsBody? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        withUnsafePointer(to: bodyNode?.handle) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_from_node, nil, pArgs, &_result)
                }
                
            }
            
        }
        
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_to_node: GDExtensionMethodBindPtr = {
        let methodName = StringName("to_node")
        return withUnsafePointer(to: &GLTFPhysicsBody.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3224013656)!
            }
            
        }
        
    }()
    
    /// Converts this GLTFPhysicsBody instance into a Godot ``CollisionObject3D`` node.
    public final func toNode() -> CollisionObject3D? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall(GLTFPhysicsBody.method_to_node, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_from_dictionary: GDExtensionMethodBindPtr = {
        let methodName = StringName("from_dictionary")
        return withUnsafePointer(to: &GLTFPhysicsBody.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1177544336)!
            }
            
        }
        
    }()
    
    /// Creates a new GLTFPhysicsBody instance by parsing the given ``GDictionary`` in the `OMI_physics_body` GLTF extension format.
    public static func fromDictionary(_ dictionary: GDictionary) -> GLTFPhysicsBody? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        withUnsafePointer(to: dictionary.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_from_dictionary, nil, pArgs, &_result)
                }
                
            }
            
        }
        
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_to_dictionary: GDExtensionMethodBindPtr = {
        let methodName = StringName("to_dictionary")
        return withUnsafePointer(to: &GLTFPhysicsBody.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3102165223)!
            }
            
        }
        
    }()
    
    /// Serializes this GLTFPhysicsBody instance into a ``GDictionary``. It will be in the format expected by the `OMI_physics_body` GLTF extension.
    public final func toDictionary() -> GDictionary {
        let _result: GDictionary = GDictionary ()
        gi.object_method_bind_ptrcall(GLTFPhysicsBody.method_to_dictionary, UnsafeMutableRawPointer(mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_get_body_type: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_body_type")
        return withUnsafePointer(to: &GLTFPhysicsBody.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_body_type() -> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall(GLTFPhysicsBody.method_get_body_type, UnsafeMutableRawPointer(mutating: handle), nil, &_result.content)
        return _result.description
    }
    
    fileprivate static var method_set_body_type: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_body_type")
        return withUnsafePointer(to: &GLTFPhysicsBody.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_body_type(_ bodyType: String) {
        let bodyType = GString(bodyType)
        withUnsafePointer(to: bodyType.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(GLTFPhysicsBody.method_set_body_type, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_mass: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_mass")
        return withUnsafePointer(to: &GLTFPhysicsBody.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_mass() -> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall(GLTFPhysicsBody.method_get_mass, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_mass: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_mass")
        return withUnsafePointer(to: &GLTFPhysicsBody.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_mass(_ mass: Double) {
        withUnsafePointer(to: mass) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(GLTFPhysicsBody.method_set_mass, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_linear_velocity: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_linear_velocity")
        return withUnsafePointer(to: &GLTFPhysicsBody.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3360562783)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_linear_velocity() -> Vector3 {
        var _result: Vector3 = Vector3 ()
        gi.object_method_bind_ptrcall(GLTFPhysicsBody.method_get_linear_velocity, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_linear_velocity: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_linear_velocity")
        return withUnsafePointer(to: &GLTFPhysicsBody.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3460891852)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_linear_velocity(_ linearVelocity: Vector3) {
        withUnsafePointer(to: linearVelocity) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(GLTFPhysicsBody.method_set_linear_velocity, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_angular_velocity: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_angular_velocity")
        return withUnsafePointer(to: &GLTFPhysicsBody.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3360562783)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_angular_velocity() -> Vector3 {
        var _result: Vector3 = Vector3 ()
        gi.object_method_bind_ptrcall(GLTFPhysicsBody.method_get_angular_velocity, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_angular_velocity: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_angular_velocity")
        return withUnsafePointer(to: &GLTFPhysicsBody.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3460891852)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_angular_velocity(_ angularVelocity: Vector3) {
        withUnsafePointer(to: angularVelocity) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(GLTFPhysicsBody.method_set_angular_velocity, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_center_of_mass: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_center_of_mass")
        return withUnsafePointer(to: &GLTFPhysicsBody.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3360562783)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_center_of_mass() -> Vector3 {
        var _result: Vector3 = Vector3 ()
        gi.object_method_bind_ptrcall(GLTFPhysicsBody.method_get_center_of_mass, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_center_of_mass: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_center_of_mass")
        return withUnsafePointer(to: &GLTFPhysicsBody.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3460891852)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_center_of_mass(_ centerOfMass: Vector3) {
        withUnsafePointer(to: centerOfMass) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(GLTFPhysicsBody.method_set_center_of_mass, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_inertia_diagonal: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_inertia_diagonal")
        return withUnsafePointer(to: &GLTFPhysicsBody.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3360562783)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_inertia_diagonal() -> Vector3 {
        var _result: Vector3 = Vector3 ()
        gi.object_method_bind_ptrcall(GLTFPhysicsBody.method_get_inertia_diagonal, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_inertia_diagonal: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_inertia_diagonal")
        return withUnsafePointer(to: &GLTFPhysicsBody.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3460891852)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_inertia_diagonal(_ inertiaDiagonal: Vector3) {
        withUnsafePointer(to: inertiaDiagonal) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(GLTFPhysicsBody.method_set_inertia_diagonal, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_inertia_orientation: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_inertia_orientation")
        return withUnsafePointer(to: &GLTFPhysicsBody.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1222331677)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_inertia_orientation() -> Quaternion {
        var _result: Quaternion = Quaternion ()
        gi.object_method_bind_ptrcall(GLTFPhysicsBody.method_get_inertia_orientation, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_inertia_orientation: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_inertia_orientation")
        return withUnsafePointer(to: &GLTFPhysicsBody.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1727505552)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_inertia_orientation(_ inertiaOrientation: Quaternion) {
        withUnsafePointer(to: inertiaOrientation) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(GLTFPhysicsBody.method_set_inertia_orientation, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_inertia_tensor: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_inertia_tensor")
        return withUnsafePointer(to: &GLTFPhysicsBody.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2716978435)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_inertia_tensor() -> Basis {
        var _result: Basis = Basis ()
        gi.object_method_bind_ptrcall(GLTFPhysicsBody.method_get_inertia_tensor, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_inertia_tensor: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_inertia_tensor")
        return withUnsafePointer(to: &GLTFPhysicsBody.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1055510324)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_inertia_tensor(_ inertiaTensor: Basis) {
        withUnsafePointer(to: inertiaTensor) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(GLTFPhysicsBody.method_set_inertia_tensor, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
}


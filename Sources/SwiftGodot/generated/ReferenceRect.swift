// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A rectangle hint for designing UIs.
/// 
/// A rectangle box that displays only a colored border around its rectangle. It is used to visualize the extents of a ``Control``.
open class ReferenceRect: Control {
    override open class var godotClassName: StringName { "ReferenceRect" }
    
    /* Properties */
    
    /// Sets the border color of the ``ReferenceRect``.
    final public var borderColor: Color {
        get {
            return get_border_color ()
        }
        
        set {
            set_border_color (newValue)
        }
        
    }
    
    /// Sets the border width of the ``ReferenceRect``. The border grows both inwards and outwards with respect to the rectangle box.
    final public var borderWidth: Double {
        get {
            return get_border_width ()
        }
        
        set {
            set_border_width (newValue)
        }
        
    }
    
    /// If `true`, the ``ReferenceRect`` will only be visible while in editor. Otherwise, ``ReferenceRect`` will be visible in the running project.
    final public var editorOnly: Bool {
        get {
            return get_editor_only ()
        }
        
        set {
            set_editor_only (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_get_border_color: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_border_color")
        return withUnsafePointer(to: &ReferenceRect.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3444240500)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_border_color() -> Color {
        var _result: Color = Color ()
        gi.object_method_bind_ptrcall(ReferenceRect.method_get_border_color, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_border_color: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_border_color")
        return withUnsafePointer(to: &ReferenceRect.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2920490490)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_border_color(_ color: Color) {
        withUnsafePointer(to: color) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(ReferenceRect.method_set_border_color, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_border_width: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_border_width")
        return withUnsafePointer(to: &ReferenceRect.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_border_width() -> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall(ReferenceRect.method_get_border_width, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_border_width: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_border_width")
        return withUnsafePointer(to: &ReferenceRect.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_border_width(_ width: Double) {
        withUnsafePointer(to: width) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(ReferenceRect.method_set_border_width, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_editor_only: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_editor_only")
        return withUnsafePointer(to: &ReferenceRect.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_editor_only() -> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall(ReferenceRect.method_get_editor_only, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_editor_only: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_editor_only")
        return withUnsafePointer(to: &ReferenceRect.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_editor_only(_ enabled: Bool) {
        withUnsafePointer(to: enabled) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(ReferenceRect.method_set_editor_only, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
}


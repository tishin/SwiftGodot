// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Godot editor's command palette.
/// 
/// Object that holds all the available Commands and their shortcuts text. These Commands can be accessed through **Editor > Command Palette** menu.
/// 
/// Command key names use slash delimiters to distinguish sections, for example: `"example/command1"` then `example` will be the section name.
/// 
/// > Note: This class shouldn't be instantiated directly. Instead, access the singleton using ``EditorInterface/getCommandPalette()``.
/// 
open class EditorCommandPalette: ConfirmationDialog {
    override open class var godotClassName: StringName { "EditorCommandPalette" }
    /* Methods */
    fileprivate static var method_add_command: GDExtensionMethodBindPtr = {
        let methodName = StringName("add_command")
        return withUnsafePointer(to: &EditorCommandPalette.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 864043298)!
            }
            
        }
        
    }()
    
    /// Adds a custom command to EditorCommandPalette.
    /// 
    /// - `commandName`: ``String`` (Name of the **Command**. This is displayed to the user.)
    /// 
    /// - `keyName`: ``String`` (Name of the key for a particular **Command**. This is used to uniquely identify the **Command**.)
    /// 
    /// - `bindedCallable`: ``Callable`` (Callable of the **Command**. This will be executed when the **Command** is selected.)
    /// 
    /// - `shortcutText`: ``String`` (Shortcut text of the **Command** if available.)
    /// 
    public final func addCommand(commandName: String, keyName: String, bindedCallable: Callable, shortcutText: String = "None") {
        let commandName = GString(commandName)
        withUnsafePointer(to: commandName.content) { pArg0 in
            let keyName = GString(keyName)
            withUnsafePointer(to: keyName.content) { pArg1 in
                withUnsafePointer(to: bindedCallable.content) { pArg2 in
                    let shortcutText = GString(shortcutText)
                    withUnsafePointer(to: shortcutText.content) { pArg3 in
                        withUnsafePointer(to: UnsafeRawPointersN4(pArg0, pArg1, pArg2, pArg3)) { pArgs in
                            pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 4) { pArgs in
                                gi.object_method_bind_ptrcall(EditorCommandPalette.method_add_command, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                            }
                            
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_remove_command: GDExtensionMethodBindPtr = {
        let methodName = StringName("remove_command")
        return withUnsafePointer(to: &EditorCommandPalette.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    /// Removes the custom command from EditorCommandPalette.
    /// 
    /// - `keyName`: ``String`` (Name of the key for a particular **Command**.)
    /// 
    public final func removeCommand(keyName: String) {
        let keyName = GString(keyName)
        withUnsafePointer(to: keyName.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(EditorCommandPalette.method_remove_command, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
}


// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Server interface for low-level audio access.
/// 
/// ``AudioServer`` is a low-level server interface for audio access. It is in charge of creating sample data (playable audio) as well as its playback via a voice interface.
/// 
/// 
/// This object emits the following signals:
/// 
/// - ``busLayoutChanged``
/// - ``busRenamed``
open class AudioServer: Object {
    /// The shared instance of this class
    public static var shared: AudioServer = {
        return withUnsafePointer (to: &AudioServer.godotClassName.content) { ptr in
            AudioServer (nativeHandle: gi.global_get_singleton (ptr)!)
        }
        
    }()
    
    override open class var godotClassName: StringName { "AudioServer" }
    public enum SpeakerMode: Int64, CaseIterable, CustomDebugStringConvertible {
        /// Two or fewer speakers were detected.
        case modeStereo = 0 // SPEAKER_MODE_STEREO
        /// A 3.1 channel surround setup was detected.
        case surround31 = 1 // SPEAKER_SURROUND_31
        /// A 5.1 channel surround setup was detected.
        case surround51 = 2 // SPEAKER_SURROUND_51
        /// A 7.1 channel surround setup was detected.
        case surround71 = 3 // SPEAKER_SURROUND_71
        /// A textual representation of this instance, suitable for debugging
        public var debugDescription: String {
            switch self {
                case .modeStereo: return ".modeStereo"
                case .surround31: return ".surround31"
                case .surround51: return ".surround51"
                case .surround71: return ".surround71"
            }
            
        }
        
    }
    
    public enum PlaybackType: Int64, CaseIterable, CustomDebugStringConvertible {
        /// The playback will be considered of the type declared at ``ProjectSettings/audio/general/defaultPlaybackType``.
        case `default` = 0 // PLAYBACK_TYPE_DEFAULT
        /// Force the playback to be considered as a stream.
        case stream = 1 // PLAYBACK_TYPE_STREAM
        /// Force the playback to be considered as a sample. This can provide lower latency and more stable playback (with less risk of audio crackling), at the cost of having less flexibility.
        /// 
        /// > Note: Only currently supported on the web platform.
        /// 
        /// > Note: ``AudioEffect``s are not supported when playback is considered as a sample.
        /// 
        case sample = 2 // PLAYBACK_TYPE_SAMPLE
        /// Represents the size of the ``AudioServer/PlaybackType`` enum.
        case max = 3 // PLAYBACK_TYPE_MAX
        /// A textual representation of this instance, suitable for debugging
        public var debugDescription: String {
            switch self {
                case .`default`: return ".`default`"
                case .stream: return ".stream"
                case .sample: return ".sample"
                case .max: return ".max"
            }
            
        }
        
    }
    
    
    /* Properties */
    
    /// Number of available audio buses.
    static public var busCount: Int32 {
        get {
            return get_bus_count ()
        }
        
        set {
            set_bus_count (newValue)
        }
        
    }
    
    /// Name of the current device for audio output (see ``getOutputDeviceList()``). On systems with multiple audio outputs (such as analog, USB and HDMI audio), this can be used to select the audio output device. The value `"Default"` will play audio on the system-wide default audio output. If an invalid device name is set, the value will be reverted back to `"Default"`.
    static public var outputDevice: String {
        get {
            return get_output_device ()
        }
        
        set {
            set_output_device (newValue)
        }
        
    }
    
    /// Name of the current device for audio input (see ``getInputDeviceList()``). On systems with multiple audio inputs (such as analog, USB and HDMI audio), this can be used to select the audio input device. The value `"Default"` will record audio on the system-wide default audio input. If an invalid device name is set, the value will be reverted back to `"Default"`.
    /// 
    /// > Note: ``ProjectSettings/audio/driver/enableInput`` must be `true` for audio input to work. See also that setting's description for caveats related to permissions and operating system privacy settings.
    /// 
    static public var inputDevice: String {
        get {
            return get_input_device ()
        }
        
        set {
            set_input_device (newValue)
        }
        
    }
    
    /// Scales the rate at which audio is played (i.e. setting it to `0.5` will make the audio be played at half its speed). See also ``Engine/timeScale`` to affect the general simulation speed, which is independent from ``AudioServer/playbackSpeedScale``.
    static public var playbackSpeedScale: Double {
        get {
            return get_playback_speed_scale ()
        }
        
        set {
            set_playback_speed_scale (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_bus_count: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_bus_count")
        return withUnsafePointer(to: &AudioServer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate static func set_bus_count(_ amount: Int32) {
        withUnsafePointer(to: amount) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_set_bus_count, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_bus_count: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_bus_count")
        return withUnsafePointer(to: &AudioServer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate static func get_bus_count() -> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall(method_get_bus_count, UnsafeMutableRawPointer(mutating: shared.handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_remove_bus: GDExtensionMethodBindPtr = {
        let methodName = StringName("remove_bus")
        return withUnsafePointer(to: &AudioServer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    /// Removes the bus at index `index`.
    public static func removeBus(index: Int32) {
        withUnsafePointer(to: index) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_remove_bus, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_add_bus: GDExtensionMethodBindPtr = {
        let methodName = StringName("add_bus")
        return withUnsafePointer(to: &AudioServer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1025054187)!
            }
            
        }
        
    }()
    
    /// Adds a bus at `atPosition`.
    public static func addBus(atPosition: Int32 = -1) {
        withUnsafePointer(to: atPosition) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_add_bus, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_move_bus: GDExtensionMethodBindPtr = {
        let methodName = StringName("move_bus")
        return withUnsafePointer(to: &AudioServer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3937882851)!
            }
            
        }
        
    }()
    
    /// Moves the bus from index `index` to index `toIndex`.
    public static func moveBus(index: Int32, toIndex: Int32) {
        withUnsafePointer(to: index) { pArg0 in
            withUnsafePointer(to: toIndex) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_move_bus, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_set_bus_name: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_bus_name")
        return withUnsafePointer(to: &AudioServer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 501894301)!
            }
            
        }
        
    }()
    
    /// Sets the name of the bus at index `busIdx` to `name`.
    public static func setBusName(busIdx: Int32, name: String) {
        withUnsafePointer(to: busIdx) { pArg0 in
            let name = GString(name)
            withUnsafePointer(to: name.content) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_set_bus_name, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_bus_name: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_bus_name")
        return withUnsafePointer(to: &AudioServer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 844755477)!
            }
            
        }
        
    }()
    
    /// Returns the name of the bus with the index `busIdx`.
    public static func getBusName(busIdx: Int32) -> String {
        let _result = GString ()
        withUnsafePointer(to: busIdx) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_get_bus_name, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result.content)
                }
                
            }
            
        }
        
        return _result.description
    }
    
    fileprivate static var method_get_bus_index: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_bus_index")
        return withUnsafePointer(to: &AudioServer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2458036349)!
            }
            
        }
        
    }()
    
    /// Returns the index of the bus with the name `busName`. Returns `-1` if no bus with the specified name exist.
    public static func getBusIndex(busName: StringName) -> Int32 {
        var _result: Int32 = 0
        withUnsafePointer(to: busName.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_get_bus_index, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_get_bus_channels: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_bus_channels")
        return withUnsafePointer(to: &AudioServer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 923996154)!
            }
            
        }
        
    }()
    
    /// Returns the number of channels of the bus at index `busIdx`.
    public static func getBusChannels(busIdx: Int32) -> Int32 {
        var _result: Int32 = 0
        withUnsafePointer(to: busIdx) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_get_bus_channels, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_set_bus_volume_db: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_bus_volume_db")
        return withUnsafePointer(to: &AudioServer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1602489585)!
            }
            
        }
        
    }()
    
    /// Sets the volume of the bus at index `busIdx` to `volumeDb`.
    public static func setBusVolumeDb(busIdx: Int32, volumeDb: Double) {
        withUnsafePointer(to: busIdx) { pArg0 in
            withUnsafePointer(to: volumeDb) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_set_bus_volume_db, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_bus_volume_db: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_bus_volume_db")
        return withUnsafePointer(to: &AudioServer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2339986948)!
            }
            
        }
        
    }()
    
    /// Returns the volume of the bus at index `busIdx` in dB.
    public static func getBusVolumeDb(busIdx: Int32) -> Double {
        var _result: Double = 0.0
        withUnsafePointer(to: busIdx) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_get_bus_volume_db, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_set_bus_send: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_bus_send")
        return withUnsafePointer(to: &AudioServer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3780747571)!
            }
            
        }
        
    }()
    
    /// Connects the output of the bus at `busIdx` to the bus named `send`.
    public static func setBusSend(busIdx: Int32, send: StringName) {
        withUnsafePointer(to: busIdx) { pArg0 in
            withUnsafePointer(to: send.content) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_set_bus_send, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_bus_send: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_bus_send")
        return withUnsafePointer(to: &AudioServer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 659327637)!
            }
            
        }
        
    }()
    
    /// Returns the name of the bus that the bus at index `busIdx` sends to.
    public static func getBusSend(busIdx: Int32) -> StringName {
        let _result: StringName = StringName ()
        withUnsafePointer(to: busIdx) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_get_bus_send, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result.content)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_set_bus_solo: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_bus_solo")
        return withUnsafePointer(to: &AudioServer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 300928843)!
            }
            
        }
        
    }()
    
    /// If `true`, the bus at index `busIdx` is in solo mode.
    public static func setBusSolo(busIdx: Int32, enable: Bool) {
        withUnsafePointer(to: busIdx) { pArg0 in
            withUnsafePointer(to: enable) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_set_bus_solo, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_is_bus_solo: GDExtensionMethodBindPtr = {
        let methodName = StringName("is_bus_solo")
        return withUnsafePointer(to: &AudioServer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1116898809)!
            }
            
        }
        
    }()
    
    /// If `true`, the bus at index `busIdx` is in solo mode.
    public static func isBusSolo(busIdx: Int32) -> Bool {
        var _result: Bool = false
        withUnsafePointer(to: busIdx) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_is_bus_solo, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_set_bus_mute: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_bus_mute")
        return withUnsafePointer(to: &AudioServer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 300928843)!
            }
            
        }
        
    }()
    
    /// If `true`, the bus at index `busIdx` is muted.
    public static func setBusMute(busIdx: Int32, enable: Bool) {
        withUnsafePointer(to: busIdx) { pArg0 in
            withUnsafePointer(to: enable) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_set_bus_mute, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_is_bus_mute: GDExtensionMethodBindPtr = {
        let methodName = StringName("is_bus_mute")
        return withUnsafePointer(to: &AudioServer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1116898809)!
            }
            
        }
        
    }()
    
    /// If `true`, the bus at index `busIdx` is muted.
    public static func isBusMute(busIdx: Int32) -> Bool {
        var _result: Bool = false
        withUnsafePointer(to: busIdx) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_is_bus_mute, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_set_bus_bypass_effects: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_bus_bypass_effects")
        return withUnsafePointer(to: &AudioServer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 300928843)!
            }
            
        }
        
    }()
    
    /// If `true`, the bus at index `busIdx` is bypassing effects.
    public static func setBusBypassEffects(busIdx: Int32, enable: Bool) {
        withUnsafePointer(to: busIdx) { pArg0 in
            withUnsafePointer(to: enable) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_set_bus_bypass_effects, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_is_bus_bypassing_effects: GDExtensionMethodBindPtr = {
        let methodName = StringName("is_bus_bypassing_effects")
        return withUnsafePointer(to: &AudioServer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1116898809)!
            }
            
        }
        
    }()
    
    /// If `true`, the bus at index `busIdx` is bypassing effects.
    public static func isBusBypassingEffects(busIdx: Int32) -> Bool {
        var _result: Bool = false
        withUnsafePointer(to: busIdx) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_is_bus_bypassing_effects, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_add_bus_effect: GDExtensionMethodBindPtr = {
        let methodName = StringName("add_bus_effect")
        return withUnsafePointer(to: &AudioServer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 4068819785)!
            }
            
        }
        
    }()
    
    /// Adds an ``AudioEffect`` effect to the bus `busIdx` at `atPosition`.
    public static func addBusEffect(busIdx: Int32, effect: AudioEffect?, atPosition: Int32 = -1) {
        withUnsafePointer(to: busIdx) { pArg0 in
            withUnsafePointer(to: effect?.handle) { pArg1 in
                withUnsafePointer(to: atPosition) { pArg2 in
                    withUnsafePointer(to: UnsafeRawPointersN3(pArg0, pArg1, pArg2)) { pArgs in
                        pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 3) { pArgs in
                            gi.object_method_bind_ptrcall(method_add_bus_effect, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_remove_bus_effect: GDExtensionMethodBindPtr = {
        let methodName = StringName("remove_bus_effect")
        return withUnsafePointer(to: &AudioServer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3937882851)!
            }
            
        }
        
    }()
    
    /// Removes the effect at index `effectIdx` from the bus at index `busIdx`.
    public static func removeBusEffect(busIdx: Int32, effectIdx: Int32) {
        withUnsafePointer(to: busIdx) { pArg0 in
            withUnsafePointer(to: effectIdx) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_remove_bus_effect, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_bus_effect_count: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_bus_effect_count")
        return withUnsafePointer(to: &AudioServer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3744713108)!
            }
            
        }
        
    }()
    
    /// Returns the number of effects on the bus at `busIdx`.
    public static func getBusEffectCount(busIdx: Int32) -> Int32 {
        var _result: Int32 = 0
        withUnsafePointer(to: busIdx) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_get_bus_effect_count, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_get_bus_effect: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_bus_effect")
        return withUnsafePointer(to: &AudioServer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 726064442)!
            }
            
        }
        
    }()
    
    /// Returns the ``AudioEffect`` at position `effectIdx` in bus `busIdx`.
    public static func getBusEffect(busIdx: Int32, effectIdx: Int32) -> AudioEffect? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        withUnsafePointer(to: busIdx) { pArg0 in
            withUnsafePointer(to: effectIdx) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_get_bus_effect, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                    }
                    
                }
                
            }
            
        }
        
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_get_bus_effect_instance: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_bus_effect_instance")
        return withUnsafePointer(to: &AudioServer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1829771234)!
            }
            
        }
        
    }()
    
    /// Returns the ``AudioEffectInstance`` assigned to the given bus and effect indices (and optionally channel).
    public static func getBusEffectInstance(busIdx: Int32, effectIdx: Int32, channel: Int32 = 0) -> AudioEffectInstance? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        withUnsafePointer(to: busIdx) { pArg0 in
            withUnsafePointer(to: effectIdx) { pArg1 in
                withUnsafePointer(to: channel) { pArg2 in
                    withUnsafePointer(to: UnsafeRawPointersN3(pArg0, pArg1, pArg2)) { pArgs in
                        pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 3) { pArgs in
                            gi.object_method_bind_ptrcall(method_get_bus_effect_instance, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_swap_bus_effects: GDExtensionMethodBindPtr = {
        let methodName = StringName("swap_bus_effects")
        return withUnsafePointer(to: &AudioServer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1649997291)!
            }
            
        }
        
    }()
    
    /// Swaps the position of two effects in bus `busIdx`.
    public static func swapBusEffects(busIdx: Int32, effectIdx: Int32, byEffectIdx: Int32) {
        withUnsafePointer(to: busIdx) { pArg0 in
            withUnsafePointer(to: effectIdx) { pArg1 in
                withUnsafePointer(to: byEffectIdx) { pArg2 in
                    withUnsafePointer(to: UnsafeRawPointersN3(pArg0, pArg1, pArg2)) { pArgs in
                        pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 3) { pArgs in
                            gi.object_method_bind_ptrcall(method_swap_bus_effects, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_set_bus_effect_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_bus_effect_enabled")
        return withUnsafePointer(to: &AudioServer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1383440665)!
            }
            
        }
        
    }()
    
    /// If `true`, the effect at index `effectIdx` on the bus at index `busIdx` is enabled.
    public static func setBusEffectEnabled(busIdx: Int32, effectIdx: Int32, enabled: Bool) {
        withUnsafePointer(to: busIdx) { pArg0 in
            withUnsafePointer(to: effectIdx) { pArg1 in
                withUnsafePointer(to: enabled) { pArg2 in
                    withUnsafePointer(to: UnsafeRawPointersN3(pArg0, pArg1, pArg2)) { pArgs in
                        pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 3) { pArgs in
                            gi.object_method_bind_ptrcall(method_set_bus_effect_enabled, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_is_bus_effect_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName("is_bus_effect_enabled")
        return withUnsafePointer(to: &AudioServer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2522259332)!
            }
            
        }
        
    }()
    
    /// If `true`, the effect at index `effectIdx` on the bus at index `busIdx` is enabled.
    public static func isBusEffectEnabled(busIdx: Int32, effectIdx: Int32) -> Bool {
        var _result: Bool = false
        withUnsafePointer(to: busIdx) { pArg0 in
            withUnsafePointer(to: effectIdx) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_is_bus_effect_enabled, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                    }
                    
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_get_bus_peak_volume_left_db: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_bus_peak_volume_left_db")
        return withUnsafePointer(to: &AudioServer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3085491603)!
            }
            
        }
        
    }()
    
    /// Returns the peak volume of the left speaker at bus index `busIdx` and channel index `channel`.
    public static func getBusPeakVolumeLeftDb(busIdx: Int32, channel: Int32) -> Double {
        var _result: Double = 0.0
        withUnsafePointer(to: busIdx) { pArg0 in
            withUnsafePointer(to: channel) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_get_bus_peak_volume_left_db, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                    }
                    
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_get_bus_peak_volume_right_db: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_bus_peak_volume_right_db")
        return withUnsafePointer(to: &AudioServer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3085491603)!
            }
            
        }
        
    }()
    
    /// Returns the peak volume of the right speaker at bus index `busIdx` and channel index `channel`.
    public static func getBusPeakVolumeRightDb(busIdx: Int32, channel: Int32) -> Double {
        var _result: Double = 0.0
        withUnsafePointer(to: busIdx) { pArg0 in
            withUnsafePointer(to: channel) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(method_get_bus_peak_volume_right_db, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                    }
                    
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_set_playback_speed_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_playback_speed_scale")
        return withUnsafePointer(to: &AudioServer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate static func set_playback_speed_scale(_ scale: Double) {
        withUnsafePointer(to: scale) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_set_playback_speed_scale, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_playback_speed_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_playback_speed_scale")
        return withUnsafePointer(to: &AudioServer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate static func get_playback_speed_scale() -> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall(method_get_playback_speed_scale, UnsafeMutableRawPointer(mutating: shared.handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_lock: GDExtensionMethodBindPtr = {
        let methodName = StringName("lock")
        return withUnsafePointer(to: &AudioServer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Locks the audio driver's main loop.
    /// 
    /// > Note: Remember to unlock it afterwards.
    /// 
    public static func lock() {
        gi.object_method_bind_ptrcall(method_lock, UnsafeMutableRawPointer(mutating: shared.handle), nil, nil)
        
    }
    
    fileprivate static var method_unlock: GDExtensionMethodBindPtr = {
        let methodName = StringName("unlock")
        return withUnsafePointer(to: &AudioServer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Unlocks the audio driver's main loop. (After locking it, you should always unlock it.)
    public static func unlock() {
        gi.object_method_bind_ptrcall(method_unlock, UnsafeMutableRawPointer(mutating: shared.handle), nil, nil)
        
    }
    
    fileprivate static var method_get_speaker_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_speaker_mode")
        return withUnsafePointer(to: &AudioServer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2549190337)!
            }
            
        }
        
    }()
    
    /// Returns the speaker configuration.
    public static func getSpeakerMode() -> AudioServer.SpeakerMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall(method_get_speaker_mode, UnsafeMutableRawPointer(mutating: shared.handle), nil, &_result)
        return AudioServer.SpeakerMode (rawValue: _result)!
    }
    
    fileprivate static var method_get_mix_rate: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_mix_rate")
        return withUnsafePointer(to: &AudioServer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    /// Returns the sample rate at the output of the ``AudioServer``.
    public static func getMixRate() -> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall(method_get_mix_rate, UnsafeMutableRawPointer(mutating: shared.handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_output_device_list: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_output_device_list")
        return withUnsafePointer(to: &AudioServer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2981934095)!
            }
            
        }
        
    }()
    
    /// Returns the names of all audio output devices detected on the system.
    public static func getOutputDeviceList() -> PackedStringArray {
        let _result: PackedStringArray = PackedStringArray ()
        gi.object_method_bind_ptrcall(method_get_output_device_list, UnsafeMutableRawPointer(mutating: shared.handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_get_output_device: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_output_device")
        return withUnsafePointer(to: &AudioServer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2841200299)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate static func get_output_device() -> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall(method_get_output_device, UnsafeMutableRawPointer(mutating: shared.handle), nil, &_result.content)
        return _result.description
    }
    
    fileprivate static var method_set_output_device: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_output_device")
        return withUnsafePointer(to: &AudioServer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate static func set_output_device(_ name: String) {
        let name = GString(name)
        withUnsafePointer(to: name.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_set_output_device, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_time_to_next_mix: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_time_to_next_mix")
        return withUnsafePointer(to: &AudioServer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    /// Returns the relative time until the next mix occurs.
    public static func getTimeToNextMix() -> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall(method_get_time_to_next_mix, UnsafeMutableRawPointer(mutating: shared.handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_time_since_last_mix: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_time_since_last_mix")
        return withUnsafePointer(to: &AudioServer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    /// Returns the relative time since the last mix occurred.
    public static func getTimeSinceLastMix() -> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall(method_get_time_since_last_mix, UnsafeMutableRawPointer(mutating: shared.handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_output_latency: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_output_latency")
        return withUnsafePointer(to: &AudioServer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    /// Returns the audio driver's effective output latency. This is based on ``ProjectSettings/audio/driver/outputLatency``, but the exact returned value will differ depending on the operating system and audio driver.
    /// 
    /// > Note: This can be expensive; it is not recommended to call ``getOutputLatency()`` every frame.
    /// 
    public static func getOutputLatency() -> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall(method_get_output_latency, UnsafeMutableRawPointer(mutating: shared.handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_input_device_list: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_input_device_list")
        return withUnsafePointer(to: &AudioServer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2981934095)!
            }
            
        }
        
    }()
    
    /// Returns the names of all audio input devices detected on the system.
    /// 
    /// > Note: ``ProjectSettings/audio/driver/enableInput`` must be `true` for audio input to work. See also that setting's description for caveats related to permissions and operating system privacy settings.
    /// 
    public static func getInputDeviceList() -> PackedStringArray {
        let _result: PackedStringArray = PackedStringArray ()
        gi.object_method_bind_ptrcall(method_get_input_device_list, UnsafeMutableRawPointer(mutating: shared.handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_get_input_device: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_input_device")
        return withUnsafePointer(to: &AudioServer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2841200299)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate static func get_input_device() -> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall(method_get_input_device, UnsafeMutableRawPointer(mutating: shared.handle), nil, &_result.content)
        return _result.description
    }
    
    fileprivate static var method_set_input_device: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_input_device")
        return withUnsafePointer(to: &AudioServer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate static func set_input_device(_ name: String) {
        let name = GString(name)
        withUnsafePointer(to: name.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_set_input_device, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_set_bus_layout: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_bus_layout")
        return withUnsafePointer(to: &AudioServer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3319058824)!
            }
            
        }
        
    }()
    
    /// Overwrites the currently used ``AudioBusLayout``.
    public static func setBusLayout(_ busLayout: AudioBusLayout?) {
        withUnsafePointer(to: busLayout?.handle) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_set_bus_layout, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_generate_bus_layout: GDExtensionMethodBindPtr = {
        let methodName = StringName("generate_bus_layout")
        return withUnsafePointer(to: &AudioServer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3769973890)!
            }
            
        }
        
    }()
    
    /// Generates an ``AudioBusLayout`` using the available buses and effects.
    public static func generateBusLayout() -> AudioBusLayout? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall(method_generate_bus_layout, UnsafeMutableRawPointer(mutating: shared.handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_enable_tagging_used_audio_streams: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_enable_tagging_used_audio_streams")
        return withUnsafePointer(to: &AudioServer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    /// If set to `true`, all instances of ``AudioStreamPlayback`` will call ``AudioStreamPlayback/_tagUsedStreams()`` every mix step.
    /// 
    /// > Note: This is enabled by default in the editor, as it is used by editor plugins for the audio stream previews.
    /// 
    public static func setEnableTaggingUsedAudioStreams(enable: Bool) {
        withUnsafePointer(to: enable) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_set_enable_tagging_used_audio_streams, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_is_stream_registered_as_sample: GDExtensionMethodBindPtr = {
        let methodName = StringName("is_stream_registered_as_sample")
        return withUnsafePointer(to: &AudioServer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 500225754)!
            }
            
        }
        
    }()
    
    /// If `true`, the stream is registered as a sample. The engine will not have to register it before playing the sample.
    /// 
    /// If `false`, the stream will have to be registered before playing it. To prevent lag spikes, register the stream as sample with ``registerStreamAsSample(stream:)``.
    /// 
    public static func isStreamRegisteredAsSample(stream: AudioStream?) -> Bool {
        var _result: Bool = false
        withUnsafePointer(to: stream?.handle) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_is_stream_registered_as_sample, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_register_stream_as_sample: GDExtensionMethodBindPtr = {
        let methodName = StringName("register_stream_as_sample")
        return withUnsafePointer(to: &AudioServer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2210767741)!
            }
            
        }
        
    }()
    
    /// Forces the registration of a stream as a sample.
    /// 
    /// > Note: Lag spikes may occur when calling this method, especially on single-threaded builds. It is suggested to call this method while loading assets, where the lag spike could be masked, instead of registering the sample right before it needs to be played.
    /// 
    public static func registerStreamAsSample(stream: AudioStream?) {
        withUnsafePointer(to: stream?.handle) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_register_stream_as_sample, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    // Signals 
    /// Emitted when an audio bus is added, deleted, or moved.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.busLayoutChanged.connect {
    ///    print ("caught signal")
    /// }
    /// ```
    public var busLayoutChanged: SimpleSignal { SimpleSignal (target: self, signalName: "bus_layout_changed") }
    
    /// Signal support.
    /// 
    /// 
    /// 
    /// Use the ``Signal1/connect(flags:_:)`` method to connect to the signal on the container object, and ``Signal1/disconnect(_:)`` to drop the connection.
    /// 
    /// You can also await the ``Signal1/emitted`` property for waiting for a single emission of the signal.
    /// 
    public class Signal1 {
        var target: Object
        var signalName: StringName
        init (target: Object, signalName: StringName) {
            self.target = target
            self.signalName = signalName
        }
        
        /// Connects the signal to the specified callback
        /// 
        /// 
        /// 
        /// To disconnect, call the disconnect method, with the returned token on success
        /// 
        /// - Parameters:
        /// 
        /// - callback: the method to invoke when this signal is raised
        /// 
        /// - flags: Optional, can be also added to configure the connection's behavior (see ``Object/ConnectFlags`` constants).
        /// 
        /// - Returns: an object token that can be used to disconnect the object from the target on success, or the error produced by Godot.
        /// 
        @discardableResult /* Signal1 */
        public func connect (flags: Object.ConnectFlags = [], _ callback: @escaping (_ busIndex: Int64, _ oldName: StringName, _ newName: StringName) -> ()) -> Object {
            let signalProxy = SignalProxy()
            signalProxy.proxy =  {
                args in
                let arg_0 = Int64 (args [0])!
                let arg_1 = StringName (args [1])!
                let arg_2 = StringName (args [2])!
                
                callback (arg_0, arg_1, arg_2)
            }
            
            let callable = Callable(object: signalProxy, method: SignalProxy.proxyName)
            let r = target.connect(signal: signalName, callable: callable, flags: UInt32 (flags.rawValue))
            if r != .ok { print ("Warning, error connecting to signal, code: \(r)") }
            return signalProxy
        }
        
        /// Disconnects a signal that was previously connected, the return value from calling ``connect(flags:_:)``
        public func disconnect (_ token: Object) {
            target.disconnect(signal: signalName, callable: Callable (object: token, method: SignalProxy.proxyName))
        }
        
        /// You can await this property to wait for the signal to be emitted once
        public var emitted: Void  {
            get async {
                await withCheckedContinuation {
                    c in
                    connect (flags: .oneShot) { _, _, _ in c.resume () }
                }
                
            }
            
        }
        
    }
    
    /// Emitted when the audio bus at `busIndex` is renamed from `oldName` to `newName`.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.busRenamed.connect { busIndex, oldName, newName in
    ///    print ("caught signal")
    /// }
    /// ```
    public var busRenamed: Signal1 { Signal1 (target: self, signalName: "bus_renamed") }
    
}


// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A modification that rotates two bones using the law of cosines to reach the target.
/// 
/// This ``SkeletonModification2D`` uses an algorithm typically called TwoBoneIK. This algorithm works by leveraging the law of cosines and the lengths of the bones to figure out what rotation the bones currently have, and what rotation they need to make a complete triangle, where the first bone, the second bone, and the target form the three vertices of the triangle. Because the algorithm works by making a triangle, it can only operate on two bones.
/// 
/// TwoBoneIK is great for arms, legs, and really any joints that can be represented by just two bones that bend to reach a target. This solver is more lightweight than ``SkeletonModification2DFABRIK``, but gives similar, natural looking results.
/// 
open class SkeletonModification2DTwoBoneIK: SkeletonModification2D {
    override open class var godotClassName: StringName { "SkeletonModification2DTwoBoneIK" }
    
    /* Properties */
    
    /// The NodePath to the node that is the target for the TwoBoneIK modification. This node is what the modification will use when bending the ``Bone2D`` nodes.
    final public var targetNodepath: NodePath {
        get {
            return get_target_node ()
        }
        
        set {
            set_target_node (newValue)
        }
        
    }
    
    /// The minimum distance the target can be at. If the target is closer than this distance, the modification will solve as if it's at this minimum distance. When set to `0`, the modification will solve without distance constraints.
    final public var targetMinimumDistance: Double {
        get {
            return get_target_minimum_distance ()
        }
        
        set {
            set_target_minimum_distance (newValue)
        }
        
    }
    
    /// The maximum distance the target can be at. If the target is farther than this distance, the modification will solve as if it's at this maximum distance. When set to `0`, the modification will solve without distance constraints.
    final public var targetMaximumDistance: Double {
        get {
            return get_target_maximum_distance ()
        }
        
        set {
            set_target_maximum_distance (newValue)
        }
        
    }
    
    /// If `true`, the bones in the modification will blend outward as opposed to inwards when contracting. If `false`, the bones will bend inwards when contracting.
    final public var flipBendDirection: Bool {
        get {
            return get_flip_bend_direction ()
        }
        
        set {
            set_flip_bend_direction (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_target_node: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_target_node")
        return withUnsafePointer(to: &SkeletonModification2DTwoBoneIK.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1348162250)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_target_node(_ targetNodepath: NodePath) {
        withUnsafePointer(to: targetNodepath.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(SkeletonModification2DTwoBoneIK.method_set_target_node, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_target_node: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_target_node")
        return withUnsafePointer(to: &SkeletonModification2DTwoBoneIK.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 4075236667)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_target_node() -> NodePath {
        let _result: NodePath = NodePath ()
        gi.object_method_bind_ptrcall(SkeletonModification2DTwoBoneIK.method_get_target_node, UnsafeMutableRawPointer(mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_set_target_minimum_distance: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_target_minimum_distance")
        return withUnsafePointer(to: &SkeletonModification2DTwoBoneIK.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_target_minimum_distance(_ minimumDistance: Double) {
        withUnsafePointer(to: minimumDistance) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(SkeletonModification2DTwoBoneIK.method_set_target_minimum_distance, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_target_minimum_distance: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_target_minimum_distance")
        return withUnsafePointer(to: &SkeletonModification2DTwoBoneIK.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_target_minimum_distance() -> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall(SkeletonModification2DTwoBoneIK.method_get_target_minimum_distance, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_target_maximum_distance: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_target_maximum_distance")
        return withUnsafePointer(to: &SkeletonModification2DTwoBoneIK.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_target_maximum_distance(_ maximumDistance: Double) {
        withUnsafePointer(to: maximumDistance) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(SkeletonModification2DTwoBoneIK.method_set_target_maximum_distance, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_target_maximum_distance: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_target_maximum_distance")
        return withUnsafePointer(to: &SkeletonModification2DTwoBoneIK.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_target_maximum_distance() -> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall(SkeletonModification2DTwoBoneIK.method_get_target_maximum_distance, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_flip_bend_direction: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_flip_bend_direction")
        return withUnsafePointer(to: &SkeletonModification2DTwoBoneIK.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_flip_bend_direction(_ flipDirection: Bool) {
        withUnsafePointer(to: flipDirection) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(SkeletonModification2DTwoBoneIK.method_set_flip_bend_direction, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_flip_bend_direction: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_flip_bend_direction")
        return withUnsafePointer(to: &SkeletonModification2DTwoBoneIK.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_flip_bend_direction() -> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall(SkeletonModification2DTwoBoneIK.method_get_flip_bend_direction, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_joint_one_bone2d_node: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_joint_one_bone2d_node")
        return withUnsafePointer(to: &SkeletonModification2DTwoBoneIK.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1348162250)!
            }
            
        }
        
    }()
    
    /// Sets the ``Bone2D`` node that is being used as the first bone in the TwoBoneIK modification.
    public final func setJointOneBone2dNode(_ bone2dNode: NodePath) {
        withUnsafePointer(to: bone2dNode.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(SkeletonModification2DTwoBoneIK.method_set_joint_one_bone2d_node, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_joint_one_bone2d_node: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_joint_one_bone2d_node")
        return withUnsafePointer(to: &SkeletonModification2DTwoBoneIK.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 4075236667)!
            }
            
        }
        
    }()
    
    /// Returns the ``Bone2D`` node that is being used as the first bone in the TwoBoneIK modification.
    public final func getJointOneBone2dNode() -> NodePath {
        let _result: NodePath = NodePath ()
        gi.object_method_bind_ptrcall(SkeletonModification2DTwoBoneIK.method_get_joint_one_bone2d_node, UnsafeMutableRawPointer(mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_set_joint_one_bone_idx: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_joint_one_bone_idx")
        return withUnsafePointer(to: &SkeletonModification2DTwoBoneIK.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    /// Sets the index of the ``Bone2D`` node that is being used as the first bone in the TwoBoneIK modification.
    public final func setJointOneBoneIdx(_ boneIdx: Int32) {
        withUnsafePointer(to: boneIdx) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(SkeletonModification2DTwoBoneIK.method_set_joint_one_bone_idx, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_joint_one_bone_idx: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_joint_one_bone_idx")
        return withUnsafePointer(to: &SkeletonModification2DTwoBoneIK.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    /// Returns the index of the ``Bone2D`` node that is being used as the first bone in the TwoBoneIK modification.
    public final func getJointOneBoneIdx() -> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall(SkeletonModification2DTwoBoneIK.method_get_joint_one_bone_idx, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_joint_two_bone2d_node: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_joint_two_bone2d_node")
        return withUnsafePointer(to: &SkeletonModification2DTwoBoneIK.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1348162250)!
            }
            
        }
        
    }()
    
    /// Sets the ``Bone2D`` node that is being used as the second bone in the TwoBoneIK modification.
    public final func setJointTwoBone2dNode(_ bone2dNode: NodePath) {
        withUnsafePointer(to: bone2dNode.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(SkeletonModification2DTwoBoneIK.method_set_joint_two_bone2d_node, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_joint_two_bone2d_node: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_joint_two_bone2d_node")
        return withUnsafePointer(to: &SkeletonModification2DTwoBoneIK.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 4075236667)!
            }
            
        }
        
    }()
    
    /// Returns the ``Bone2D`` node that is being used as the second bone in the TwoBoneIK modification.
    public final func getJointTwoBone2dNode() -> NodePath {
        let _result: NodePath = NodePath ()
        gi.object_method_bind_ptrcall(SkeletonModification2DTwoBoneIK.method_get_joint_two_bone2d_node, UnsafeMutableRawPointer(mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_set_joint_two_bone_idx: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_joint_two_bone_idx")
        return withUnsafePointer(to: &SkeletonModification2DTwoBoneIK.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    /// Sets the index of the ``Bone2D`` node that is being used as the second bone in the TwoBoneIK modification.
    public final func setJointTwoBoneIdx(_ boneIdx: Int32) {
        withUnsafePointer(to: boneIdx) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(SkeletonModification2DTwoBoneIK.method_set_joint_two_bone_idx, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_joint_two_bone_idx: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_joint_two_bone_idx")
        return withUnsafePointer(to: &SkeletonModification2DTwoBoneIK.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    /// Returns the index of the ``Bone2D`` node that is being used as the second bone in the TwoBoneIK modification.
    public final func getJointTwoBoneIdx() -> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall(SkeletonModification2DTwoBoneIK.method_get_joint_two_bone_idx, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
}


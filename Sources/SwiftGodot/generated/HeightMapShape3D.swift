// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A 3D height map shape used for physics collision.
/// 
/// A 3D heightmap shape, intended for use in physics. Usually used to provide a shape for a ``CollisionShape3D``. This is useful for terrain, but it is limited as overhangs (such as caves) cannot be stored. Holes in a ``HeightMapShape3D`` are created by assigning very low values to points in the desired area.
/// 
/// **Performance:** ``HeightMapShape3D`` is faster to check collisions against than ``ConcavePolygonShape3D``, but it is significantly slower than primitive shapes like ``BoxShape3D``.
/// 
/// A heightmap collision shape can also be build by using an ``Image`` reference:
/// 
open class HeightMapShape3D: Shape3D {
    override open class var godotClassName: StringName { "HeightMapShape3D" }
    
    /* Properties */
    
    /// Number of vertices in the width of the height map. Changing this will resize the ``mapData``.
    final public var mapWidth: Int32 {
        get {
            return get_map_width ()
        }
        
        set {
            set_map_width (newValue)
        }
        
    }
    
    /// Number of vertices in the depth of the height map. Changing this will resize the ``mapData``.
    final public var mapDepth: Int32 {
        get {
            return get_map_depth ()
        }
        
        set {
            set_map_depth (newValue)
        }
        
    }
    
    /// Height map data. The array's size must be equal to ``mapWidth`` multiplied by ``mapDepth``.
    final public var mapData: PackedFloat32Array {
        get {
            return get_map_data ()
        }
        
        set {
            set_map_data (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_map_width: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_map_width")
        return withUnsafePointer(to: &HeightMapShape3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_map_width(_ width: Int32) {
        withUnsafePointer(to: width) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(HeightMapShape3D.method_set_map_width, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_map_width: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_map_width")
        return withUnsafePointer(to: &HeightMapShape3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_map_width() -> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall(HeightMapShape3D.method_get_map_width, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_map_depth: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_map_depth")
        return withUnsafePointer(to: &HeightMapShape3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_map_depth(_ height: Int32) {
        withUnsafePointer(to: height) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(HeightMapShape3D.method_set_map_depth, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_map_depth: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_map_depth")
        return withUnsafePointer(to: &HeightMapShape3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_map_depth() -> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall(HeightMapShape3D.method_get_map_depth, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_map_data: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_map_data")
        return withUnsafePointer(to: &HeightMapShape3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2899603908)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_map_data(_ data: PackedFloat32Array) {
        withUnsafePointer(to: data.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(HeightMapShape3D.method_set_map_data, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_map_data: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_map_data")
        return withUnsafePointer(to: &HeightMapShape3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 675695659)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_map_data() -> PackedFloat32Array {
        let _result: PackedFloat32Array = PackedFloat32Array ()
        gi.object_method_bind_ptrcall(HeightMapShape3D.method_get_map_data, UnsafeMutableRawPointer(mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_get_min_height: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_min_height")
        return withUnsafePointer(to: &HeightMapShape3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    /// Returns the smallest height value found in ``mapData``. Recalculates only when ``mapData`` changes.
    public final func getMinHeight() -> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall(HeightMapShape3D.method_get_min_height, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_max_height: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_max_height")
        return withUnsafePointer(to: &HeightMapShape3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    /// Returns the largest height value found in ``mapData``. Recalculates only when ``mapData`` changes.
    public final func getMaxHeight() -> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall(HeightMapShape3D.method_get_max_height, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_update_map_data_from_image: GDExtensionMethodBindPtr = {
        let methodName = StringName("update_map_data_from_image")
        return withUnsafePointer(to: &HeightMapShape3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2636652979)!
            }
            
        }
        
    }()
    
    /// Updates ``mapData`` with data read from an ``Image`` reference. Automatically resizes heightmap ``mapWidth`` and ``mapDepth`` to fit the full image width and height.
    /// 
    /// The image needs to be in either ``Image/Format/rf`` (32 bit), ``Image/Format/rh`` (16 bit), or ``Image/Format/r8`` (8 bit).
    /// 
    /// Each image pixel is read in as a float on the range from `0.0` (black pixel) to `1.0` (white pixel). This range value gets remapped to `heightMin` and `heightMax` to form the final height value.
    /// 
    public final func updateMapDataFromImage(_ image: Image?, heightMin: Double, heightMax: Double) {
        withUnsafePointer(to: image?.handle) { pArg0 in
            withUnsafePointer(to: heightMin) { pArg1 in
                withUnsafePointer(to: heightMax) { pArg2 in
                    withUnsafePointer(to: UnsafeRawPointersN3(pArg0, pArg1, pArg2)) { pArgs in
                        pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 3) { pArgs in
                            gi.object_method_bind_ptrcall(HeightMapShape3D.method_update_map_data_from_image, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
}


// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Manipulates the audio it receives for a given effect.
/// 
/// An audio effect instance manipulates the audio it receives for a given effect. This instance is automatically created by an ``AudioEffect`` when it is added to a bus, and should usually not be created directly. If necessary, it can be fetched at run-time with ``AudioServer/getBusEffectInstance(busIdx:effectIdx:channel:)``.
open class AudioEffectInstance: RefCounted {
    override open class var godotClassName: StringName { "AudioEffectInstance" }
    /* Methods */
    /// Called by the ``AudioServer`` to process this effect. When ``_processSilence()`` is not overridden or it returns `false`, this method is called only when the bus is active.
    /// 
    /// > Note: It is not useful to override this method in GDScript or C#. Only GDExtension can take advantage of it.
    /// 
    @_documentation(visibility: public)
    open func _process(srcBuffer: OpaquePointer?, dstBuffer: OpaquePointer?, frameCount: Int32) {
    }
    
    /// Override this method to customize the processing behavior of this effect instance.
    /// 
    /// Should return `true` to force the ``AudioServer`` to always call ``_process(srcBuffer:dstBuffer:frameCount:)``, even if the bus has been muted or cannot otherwise be heard.
    /// 
    @_documentation(visibility: public)
    open func _processSilence() -> Bool {
        return false
    }
    
    override class func getVirtualDispatcher (name: StringName) -> GDExtensionClassCallVirtual? {
        guard implementedOverrides().contains(name) else { return nil }
        switch name.description {
            case "_process":
                return _AudioEffectInstance_proxy_process
            case "_process_silence":
                return _AudioEffectInstance_proxy_process_silence
            default:
                return super.getVirtualDispatcher (name: name)
        }
        
    }
    
}

// Support methods for proxies
func _AudioEffectInstance_proxy_process (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<AudioEffectInstance>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._process (srcBuffer: args [0]!.assumingMemoryBound (to: OpaquePointer?.self).pointee, dstBuffer: args [1]!.assumingMemoryBound (to: OpaquePointer?.self).pointee, frameCount: args [2]!.assumingMemoryBound (to: Int32.self).pointee)
}

func _AudioEffectInstance_proxy_process_silence (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<AudioEffectInstance>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._processSilence ()
    retPtr!.storeBytes (of: ret, as: Bool.self)
}


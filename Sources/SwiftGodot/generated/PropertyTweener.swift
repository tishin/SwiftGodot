// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Interpolates an ``Object``'s property over time.
/// 
/// ``PropertyTweener`` is used to interpolate a property in an object. See ``Tween/tweenProperty(object:property:finalVal:duration:)`` for more usage information.
/// 
/// > Note: ``Tween/tweenProperty(object:property:finalVal:duration:)`` is the only correct way to create ``PropertyTweener``. Any ``PropertyTweener`` created manually will not function correctly.
/// 
open class PropertyTweener: Tweener {
    override open class var godotClassName: StringName { "PropertyTweener" }
    /* Methods */
    fileprivate static var method_from: GDExtensionMethodBindPtr = {
        let methodName = StringName("from")
        return withUnsafePointer(to: &PropertyTweener.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 4190193059)!
            }
            
        }
        
    }()
    
    /// Sets a custom initial value to the ``PropertyTweener``.
    /// 
    /// **Example:**
    /// 
    public final func from(value: Variant) -> PropertyTweener? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        withUnsafePointer(to: value.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(PropertyTweener.method_from, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                }
                
            }
            
        }
        
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_from_current: GDExtensionMethodBindPtr = {
        let methodName = StringName("from_current")
        return withUnsafePointer(to: &PropertyTweener.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 4279177709)!
            }
            
        }
        
    }()
    
    /// Makes the ``PropertyTweener`` use the current property value (i.e. at the time of creating this ``PropertyTweener``) as a starting point. This is equivalent of using ``from(value:)`` with the current value. These two calls will do the same:
    /// 
    public final func fromCurrent() -> PropertyTweener? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall(PropertyTweener.method_from_current, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_as_relative: GDExtensionMethodBindPtr = {
        let methodName = StringName("as_relative")
        return withUnsafePointer(to: &PropertyTweener.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 4279177709)!
            }
            
        }
        
    }()
    
    /// When called, the final value will be used as a relative value instead.
    /// 
    /// **Example:**
    /// 
    public final func asRelative() -> PropertyTweener? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall(PropertyTweener.method_as_relative, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_trans: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_trans")
        return withUnsafePointer(to: &PropertyTweener.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1899107404)!
            }
            
        }
        
    }()
    
    /// Sets the type of used transition from ``Tween.TransitionType``. If not set, the default transition is used from the ``Tween`` that contains this Tweener.
    public final func setTrans(_ trans: Tween.TransitionType) -> PropertyTweener? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        withUnsafePointer(to: trans.rawValue) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(PropertyTweener.method_set_trans, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                }
                
            }
            
        }
        
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_ease: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_ease")
        return withUnsafePointer(to: &PropertyTweener.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1080455622)!
            }
            
        }
        
    }()
    
    /// Sets the type of used easing from ``Tween.EaseType``. If not set, the default easing is used from the ``Tween`` that contains this Tweener.
    public final func setEase(_ ease: Tween.EaseType) -> PropertyTweener? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        withUnsafePointer(to: ease.rawValue) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(PropertyTweener.method_set_ease, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                }
                
            }
            
        }
        
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_custom_interpolator: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_custom_interpolator")
        return withUnsafePointer(to: &PropertyTweener.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3174170268)!
            }
            
        }
        
    }()
    
    /// Allows interpolating the value with a custom easing function. The provided `interpolatorMethod` will be called with a value ranging from `0.0` to `1.0` and is expected to return a value within the same range (values outside the range can be used for overshoot). The return value of the method is then used for interpolation between initial and final value. Note that the parameter passed to the method is still subject to the tweener's own easing.
    /// 
    /// **Example:**
    /// 
    public final func setCustomInterpolator(interpolatorMethod: Callable) -> PropertyTweener? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        withUnsafePointer(to: interpolatorMethod.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(PropertyTweener.method_set_custom_interpolator, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                }
                
            }
            
        }
        
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_delay: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_delay")
        return withUnsafePointer(to: &PropertyTweener.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2171559331)!
            }
            
        }
        
    }()
    
    /// Sets the time in seconds after which the ``PropertyTweener`` will start interpolating. By default there's no delay.
    public final func setDelay(_ delay: Double) -> PropertyTweener? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        withUnsafePointer(to: delay) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(PropertyTweener.method_set_delay, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                }
                
            }
            
        }
        
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
}


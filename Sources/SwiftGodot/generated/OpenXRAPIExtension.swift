// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Makes the OpenXR API available for GDExtension.
/// 
/// ``OpenXRAPIExtension`` makes OpenXR available for GDExtension. It provides the OpenXR API to GDExtension through the ``getInstanceProcAddr(name:)`` method, and the OpenXR instance through ``getInstance()``.
/// 
/// It also provides methods for querying the status of OpenXR initialization, and helper methods for ease of use of the API with GDExtension.
/// 
open class OpenXRAPIExtension: RefCounted {
    override open class var godotClassName: StringName { "OpenXRAPIExtension" }
    public enum OpenXRAlphaBlendModeSupport: Int64, CaseIterable, CustomDebugStringConvertible {
        /// Means that ``XRInterface/EnvironmentBlendMode/xrEnvBlendModeAlphaBlend`` isn't supported at all.
        case none = 0 // OPENXR_ALPHA_BLEND_MODE_SUPPORT_NONE
        /// Means that ``XRInterface/EnvironmentBlendMode/xrEnvBlendModeAlphaBlend`` is really supported.
        case real = 1 // OPENXR_ALPHA_BLEND_MODE_SUPPORT_REAL
        /// Means that ``XRInterface/EnvironmentBlendMode/xrEnvBlendModeAlphaBlend`` is emulated.
        case emulating = 2 // OPENXR_ALPHA_BLEND_MODE_SUPPORT_EMULATING
        /// A textual representation of this instance, suitable for debugging
        public var debugDescription: String {
            switch self {
                case .none: return ".none"
                case .real: return ".real"
                case .emulating: return ".emulating"
            }
            
        }
        
    }
    
    /* Methods */
    fileprivate static var method_get_instance: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_instance")
        return withUnsafePointer(to: &OpenXRAPIExtension.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2455072627)!
            }
            
        }
        
    }()
    
    /// Returns the <a href="https://registry.khronos.org/OpenXR/specs/1.0/man/html/XrInstance.html">XrInstance</a> created during the initialization of the OpenXR API.
    public final func getInstance() -> UInt {
        var _result: UInt = 0
        gi.object_method_bind_ptrcall(OpenXRAPIExtension.method_get_instance, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_system_id: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_system_id")
        return withUnsafePointer(to: &OpenXRAPIExtension.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2455072627)!
            }
            
        }
        
    }()
    
    /// Returns the id of the system, which is a <a href="https://registry.khronos.org/OpenXR/specs/1.0/man/html/XrSystemId.html">XrSystemId</a> cast to an integer.
    public final func getSystemId() -> UInt {
        var _result: UInt = 0
        gi.object_method_bind_ptrcall(OpenXRAPIExtension.method_get_system_id, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_session: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_session")
        return withUnsafePointer(to: &OpenXRAPIExtension.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2455072627)!
            }
            
        }
        
    }()
    
    /// Returns the OpenXR session, which is an <a href="https://registry.khronos.org/OpenXR/specs/1.0/man/html/XrSession.html">XrSession</a> cast to an integer.
    public final func getSession() -> UInt {
        var _result: UInt = 0
        gi.object_method_bind_ptrcall(OpenXRAPIExtension.method_get_session, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_transform_from_pose: GDExtensionMethodBindPtr = {
        let methodName = StringName("transform_from_pose")
        return withUnsafePointer(to: &OpenXRAPIExtension.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3255299855)!
            }
            
        }
        
    }()
    
    /// Creates a ``Transform3D`` from an <a href="https://registry.khronos.org/OpenXR/specs/1.0/man/html/XrPosef.html">XrPosef</a>.
    public final func transformFromPose(_ pose: OpaquePointer?) -> Transform3D {
        var _result: Transform3D = Transform3D ()
        withUnsafePointer(to: pose) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(OpenXRAPIExtension.method_transform_from_pose, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_xr_result: GDExtensionMethodBindPtr = {
        let methodName = StringName("xr_result")
        return withUnsafePointer(to: &OpenXRAPIExtension.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3886436197)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the provided <a href="https://registry.khronos.org/OpenXR/specs/1.0/man/html/XrResult.html">XrResult</a> (cast to an integer) is successful. Otherwise returns `false` and prints the <a href="https://registry.khronos.org/OpenXR/specs/1.0/man/html/XrResult.html">XrResult</a> converted to a string, with the specified additional information.
    public final func xrResult(_ result: UInt, format: String, args: GArray) -> Bool {
        var _result: Bool = false
        withUnsafePointer(to: result) { pArg0 in
            let format = GString(format)
            withUnsafePointer(to: format.content) { pArg1 in
                withUnsafePointer(to: args.content) { pArg2 in
                    withUnsafePointer(to: UnsafeRawPointersN3(pArg0, pArg1, pArg2)) { pArgs in
                        pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 3) { pArgs in
                            gi.object_method_bind_ptrcall(OpenXRAPIExtension.method_xr_result, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_openxr_is_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName("openxr_is_enabled")
        return withUnsafePointer(to: &OpenXRAPIExtension.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2703660260)!
            }
            
        }
        
    }()
    
    /// Returns `true` if OpenXR is enabled.
    public static func openxrIsEnabled(checkRunInEditor: Bool) -> Bool {
        var _result: Bool = false
        withUnsafePointer(to: checkRunInEditor) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_openxr_is_enabled, nil, pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_get_instance_proc_addr: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_instance_proc_addr")
        return withUnsafePointer(to: &OpenXRAPIExtension.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1597066294)!
            }
            
        }
        
    }()
    
    /// Returns the function pointer of the OpenXR function with the specified name, cast to an integer. If the function with the given name does not exist, the method returns `0`.
    /// 
    /// > Note: `openxr/util.h` contains utility macros for acquiring OpenXR functions, e.g. `GDEXTENSION_INIT_XR_FUNC_V(xrCreateAction)`.
    /// 
    public final func getInstanceProcAddr(name: String) -> UInt {
        var _result: UInt = 0
        let name = GString(name)
        withUnsafePointer(to: name.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(OpenXRAPIExtension.method_get_instance_proc_addr, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_get_error_string: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_error_string")
        return withUnsafePointer(to: &OpenXRAPIExtension.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 990163283)!
            }
            
        }
        
    }()
    
    /// Returns an error string for the given <a href="https://registry.khronos.org/OpenXR/specs/1.0/man/html/XrResult.html">XrResult</a>.
    public final func getErrorString(result: UInt) -> String {
        let _result = GString ()
        withUnsafePointer(to: result) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(OpenXRAPIExtension.method_get_error_string, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result.content)
                }
                
            }
            
        }
        
        return _result.description
    }
    
    fileprivate static var method_get_swapchain_format_name: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_swapchain_format_name")
        return withUnsafePointer(to: &OpenXRAPIExtension.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 990163283)!
            }
            
        }
        
    }()
    
    /// Returns the name of the specified swapchain format.
    public final func getSwapchainFormatName(swapchainFormat: Int) -> String {
        let _result = GString ()
        withUnsafePointer(to: swapchainFormat) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(OpenXRAPIExtension.method_get_swapchain_format_name, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result.content)
                }
                
            }
            
        }
        
        return _result.description
    }
    
    fileprivate static var method_is_initialized: GDExtensionMethodBindPtr = {
        let methodName = StringName("is_initialized")
        return withUnsafePointer(to: &OpenXRAPIExtension.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2240911060)!
            }
            
        }
        
    }()
    
    /// Returns `true` if OpenXR is initialized.
    public final func isInitialized() -> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall(OpenXRAPIExtension.method_is_initialized, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_is_running: GDExtensionMethodBindPtr = {
        let methodName = StringName("is_running")
        return withUnsafePointer(to: &OpenXRAPIExtension.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2240911060)!
            }
            
        }
        
    }()
    
    /// Returns `true` if OpenXR is running (<a href="https://registry.khronos.org/OpenXR/specs/1.0/man/html/xrBeginSession.html">xrBeginSession</a> was successfully called and the swapchains were created).
    public final func isRunning() -> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall(OpenXRAPIExtension.method_is_running, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_play_space: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_play_space")
        return withUnsafePointer(to: &OpenXRAPIExtension.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2455072627)!
            }
            
        }
        
    }()
    
    /// Returns the play space, which is an <a href="https://registry.khronos.org/OpenXR/specs/1.0/man/html/XrSpace.html">XrSpace</a> cast to an integer.
    public final func getPlaySpace() -> UInt {
        var _result: UInt = 0
        gi.object_method_bind_ptrcall(OpenXRAPIExtension.method_get_play_space, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_predicted_display_time: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_predicted_display_time")
        return withUnsafePointer(to: &OpenXRAPIExtension.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2455072627)!
            }
            
        }
        
    }()
    
    /// Returns the predicted display timing for the current frame.
    public final func getPredictedDisplayTime() -> Int {
        var _result: Int = 0
        gi.object_method_bind_ptrcall(OpenXRAPIExtension.method_get_predicted_display_time, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_next_frame_time: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_next_frame_time")
        return withUnsafePointer(to: &OpenXRAPIExtension.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2455072627)!
            }
            
        }
        
    }()
    
    /// Returns the predicted display timing for the next frame.
    public final func getNextFrameTime() -> Int {
        var _result: Int = 0
        gi.object_method_bind_ptrcall(OpenXRAPIExtension.method_get_next_frame_time, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_can_render: GDExtensionMethodBindPtr = {
        let methodName = StringName("can_render")
        return withUnsafePointer(to: &OpenXRAPIExtension.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2240911060)!
            }
            
        }
        
    }()
    
    /// Returns `true` if OpenXR is initialized for rendering with an XR viewport.
    public final func canRender() -> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall(OpenXRAPIExtension.method_can_render, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_hand_tracker: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_hand_tracker")
        return withUnsafePointer(to: &OpenXRAPIExtension.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3744713108)!
            }
            
        }
        
    }()
    
    /// Returns the corresponding `XRHandTrackerEXT` handle for the given hand index value.
    public final func getHandTracker(handIndex: Int32) -> UInt {
        var _result: UInt = 0
        withUnsafePointer(to: handIndex) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(OpenXRAPIExtension.method_get_hand_tracker, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_register_composition_layer_provider: GDExtensionMethodBindPtr = {
        let methodName = StringName("register_composition_layer_provider")
        return withUnsafePointer(to: &OpenXRAPIExtension.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1997997368)!
            }
            
        }
        
    }()
    
    /// Registers the given extension as a composition layer provider.
    public final func registerCompositionLayerProvider(`extension`: OpenXRExtensionWrapperExtension?) {
        withUnsafePointer(to: `extension`?.handle) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(OpenXRAPIExtension.method_register_composition_layer_provider, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_unregister_composition_layer_provider: GDExtensionMethodBindPtr = {
        let methodName = StringName("unregister_composition_layer_provider")
        return withUnsafePointer(to: &OpenXRAPIExtension.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1997997368)!
            }
            
        }
        
    }()
    
    /// Unregisters the given extension as a composition layer provider.
    public final func unregisterCompositionLayerProvider(`extension`: OpenXRExtensionWrapperExtension?) {
        withUnsafePointer(to: `extension`?.handle) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(OpenXRAPIExtension.method_unregister_composition_layer_provider, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_set_emulate_environment_blend_mode_alpha_blend: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_emulate_environment_blend_mode_alpha_blend")
        return withUnsafePointer(to: &OpenXRAPIExtension.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    /// If set to `true`, an OpenXR extension is loaded which is capable of emulating the ``XRInterface/EnvironmentBlendMode/xrEnvBlendModeAlphaBlend`` blend mode.
    public final func setEmulateEnvironmentBlendModeAlphaBlend(enabled: Bool) {
        withUnsafePointer(to: enabled) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(OpenXRAPIExtension.method_set_emulate_environment_blend_mode_alpha_blend, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_is_environment_blend_mode_alpha_supported: GDExtensionMethodBindPtr = {
        let methodName = StringName("is_environment_blend_mode_alpha_supported")
        return withUnsafePointer(to: &OpenXRAPIExtension.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1579290861)!
            }
            
        }
        
    }()
    
    /// Returns ``OpenXRAPIExtension.OpenXRAlphaBlendModeSupport`` denoting if ``XRInterface/EnvironmentBlendMode/xrEnvBlendModeAlphaBlend`` is really supported, emulated or not supported at all.
    public final func isEnvironmentBlendModeAlphaSupported() -> OpenXRAPIExtension.OpenXRAlphaBlendModeSupport {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall(OpenXRAPIExtension.method_is_environment_blend_mode_alpha_supported, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return OpenXRAPIExtension.OpenXRAlphaBlendModeSupport (rawValue: _result)!
    }
    
}


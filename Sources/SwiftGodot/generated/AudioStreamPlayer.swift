// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A node for audio playback.
/// 
/// The ``AudioStreamPlayer`` node plays an audio stream non-positionally. It is ideal for user interfaces, menus, or background music.
/// 
/// To use this node, ``stream`` needs to be set to a valid ``AudioStream`` resource. Playing more than one sound at the time is also supported, see ``maxPolyphony``.
/// 
/// If you need to play audio at a specific position, use ``AudioStreamPlayer2D`` or ``AudioStreamPlayer3D`` instead.
/// 
/// 
/// 
/// This object emits the following signals:
/// 
/// - ``finished``
open class AudioStreamPlayer: Node {
    override open class var godotClassName: StringName { "AudioStreamPlayer" }
    public enum MixTarget: Int64, CaseIterable, CustomDebugStringConvertible {
        /// The audio will be played only on the first channel. This is the default.
        case stereo = 0 // MIX_TARGET_STEREO
        /// The audio will be played on all surround channels.
        case surround = 1 // MIX_TARGET_SURROUND
        /// The audio will be played on the second channel, which is usually the center.
        case center = 2 // MIX_TARGET_CENTER
        /// A textual representation of this instance, suitable for debugging
        public var debugDescription: String {
            switch self {
                case .stereo: return ".stereo"
                case .surround: return ".surround"
                case .center: return ".center"
            }
            
        }
        
    }
    
    
    /* Properties */
    
    /// The ``AudioStream`` resource to be played. Setting this property stops all currently playing sounds. If left empty, the ``AudioStreamPlayer`` does not work.
    final public var stream: AudioStream? {
        get {
            return get_stream ()
        }
        
        set {
            set_stream (newValue)
        }
        
    }
    
    /// Volume of sound, in decibel. This is an offset of the ``stream``'s volume.
    /// 
    /// > Note: To convert between decibel and linear energy (like most volume sliders do), use ``@GlobalScope.db_to_linear`` and ``@GlobalScope.linear_to_db``.
    /// 
    final public var volumeDb: Double {
        get {
            return get_volume_db ()
        }
        
        set {
            set_volume_db (newValue)
        }
        
    }
    
    /// The audio's pitch and tempo, as a multiplier of the ``stream``'s sample rate. A value of `2.0` doubles the audio's pitch, while a value of `0.5` halves the pitch.
    final public var pitchScale: Double {
        get {
            return get_pitch_scale ()
        }
        
        set {
            set_pitch_scale (newValue)
        }
        
    }
    
    /// If `true`, this node calls ``play(fromPosition:)`` when entering the tree.
    final public var autoplay: Bool {
        get {
            return is_autoplay_enabled ()
        }
        
        set {
            set_autoplay (newValue)
        }
        
    }
    
    /// If `true`, the sounds are paused. Setting ``streamPaused`` to `false` resumes all sounds.
    /// 
    /// > Note: This property is automatically changed when exiting or entering the tree, or this node is paused (see ``Node/processMode``).
    /// 
    final public var streamPaused: Bool {
        get {
            return get_stream_paused ()
        }
        
        set {
            set_stream_paused (newValue)
        }
        
    }
    
    /// The mix target channels, as one of the ``AudioStreamPlayer/MixTarget`` constants. Has no effect when two speakers or less are detected (see ``AudioServer.SpeakerMode``).
    final public var mixTarget: AudioStreamPlayer.MixTarget {
        get {
            return get_mix_target ()
        }
        
        set {
            set_mix_target (newValue)
        }
        
    }
    
    /// The maximum number of sounds this node can play at the same time. Calling ``play(fromPosition:)`` after this value is reached will cut off the oldest sounds.
    final public var maxPolyphony: Int32 {
        get {
            return get_max_polyphony ()
        }
        
        set {
            set_max_polyphony (newValue)
        }
        
    }
    
    /// The target bus name. All sounds from this node will be playing on this bus.
    /// 
    /// > Note: At runtime, if no bus with the given name exists, all sounds will fall back on `"Master"`. See also ``AudioServer/getBusName(busIdx:)``.
    /// 
    final public var bus: StringName {
        get {
            return get_bus ()
        }
        
        set {
            set_bus (newValue)
        }
        
    }
    
    /// The playback type of the stream player. If set other than to the default value, it will force that playback type.
    final public var playbackType: AudioServer.PlaybackType {
        get {
            return get_playback_type ()
        }
        
        set {
            set_playback_type (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_stream: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_stream")
        return withUnsafePointer(to: &AudioStreamPlayer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2210767741)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_stream(_ stream: AudioStream?) {
        withUnsafePointer(to: stream?.handle) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(AudioStreamPlayer.method_set_stream, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_stream: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_stream")
        return withUnsafePointer(to: &AudioStreamPlayer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 160907539)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_stream() -> AudioStream? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall(AudioStreamPlayer.method_get_stream, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_volume_db: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_volume_db")
        return withUnsafePointer(to: &AudioStreamPlayer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_volume_db(_ volumeDb: Double) {
        withUnsafePointer(to: volumeDb) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(AudioStreamPlayer.method_set_volume_db, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_volume_db: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_volume_db")
        return withUnsafePointer(to: &AudioStreamPlayer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_volume_db() -> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall(AudioStreamPlayer.method_get_volume_db, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_pitch_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_pitch_scale")
        return withUnsafePointer(to: &AudioStreamPlayer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_pitch_scale(_ pitchScale: Double) {
        withUnsafePointer(to: pitchScale) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(AudioStreamPlayer.method_set_pitch_scale, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_pitch_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_pitch_scale")
        return withUnsafePointer(to: &AudioStreamPlayer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_pitch_scale() -> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall(AudioStreamPlayer.method_get_pitch_scale, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_play: GDExtensionMethodBindPtr = {
        let methodName = StringName("play")
        return withUnsafePointer(to: &AudioStreamPlayer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1958160172)!
            }
            
        }
        
    }()
    
    /// Plays a sound from the beginning, or the given `fromPosition` in seconds.
    public final func play(fromPosition: Double = 0.0) {
        withUnsafePointer(to: fromPosition) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(AudioStreamPlayer.method_play, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_seek: GDExtensionMethodBindPtr = {
        let methodName = StringName("seek")
        return withUnsafePointer(to: &AudioStreamPlayer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    /// Restarts all sounds to be played from the given `toPosition`, in seconds. Does nothing if no sounds are playing.
    public final func seek(toPosition: Double) {
        withUnsafePointer(to: toPosition) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(AudioStreamPlayer.method_seek, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_stop: GDExtensionMethodBindPtr = {
        let methodName = StringName("stop")
        return withUnsafePointer(to: &AudioStreamPlayer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Stops all sounds from this node.
    public final func stop() {
        gi.object_method_bind_ptrcall(AudioStreamPlayer.method_stop, UnsafeMutableRawPointer(mutating: handle), nil, nil)
        
    }
    
    fileprivate static var method_is_playing: GDExtensionMethodBindPtr = {
        let methodName = StringName("is_playing")
        return withUnsafePointer(to: &AudioStreamPlayer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    public final func isPlaying() -> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall(AudioStreamPlayer.method_is_playing, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_playback_position: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_playback_position")
        return withUnsafePointer(to: &AudioStreamPlayer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 191475506)!
            }
            
        }
        
    }()
    
    /// Returns the position in the ``AudioStream`` of the latest sound, in seconds. Returns `0.0` if no sounds are playing.
    /// 
    /// > Note: The position is not always accurate, as the ``AudioServer`` does not mix audio every processed frame. To get more accurate results, add ``AudioServer/getTimeSinceLastMix()`` to the returned position.
    /// 
    public final func getPlaybackPosition() -> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall(AudioStreamPlayer.method_get_playback_position, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_bus: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_bus")
        return withUnsafePointer(to: &AudioStreamPlayer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3304788590)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_bus(_ bus: StringName) {
        withUnsafePointer(to: bus.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(AudioStreamPlayer.method_set_bus, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_bus: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_bus")
        return withUnsafePointer(to: &AudioStreamPlayer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2002593661)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_bus() -> StringName {
        let _result: StringName = StringName ()
        gi.object_method_bind_ptrcall(AudioStreamPlayer.method_get_bus, UnsafeMutableRawPointer(mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_set_autoplay: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_autoplay")
        return withUnsafePointer(to: &AudioStreamPlayer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_autoplay(_ enable: Bool) {
        withUnsafePointer(to: enable) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(AudioStreamPlayer.method_set_autoplay, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_is_autoplay_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName("is_autoplay_enabled")
        return withUnsafePointer(to: &AudioStreamPlayer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_autoplay_enabled() -> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall(AudioStreamPlayer.method_is_autoplay_enabled, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_mix_target: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_mix_target")
        return withUnsafePointer(to: &AudioStreamPlayer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2300306138)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_mix_target(_ mixTarget: AudioStreamPlayer.MixTarget) {
        withUnsafePointer(to: mixTarget.rawValue) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(AudioStreamPlayer.method_set_mix_target, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_mix_target: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_mix_target")
        return withUnsafePointer(to: &AudioStreamPlayer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 172807476)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_mix_target() -> AudioStreamPlayer.MixTarget {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall(AudioStreamPlayer.method_get_mix_target, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return AudioStreamPlayer.MixTarget (rawValue: _result)!
    }
    
    fileprivate static var method_set_stream_paused: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_stream_paused")
        return withUnsafePointer(to: &AudioStreamPlayer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_stream_paused(_ pause: Bool) {
        withUnsafePointer(to: pause) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(AudioStreamPlayer.method_set_stream_paused, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_stream_paused: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_stream_paused")
        return withUnsafePointer(to: &AudioStreamPlayer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_stream_paused() -> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall(AudioStreamPlayer.method_get_stream_paused, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_max_polyphony: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_max_polyphony")
        return withUnsafePointer(to: &AudioStreamPlayer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_max_polyphony(_ maxPolyphony: Int32) {
        withUnsafePointer(to: maxPolyphony) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(AudioStreamPlayer.method_set_max_polyphony, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_max_polyphony: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_max_polyphony")
        return withUnsafePointer(to: &AudioStreamPlayer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_max_polyphony() -> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall(AudioStreamPlayer.method_get_max_polyphony, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_has_stream_playback: GDExtensionMethodBindPtr = {
        let methodName = StringName("has_stream_playback")
        return withUnsafePointer(to: &AudioStreamPlayer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2240911060)!
            }
            
        }
        
    }()
    
    /// Returns `true` if any sound is active, even if ``streamPaused`` is set to `true`. See also ``playing`` and ``getStreamPlayback()``.
    public final func hasStreamPlayback() -> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall(AudioStreamPlayer.method_has_stream_playback, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_stream_playback: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_stream_playback")
        return withUnsafePointer(to: &AudioStreamPlayer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 210135309)!
            }
            
        }
        
    }()
    
    /// Returns the latest ``AudioStreamPlayback`` of this node, usually the most recently created by ``play(fromPosition:)``. If no sounds are playing, this method fails and returns an empty playback.
    public final func getStreamPlayback() -> AudioStreamPlayback? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall(AudioStreamPlayer.method_get_stream_playback, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_playback_type: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_playback_type")
        return withUnsafePointer(to: &AudioStreamPlayer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 725473817)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_playback_type(_ playbackType: AudioServer.PlaybackType) {
        withUnsafePointer(to: playbackType.rawValue) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(AudioStreamPlayer.method_set_playback_type, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_playback_type: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_playback_type")
        return withUnsafePointer(to: &AudioStreamPlayer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 4011264623)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_playback_type() -> AudioServer.PlaybackType {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall(AudioStreamPlayer.method_get_playback_type, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return AudioServer.PlaybackType (rawValue: _result)!
    }
    
    // Signals 
    /// Emitted when a sound finishes playing without interruptions. This signal is _not_ emitted when calling ``stop()``, or when exiting the tree while sounds are playing.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.finished.connect {
    ///    print ("caught signal")
    /// }
    /// ```
    public var finished: SimpleSignal { SimpleSignal (target: self, signalName: "finished") }
    
}


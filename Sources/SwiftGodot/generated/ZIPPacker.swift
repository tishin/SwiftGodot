// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Allows the creation of zip files.
/// 
/// This class implements a writer that allows storing the multiple blobs in a zip archive.
/// 
open class ZIPPacker: RefCounted {
    override open class var godotClassName: StringName { "ZIPPacker" }
    public enum ZipAppend: Int64, CaseIterable, CustomDebugStringConvertible {
        /// Create a new zip archive at the given path.
        case create = 0 // APPEND_CREATE
        /// Append a new zip archive to the end of the already existing file at the given path.
        case createafter = 1 // APPEND_CREATEAFTER
        /// Add new files to the existing zip archive at the given path.
        case addinzip = 2 // APPEND_ADDINZIP
        /// A textual representation of this instance, suitable for debugging
        public var debugDescription: String {
            switch self {
                case .create: return ".create"
                case .createafter: return ".createafter"
                case .addinzip: return ".addinzip"
            }
            
        }
        
    }
    
    /* Methods */
    fileprivate static var method_open: GDExtensionMethodBindPtr = {
        let methodName = StringName("open")
        return withUnsafePointer(to: &ZIPPacker.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1936816515)!
            }
            
        }
        
    }()
    
    /// Opens a zip file for writing at the given path using the specified write mode.
    /// 
    /// This must be called before everything else.
    /// 
    public final func open(path: String, append: ZIPPacker.ZipAppend = .create) -> GodotError {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        let path = GString(path)
        withUnsafePointer(to: path.content) { pArg0 in
            withUnsafePointer(to: append.rawValue) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(ZIPPacker.method_open, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                    }
                    
                }
                
            }
            
        }
        
        return GodotError (rawValue: _result)!
    }
    
    fileprivate static var method_start_file: GDExtensionMethodBindPtr = {
        let methodName = StringName("start_file")
        return withUnsafePointer(to: &ZIPPacker.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 166001499)!
            }
            
        }
        
    }()
    
    /// Starts writing to a file within the archive. Only one file can be written at the same time.
    /// 
    /// Must be called after ``open(path:append:)``.
    /// 
    public final func startFile(path: String) -> GodotError {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        let path = GString(path)
        withUnsafePointer(to: path.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(ZIPPacker.method_start_file, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return GodotError (rawValue: _result)!
    }
    
    fileprivate static var method_write_file: GDExtensionMethodBindPtr = {
        let methodName = StringName("write_file")
        return withUnsafePointer(to: &ZIPPacker.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 680677267)!
            }
            
        }
        
    }()
    
    /// Write the given `data` to the file.
    /// 
    /// Needs to be called after ``startFile(path:)``.
    /// 
    public final func writeFile(data: PackedByteArray) -> GodotError {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        withUnsafePointer(to: data.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(ZIPPacker.method_write_file, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return GodotError (rawValue: _result)!
    }
    
    fileprivate static var method_close_file: GDExtensionMethodBindPtr = {
        let methodName = StringName("close_file")
        return withUnsafePointer(to: &ZIPPacker.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 166280745)!
            }
            
        }
        
    }()
    
    /// Stops writing to a file within the archive.
    /// 
    /// It will fail if there is no open file.
    /// 
    public final func closeFile() -> GodotError {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall(ZIPPacker.method_close_file, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return GodotError (rawValue: _result)!
    }
    
    fileprivate static var method_close: GDExtensionMethodBindPtr = {
        let methodName = StringName("close")
        return withUnsafePointer(to: &ZIPPacker.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 166280745)!
            }
            
        }
        
    }()
    
    /// Closes the underlying resources used by this instance.
    public final func close() -> GodotError {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall(ZIPPacker.method_close, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return GodotError (rawValue: _result)!
    }
    
}


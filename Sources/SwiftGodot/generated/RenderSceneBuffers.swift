// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Abstract scene buffers object, created for each viewport for which 3D rendering is done.
/// 
/// Abstract scene buffers object, created for each viewport for which 3D rendering is done. It manages any additional buffers used during rendering and will discard buffers when the viewport is resized.
/// 
/// > Note: This is an internal rendering server object, do not instantiate this from script.
/// 
open class RenderSceneBuffers: RefCounted {
    override open class var godotClassName: StringName { "RenderSceneBuffers" }
    /* Methods */
    fileprivate static var method_configure: GDExtensionMethodBindPtr = {
        let methodName = StringName("configure")
        return withUnsafePointer(to: &RenderSceneBuffers.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3072623270)!
            }
            
        }
        
    }()
    
    /// This method is called by the rendering server when the associated viewports configuration is changed. It will discard the old buffers and recreate the internal buffers used.
    public final func configure(config: RenderSceneBuffersConfiguration?) {
        withUnsafePointer(to: config?.handle) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(RenderSceneBuffers.method_configure, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
}


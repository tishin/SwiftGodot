// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Abstract render data object, holds frame data related to rendering a single frame of a viewport.
/// 
/// Abstract render data object, exists for the duration of rendering a single viewport.
/// 
/// > Note: This is an internal rendering server object, do not instantiate this from script.
/// 
open class RenderData: Object {
    override open class var godotClassName: StringName { "RenderData" }
    /* Methods */
    fileprivate static var method_get_render_scene_buffers: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_render_scene_buffers")
        return withUnsafePointer(to: &RenderData.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2793216201)!
            }
            
        }
        
    }()
    
    /// Returns the ``RenderSceneBuffers`` object managing the scene buffers for rendering this viewport.
    public final func getRenderSceneBuffers() -> RenderSceneBuffers? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall(RenderData.method_get_render_scene_buffers, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_get_render_scene_data: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_render_scene_data")
        return withUnsafePointer(to: &RenderData.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1288715698)!
            }
            
        }
        
    }()
    
    /// Returns the ``RenderSceneData`` object managing this frames scene data.
    public final func getRenderSceneData() -> RenderSceneData? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall(RenderData.method_get_render_scene_data, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_get_environment: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_environment")
        return withUnsafePointer(to: &RenderData.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2944877500)!
            }
            
        }
        
    }()
    
    /// Returns the ``RID`` of the environments object in the ``RenderingServer`` being used to render this viewport.
    public final func getEnvironment() -> RID {
        let _result: RID = RID ()
        gi.object_method_bind_ptrcall(RenderData.method_get_environment, UnsafeMutableRawPointer(mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_get_camera_attributes: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_camera_attributes")
        return withUnsafePointer(to: &RenderData.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2944877500)!
            }
            
        }
        
    }()
    
    /// Returns the ``RID`` of the camera attributes object in the ``RenderingServer`` being used to render this viewport.
    public final func getCameraAttributes() -> RID {
        let _result: RID = RID ()
        gi.object_method_bind_ptrcall(RenderData.method_get_camera_attributes, UnsafeMutableRawPointer(mutating: handle), nil, &_result.content)
        return _result
    }
    
}


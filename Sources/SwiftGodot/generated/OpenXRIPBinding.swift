// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Defines a binding between an ``OpenXRAction`` and an XR input or output.
/// 
/// This binding resource binds an ``OpenXRAction`` to inputs or outputs. As most controllers have left hand and right versions that are handled by the same interaction profile we can specify multiple bindings. For instance an action "Fire" could be bound to both "/user/hand/left/input/trigger" and "/user/hand/right/input/trigger".
open class OpenXRIPBinding: Resource {
    override open class var godotClassName: StringName { "OpenXRIPBinding" }
    
    /* Properties */
    
    /// ``OpenXRAction`` that is bound to these paths.
    final public var action: OpenXRAction? {
        get {
            return get_action ()
        }
        
        set {
            set_action (newValue)
        }
        
    }
    
    /// Paths that define the inputs or outputs bound on the device.
    final public var paths: PackedStringArray {
        get {
            return get_paths ()
        }
        
        set {
            set_paths (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_action: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_action")
        return withUnsafePointer(to: &OpenXRIPBinding.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 349361333)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_action(_ action: OpenXRAction?) {
        withUnsafePointer(to: action?.handle) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(OpenXRIPBinding.method_set_action, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_action: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_action")
        return withUnsafePointer(to: &OpenXRIPBinding.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 4072409085)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_action() -> OpenXRAction? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall(OpenXRIPBinding.method_get_action, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_get_path_count: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_path_count")
        return withUnsafePointer(to: &OpenXRIPBinding.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    /// Get the number of input/output paths in this binding.
    public final func getPathCount() -> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall(OpenXRIPBinding.method_get_path_count, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_paths: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_paths")
        return withUnsafePointer(to: &OpenXRIPBinding.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 4015028928)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_paths(_ paths: PackedStringArray) {
        withUnsafePointer(to: paths.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(OpenXRIPBinding.method_set_paths, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_paths: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_paths")
        return withUnsafePointer(to: &OpenXRIPBinding.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1139954409)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_paths() -> PackedStringArray {
        let _result: PackedStringArray = PackedStringArray ()
        gi.object_method_bind_ptrcall(OpenXRIPBinding.method_get_paths, UnsafeMutableRawPointer(mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_has_path: GDExtensionMethodBindPtr = {
        let methodName = StringName("has_path")
        return withUnsafePointer(to: &OpenXRIPBinding.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3927539163)!
            }
            
        }
        
    }()
    
    /// Returns `true` if this input/output path is part of this binding.
    public final func hasPath(_ path: String) -> Bool {
        var _result: Bool = false
        let path = GString(path)
        withUnsafePointer(to: path.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(OpenXRIPBinding.method_has_path, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_add_path: GDExtensionMethodBindPtr = {
        let methodName = StringName("add_path")
        return withUnsafePointer(to: &OpenXRIPBinding.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    /// Add an input/output path to this binding.
    public final func addPath(_ path: String) {
        let path = GString(path)
        withUnsafePointer(to: path.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(OpenXRIPBinding.method_add_path, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_remove_path: GDExtensionMethodBindPtr = {
        let methodName = StringName("remove_path")
        return withUnsafePointer(to: &OpenXRIPBinding.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    /// Removes this input/output path from this binding.
    public final func removePath(_ path: String) {
        let path = GString(path)
        withUnsafePointer(to: path.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(OpenXRIPBinding.method_remove_path, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
}


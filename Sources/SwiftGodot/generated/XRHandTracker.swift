// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A tracked hand in XR.
/// 
/// A hand tracking system will create an instance of this object and add it to the ``XRServer``. This tracking system will then obtain skeleton data, convert it to the Godot Humanoid hand skeleton and store this data on the ``XRHandTracker`` object.
/// 
/// Use ``XRHandModifier3D`` to animate a hand mesh using hand tracking data.
/// 
open class XRHandTracker: XRPositionalTracker {
    override open class var godotClassName: StringName { "XRHandTracker" }
    public enum HandTrackingSource: Int64, CaseIterable, CustomDebugStringConvertible {
        /// The source of hand tracking data is unknown.
        case unknown = 0 // HAND_TRACKING_SOURCE_UNKNOWN
        /// The source of hand tracking data is unobstructed, meaning that an accurate method of hand tracking is used. These include optical hand tracking, data gloves, etc.
        case unobstructed = 1 // HAND_TRACKING_SOURCE_UNOBSTRUCTED
        /// The source of hand tracking data is a controller, meaning that joint positions are inferred from controller inputs.
        case controller = 2 // HAND_TRACKING_SOURCE_CONTROLLER
        /// Represents the size of the ``XRHandTracker/HandTrackingSource`` enum.
        case max = 3 // HAND_TRACKING_SOURCE_MAX
        /// A textual representation of this instance, suitable for debugging
        public var debugDescription: String {
            switch self {
                case .unknown: return ".unknown"
                case .unobstructed: return ".unobstructed"
                case .controller: return ".controller"
                case .max: return ".max"
            }
            
        }
        
    }
    
    public enum HandJoint: Int64, CaseIterable, CustomDebugStringConvertible {
        /// Palm joint.
        case palm = 0 // HAND_JOINT_PALM
        /// Wrist joint.
        case wrist = 1 // HAND_JOINT_WRIST
        /// Thumb metacarpal joint.
        case thumbMetacarpal = 2 // HAND_JOINT_THUMB_METACARPAL
        /// Thumb phalanx proximal joint.
        case thumbPhalanxProximal = 3 // HAND_JOINT_THUMB_PHALANX_PROXIMAL
        /// Thumb phalanx distal joint.
        case thumbPhalanxDistal = 4 // HAND_JOINT_THUMB_PHALANX_DISTAL
        /// Thumb tip joint.
        case thumbTip = 5 // HAND_JOINT_THUMB_TIP
        /// Index finger metacarpal joint.
        case indexFingerMetacarpal = 6 // HAND_JOINT_INDEX_FINGER_METACARPAL
        /// Index finger phalanx proximal joint.
        case indexFingerPhalanxProximal = 7 // HAND_JOINT_INDEX_FINGER_PHALANX_PROXIMAL
        /// Index finger phalanx intermediate joint.
        case indexFingerPhalanxIntermediate = 8 // HAND_JOINT_INDEX_FINGER_PHALANX_INTERMEDIATE
        /// Index finger phalanx distal joint.
        case indexFingerPhalanxDistal = 9 // HAND_JOINT_INDEX_FINGER_PHALANX_DISTAL
        /// Index finger tip joint.
        case indexFingerTip = 10 // HAND_JOINT_INDEX_FINGER_TIP
        /// Middle finger metacarpal joint.
        case middleFingerMetacarpal = 11 // HAND_JOINT_MIDDLE_FINGER_METACARPAL
        /// Middle finger phalanx proximal joint.
        case middleFingerPhalanxProximal = 12 // HAND_JOINT_MIDDLE_FINGER_PHALANX_PROXIMAL
        /// Middle finger phalanx intermediate joint.
        case middleFingerPhalanxIntermediate = 13 // HAND_JOINT_MIDDLE_FINGER_PHALANX_INTERMEDIATE
        /// Middle finger phalanx distal joint.
        case middleFingerPhalanxDistal = 14 // HAND_JOINT_MIDDLE_FINGER_PHALANX_DISTAL
        /// Middle finger tip joint.
        case middleFingerTip = 15 // HAND_JOINT_MIDDLE_FINGER_TIP
        /// Ring finger metacarpal joint.
        case ringFingerMetacarpal = 16 // HAND_JOINT_RING_FINGER_METACARPAL
        /// Ring finger phalanx proximal joint.
        case ringFingerPhalanxProximal = 17 // HAND_JOINT_RING_FINGER_PHALANX_PROXIMAL
        /// Ring finger phalanx intermediate joint.
        case ringFingerPhalanxIntermediate = 18 // HAND_JOINT_RING_FINGER_PHALANX_INTERMEDIATE
        /// Ring finger phalanx distal joint.
        case ringFingerPhalanxDistal = 19 // HAND_JOINT_RING_FINGER_PHALANX_DISTAL
        /// Ring finger tip joint.
        case ringFingerTip = 20 // HAND_JOINT_RING_FINGER_TIP
        /// Pinky finger metacarpal joint.
        case pinkyFingerMetacarpal = 21 // HAND_JOINT_PINKY_FINGER_METACARPAL
        /// Pinky finger phalanx proximal joint.
        case pinkyFingerPhalanxProximal = 22 // HAND_JOINT_PINKY_FINGER_PHALANX_PROXIMAL
        /// Pinky finger phalanx intermediate joint.
        case pinkyFingerPhalanxIntermediate = 23 // HAND_JOINT_PINKY_FINGER_PHALANX_INTERMEDIATE
        /// Pinky finger phalanx distal joint.
        case pinkyFingerPhalanxDistal = 24 // HAND_JOINT_PINKY_FINGER_PHALANX_DISTAL
        /// Pinky finger tip joint.
        case pinkyFingerTip = 25 // HAND_JOINT_PINKY_FINGER_TIP
        /// Represents the size of the ``XRHandTracker/HandJoint`` enum.
        case max = 26 // HAND_JOINT_MAX
        /// A textual representation of this instance, suitable for debugging
        public var debugDescription: String {
            switch self {
                case .palm: return ".palm"
                case .wrist: return ".wrist"
                case .thumbMetacarpal: return ".thumbMetacarpal"
                case .thumbPhalanxProximal: return ".thumbPhalanxProximal"
                case .thumbPhalanxDistal: return ".thumbPhalanxDistal"
                case .thumbTip: return ".thumbTip"
                case .indexFingerMetacarpal: return ".indexFingerMetacarpal"
                case .indexFingerPhalanxProximal: return ".indexFingerPhalanxProximal"
                case .indexFingerPhalanxIntermediate: return ".indexFingerPhalanxIntermediate"
                case .indexFingerPhalanxDistal: return ".indexFingerPhalanxDistal"
                case .indexFingerTip: return ".indexFingerTip"
                case .middleFingerMetacarpal: return ".middleFingerMetacarpal"
                case .middleFingerPhalanxProximal: return ".middleFingerPhalanxProximal"
                case .middleFingerPhalanxIntermediate: return ".middleFingerPhalanxIntermediate"
                case .middleFingerPhalanxDistal: return ".middleFingerPhalanxDistal"
                case .middleFingerTip: return ".middleFingerTip"
                case .ringFingerMetacarpal: return ".ringFingerMetacarpal"
                case .ringFingerPhalanxProximal: return ".ringFingerPhalanxProximal"
                case .ringFingerPhalanxIntermediate: return ".ringFingerPhalanxIntermediate"
                case .ringFingerPhalanxDistal: return ".ringFingerPhalanxDistal"
                case .ringFingerTip: return ".ringFingerTip"
                case .pinkyFingerMetacarpal: return ".pinkyFingerMetacarpal"
                case .pinkyFingerPhalanxProximal: return ".pinkyFingerPhalanxProximal"
                case .pinkyFingerPhalanxIntermediate: return ".pinkyFingerPhalanxIntermediate"
                case .pinkyFingerPhalanxDistal: return ".pinkyFingerPhalanxDistal"
                case .pinkyFingerTip: return ".pinkyFingerTip"
                case .max: return ".max"
            }
            
        }
        
    }
    
    public struct HandJointFlags: OptionSet, CustomDebugStringConvertible {
        public let rawValue: Int
        public init (rawValue: Int) {
            self.rawValue = rawValue
        }
        
        /// The hand joint's orientation data is valid.
        public static let orientationValid = HandJointFlags (rawValue: 1)
        /// The hand joint's orientation is actively tracked. May not be set if tracking has been temporarily lost.
        public static let orientationTracked = HandJointFlags (rawValue: 2)
        /// The hand joint's position data is valid.
        public static let positionValid = HandJointFlags (rawValue: 4)
        /// The hand joint's position is actively tracked. May not be set if tracking has been temporarily lost.
        public static let positionTracked = HandJointFlags (rawValue: 8)
        /// The hand joint's linear velocity data is valid.
        public static let linearVelocityValid = HandJointFlags (rawValue: 16)
        /// The hand joint's angular velocity data is valid.
        public static let angularVelocityValid = HandJointFlags (rawValue: 32)
        /// A textual representation of this instance, suitable for debugging
        public var debugDescription: String {
            var result = ""
            if self.contains (.orientationValid) { result += "orientationValid, " }
            if self.contains (.orientationTracked) { result += "orientationTracked, " }
            if self.contains (.positionValid) { result += "positionValid, " }
            if self.contains (.positionTracked) { result += "positionTracked, " }
            if self.contains (.linearVelocityValid) { result += "linearVelocityValid, " }
            if self.contains (.angularVelocityValid) { result += "angularVelocityValid, " }
            if result.hasSuffix (", ") { result.removeLast (2) }
            return result
        }
        
    }
    
    
    /* Properties */
    
    /// If `true`, the hand tracking data is valid.
    final public var hasTrackingData: Bool {
        get {
            return get_has_tracking_data ()
        }
        
        set {
            set_has_tracking_data (newValue)
        }
        
    }
    
    /// The source of the hand tracking data.
    final public var handTrackingSource: XRHandTracker.HandTrackingSource {
        get {
            return get_hand_tracking_source ()
        }
        
        set {
            set_hand_tracking_source (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_has_tracking_data: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_has_tracking_data")
        return withUnsafePointer(to: &XRHandTracker.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_has_tracking_data(_ hasData: Bool) {
        withUnsafePointer(to: hasData) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(XRHandTracker.method_set_has_tracking_data, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_has_tracking_data: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_has_tracking_data")
        return withUnsafePointer(to: &XRHandTracker.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_has_tracking_data() -> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall(XRHandTracker.method_get_has_tracking_data, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_hand_tracking_source: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_hand_tracking_source")
        return withUnsafePointer(to: &XRHandTracker.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2958308861)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_hand_tracking_source(_ source: XRHandTracker.HandTrackingSource) {
        withUnsafePointer(to: source.rawValue) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(XRHandTracker.method_set_hand_tracking_source, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_hand_tracking_source: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_hand_tracking_source")
        return withUnsafePointer(to: &XRHandTracker.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2475045250)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_hand_tracking_source() -> XRHandTracker.HandTrackingSource {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall(XRHandTracker.method_get_hand_tracking_source, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return XRHandTracker.HandTrackingSource (rawValue: _result)!
    }
    
    fileprivate static var method_set_hand_joint_flags: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_hand_joint_flags")
        return withUnsafePointer(to: &XRHandTracker.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3028437365)!
            }
            
        }
        
    }()
    
    /// Sets flags about the validity of the tracking data for the given hand joint.
    public final func setHandJointFlags(joint: XRHandTracker.HandJoint, flags: XRHandTracker.HandJointFlags) {
        withUnsafePointer(to: joint.rawValue) { pArg0 in
            withUnsafePointer(to: flags.rawValue) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(XRHandTracker.method_set_hand_joint_flags, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_hand_joint_flags: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_hand_joint_flags")
        return withUnsafePointer(to: &XRHandTracker.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1730972401)!
            }
            
        }
        
    }()
    
    /// Returns flags about the validity of the tracking data for the given hand joint (see ``XRHandTracker.HandJointFlags``).
    public final func getHandJointFlags(joint: XRHandTracker.HandJoint) -> XRHandTracker.HandJointFlags {
        var _result: XRHandTracker.HandJointFlags = XRHandTracker.HandJointFlags ()
        withUnsafePointer(to: joint.rawValue) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(XRHandTracker.method_get_hand_joint_flags, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_set_hand_joint_transform: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_hand_joint_transform")
        return withUnsafePointer(to: &XRHandTracker.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2529959613)!
            }
            
        }
        
    }()
    
    /// Sets the transform for the given hand joint.
    public final func setHandJointTransform(joint: XRHandTracker.HandJoint, transform: Transform3D) {
        withUnsafePointer(to: joint.rawValue) { pArg0 in
            withUnsafePointer(to: transform) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(XRHandTracker.method_set_hand_joint_transform, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_hand_joint_transform: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_hand_joint_transform")
        return withUnsafePointer(to: &XRHandTracker.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1090840196)!
            }
            
        }
        
    }()
    
    /// Returns the transform for the given hand joint.
    public final func getHandJointTransform(joint: XRHandTracker.HandJoint) -> Transform3D {
        var _result: Transform3D = Transform3D ()
        withUnsafePointer(to: joint.rawValue) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(XRHandTracker.method_get_hand_joint_transform, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_set_hand_joint_radius: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_hand_joint_radius")
        return withUnsafePointer(to: &XRHandTracker.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2723659615)!
            }
            
        }
        
    }()
    
    /// Sets the radius of the given hand joint.
    public final func setHandJointRadius(joint: XRHandTracker.HandJoint, radius: Double) {
        withUnsafePointer(to: joint.rawValue) { pArg0 in
            withUnsafePointer(to: radius) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(XRHandTracker.method_set_hand_joint_radius, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_hand_joint_radius: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_hand_joint_radius")
        return withUnsafePointer(to: &XRHandTracker.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3400025734)!
            }
            
        }
        
    }()
    
    /// Returns the radius of the given hand joint.
    public final func getHandJointRadius(joint: XRHandTracker.HandJoint) -> Double {
        var _result: Double = 0.0
        withUnsafePointer(to: joint.rawValue) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(XRHandTracker.method_get_hand_joint_radius, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_set_hand_joint_linear_velocity: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_hand_joint_linear_velocity")
        return withUnsafePointer(to: &XRHandTracker.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1978646737)!
            }
            
        }
        
    }()
    
    /// Sets the linear velocity for the given hand joint.
    public final func setHandJointLinearVelocity(joint: XRHandTracker.HandJoint, linearVelocity: Vector3) {
        withUnsafePointer(to: joint.rawValue) { pArg0 in
            withUnsafePointer(to: linearVelocity) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(XRHandTracker.method_set_hand_joint_linear_velocity, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_hand_joint_linear_velocity: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_hand_joint_linear_velocity")
        return withUnsafePointer(to: &XRHandTracker.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 547240792)!
            }
            
        }
        
    }()
    
    /// Returns the linear velocity for the given hand joint.
    public final func getHandJointLinearVelocity(joint: XRHandTracker.HandJoint) -> Vector3 {
        var _result: Vector3 = Vector3 ()
        withUnsafePointer(to: joint.rawValue) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(XRHandTracker.method_get_hand_joint_linear_velocity, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_set_hand_joint_angular_velocity: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_hand_joint_angular_velocity")
        return withUnsafePointer(to: &XRHandTracker.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1978646737)!
            }
            
        }
        
    }()
    
    /// Sets the angular velocity for the given hand joint.
    public final func setHandJointAngularVelocity(joint: XRHandTracker.HandJoint, angularVelocity: Vector3) {
        withUnsafePointer(to: joint.rawValue) { pArg0 in
            withUnsafePointer(to: angularVelocity) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(XRHandTracker.method_set_hand_joint_angular_velocity, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_hand_joint_angular_velocity: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_hand_joint_angular_velocity")
        return withUnsafePointer(to: &XRHandTracker.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 547240792)!
            }
            
        }
        
    }()
    
    /// Returns the angular velocity for the given hand joint.
    public final func getHandJointAngularVelocity(joint: XRHandTracker.HandJoint) -> Vector3 {
        var _result: Vector3 = Vector3 ()
        withUnsafePointer(to: joint.rawValue) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(XRHandTracker.method_get_hand_joint_angular_velocity, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
}


// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A 2D game object, inherited by all 2D-related nodes. Has a position, rotation, scale, and Z index.
/// 
/// A 2D game object, with a transform (position, rotation, and scale). All 2D nodes, including physics objects and sprites, inherit from Node2D. Use Node2D as a parent node to move, scale and rotate children in a 2D project. Also gives control of the node's render order.
open class Node2D: CanvasItem {
    override open class var godotClassName: StringName { "Node2D" }
    
    /* Properties */
    
    /// Position, relative to the node's parent.
    final public var position: Vector2 {
        get {
            return get_position ()
        }
        
        set {
            set_position (newValue)
        }
        
    }
    
    /// Rotation in radians, relative to the node's parent.
    /// 
    /// > Note: This property is edited in the inspector in degrees. If you want to use degrees in a script, use ``rotationDegrees``.
    /// 
    final public var rotation: Double {
        get {
            return get_rotation ()
        }
        
        set {
            set_rotation (newValue)
        }
        
    }
    
    /// Helper property to access ``rotation`` in degrees instead of radians.
    final public var rotationDegrees: Double {
        get {
            return get_rotation_degrees ()
        }
        
        set {
            set_rotation_degrees (newValue)
        }
        
    }
    
    /// The node's scale. Unscaled value: `(1, 1)`.
    /// 
    /// > Note: Negative X scales in 2D are not decomposable from the transformation matrix. Due to the way scale is represented with transformation matrices in Godot, negative scales on the X axis will be changed to negative scales on the Y axis and a rotation of 180 degrees when decomposed.
    /// 
    final public var scale: Vector2 {
        get {
            return get_scale ()
        }
        
        set {
            set_scale (newValue)
        }
        
    }
    
    /// Slants the node.
    /// 
    /// > Note: Skew is X axis only.
    /// 
    final public var skew: Double {
        get {
            return get_skew ()
        }
        
        set {
            set_skew (newValue)
        }
        
    }
    
    /// Local ``Transform2D``.
    final public var transform: Transform2D {
        get {
            return getTransform ()
        }
        
        set {
            set_transform (newValue)
        }
        
    }
    
    /// Global position.
    final public var globalPosition: Vector2 {
        get {
            return get_global_position ()
        }
        
        set {
            set_global_position (newValue)
        }
        
    }
    
    /// Global rotation in radians.
    final public var globalRotation: Double {
        get {
            return get_global_rotation ()
        }
        
        set {
            set_global_rotation (newValue)
        }
        
    }
    
    /// Helper property to access ``globalRotation`` in degrees instead of radians.
    final public var globalRotationDegrees: Double {
        get {
            return get_global_rotation_degrees ()
        }
        
        set {
            set_global_rotation_degrees (newValue)
        }
        
    }
    
    /// Global scale.
    final public var globalScale: Vector2 {
        get {
            return get_global_scale ()
        }
        
        set {
            set_global_scale (newValue)
        }
        
    }
    
    /// Global skew in radians.
    final public var globalSkew: Double {
        get {
            return get_global_skew ()
        }
        
        set {
            set_global_skew (newValue)
        }
        
    }
    
    /// Global ``Transform2D``.
    final public var globalTransform: Transform2D {
        get {
            return getGlobalTransform ()
        }
        
        set {
            set_global_transform (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_position: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_position")
        return withUnsafePointer(to: &Node2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 743155724)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_position(_ position: Vector2) {
        withUnsafePointer(to: position) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(Node2D.method_set_position, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_set_rotation: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_rotation")
        return withUnsafePointer(to: &Node2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_rotation(_ radians: Double) {
        withUnsafePointer(to: radians) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(Node2D.method_set_rotation, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_set_rotation_degrees: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_rotation_degrees")
        return withUnsafePointer(to: &Node2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_rotation_degrees(_ degrees: Double) {
        withUnsafePointer(to: degrees) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(Node2D.method_set_rotation_degrees, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_set_skew: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_skew")
        return withUnsafePointer(to: &Node2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_skew(_ radians: Double) {
        withUnsafePointer(to: radians) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(Node2D.method_set_skew, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_set_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_scale")
        return withUnsafePointer(to: &Node2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 743155724)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_scale(_ scale: Vector2) {
        withUnsafePointer(to: scale) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(Node2D.method_set_scale, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_position: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_position")
        return withUnsafePointer(to: &Node2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3341600327)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_position() -> Vector2 {
        var _result: Vector2 = Vector2 ()
        gi.object_method_bind_ptrcall(Node2D.method_get_position, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_rotation: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_rotation")
        return withUnsafePointer(to: &Node2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_rotation() -> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall(Node2D.method_get_rotation, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_rotation_degrees: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_rotation_degrees")
        return withUnsafePointer(to: &Node2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_rotation_degrees() -> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall(Node2D.method_get_rotation_degrees, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_skew: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_skew")
        return withUnsafePointer(to: &Node2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_skew() -> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall(Node2D.method_get_skew, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_scale")
        return withUnsafePointer(to: &Node2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3341600327)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_scale() -> Vector2 {
        var _result: Vector2 = Vector2 ()
        gi.object_method_bind_ptrcall(Node2D.method_get_scale, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_rotate: GDExtensionMethodBindPtr = {
        let methodName = StringName("rotate")
        return withUnsafePointer(to: &Node2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    /// Applies a rotation to the node, in radians, starting from its current rotation.
    public final func rotate(radians: Double) {
        withUnsafePointer(to: radians) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(Node2D.method_rotate, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_move_local_x: GDExtensionMethodBindPtr = {
        let methodName = StringName("move_local_x")
        return withUnsafePointer(to: &Node2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2087892650)!
            }
            
        }
        
    }()
    
    /// Applies a local translation on the node's X axis based on the ``Node/_process(delta:)``'s `delta`. If `scaled` is `false`, normalizes the movement.
    public final func moveLocalX(delta: Double, scaled: Bool = false) {
        withUnsafePointer(to: delta) { pArg0 in
            withUnsafePointer(to: scaled) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(Node2D.method_move_local_x, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_move_local_y: GDExtensionMethodBindPtr = {
        let methodName = StringName("move_local_y")
        return withUnsafePointer(to: &Node2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2087892650)!
            }
            
        }
        
    }()
    
    /// Applies a local translation on the node's Y axis based on the ``Node/_process(delta:)``'s `delta`. If `scaled` is `false`, normalizes the movement.
    public final func moveLocalY(delta: Double, scaled: Bool = false) {
        withUnsafePointer(to: delta) { pArg0 in
            withUnsafePointer(to: scaled) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(Node2D.method_move_local_y, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_translate: GDExtensionMethodBindPtr = {
        let methodName = StringName("translate")
        return withUnsafePointer(to: &Node2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 743155724)!
            }
            
        }
        
    }()
    
    /// Translates the node by the given `offset` in local coordinates.
    public final func translate(offset: Vector2) {
        withUnsafePointer(to: offset) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(Node2D.method_translate, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_global_translate: GDExtensionMethodBindPtr = {
        let methodName = StringName("global_translate")
        return withUnsafePointer(to: &Node2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 743155724)!
            }
            
        }
        
    }()
    
    /// Adds the `offset` vector to the node's global position.
    public final func globalTranslate(offset: Vector2) {
        withUnsafePointer(to: offset) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(Node2D.method_global_translate, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_apply_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName("apply_scale")
        return withUnsafePointer(to: &Node2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 743155724)!
            }
            
        }
        
    }()
    
    /// Multiplies the current scale by the `ratio` vector.
    public final func applyScale(ratio: Vector2) {
        withUnsafePointer(to: ratio) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(Node2D.method_apply_scale, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_set_global_position: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_global_position")
        return withUnsafePointer(to: &Node2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 743155724)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_global_position(_ position: Vector2) {
        withUnsafePointer(to: position) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(Node2D.method_set_global_position, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_global_position: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_global_position")
        return withUnsafePointer(to: &Node2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3341600327)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_global_position() -> Vector2 {
        var _result: Vector2 = Vector2 ()
        gi.object_method_bind_ptrcall(Node2D.method_get_global_position, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_global_rotation: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_global_rotation")
        return withUnsafePointer(to: &Node2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_global_rotation(_ radians: Double) {
        withUnsafePointer(to: radians) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(Node2D.method_set_global_rotation, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_set_global_rotation_degrees: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_global_rotation_degrees")
        return withUnsafePointer(to: &Node2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_global_rotation_degrees(_ degrees: Double) {
        withUnsafePointer(to: degrees) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(Node2D.method_set_global_rotation_degrees, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_global_rotation: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_global_rotation")
        return withUnsafePointer(to: &Node2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_global_rotation() -> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall(Node2D.method_get_global_rotation, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_global_rotation_degrees: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_global_rotation_degrees")
        return withUnsafePointer(to: &Node2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_global_rotation_degrees() -> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall(Node2D.method_get_global_rotation_degrees, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_global_skew: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_global_skew")
        return withUnsafePointer(to: &Node2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_global_skew(_ radians: Double) {
        withUnsafePointer(to: radians) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(Node2D.method_set_global_skew, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_global_skew: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_global_skew")
        return withUnsafePointer(to: &Node2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_global_skew() -> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall(Node2D.method_get_global_skew, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_global_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_global_scale")
        return withUnsafePointer(to: &Node2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 743155724)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_global_scale(_ scale: Vector2) {
        withUnsafePointer(to: scale) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(Node2D.method_set_global_scale, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_global_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_global_scale")
        return withUnsafePointer(to: &Node2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3341600327)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_global_scale() -> Vector2 {
        var _result: Vector2 = Vector2 ()
        gi.object_method_bind_ptrcall(Node2D.method_get_global_scale, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_transform: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_transform")
        return withUnsafePointer(to: &Node2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2761652528)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_transform(_ xform: Transform2D) {
        withUnsafePointer(to: xform) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(Node2D.method_set_transform, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_set_global_transform: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_global_transform")
        return withUnsafePointer(to: &Node2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2761652528)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_global_transform(_ xform: Transform2D) {
        withUnsafePointer(to: xform) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(Node2D.method_set_global_transform, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_look_at: GDExtensionMethodBindPtr = {
        let methodName = StringName("look_at")
        return withUnsafePointer(to: &Node2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 743155724)!
            }
            
        }
        
    }()
    
    /// Rotates the node so that its local +X axis points towards the `point`, which is expected to use global coordinates.
    /// 
    /// `point` should not be the same as the node's position, otherwise the node always looks to the right.
    /// 
    public final func lookAt(point: Vector2) {
        withUnsafePointer(to: point) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(Node2D.method_look_at, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_angle_to: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_angle_to")
        return withUnsafePointer(to: &Node2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2276447920)!
            }
            
        }
        
    }()
    
    /// Returns the angle between the node and the `point` in radians.
    /// 
    /// <a href="https://raw.githubusercontent.com/godotengine/godot-docs/master/img/node2d_get_angle_to.png">Illustration of the returned angle.</a>
    /// 
    public final func getAngleTo(point: Vector2) -> Double {
        var _result: Double = 0.0
        withUnsafePointer(to: point) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(Node2D.method_get_angle_to, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_to_local: GDExtensionMethodBindPtr = {
        let methodName = StringName("to_local")
        return withUnsafePointer(to: &Node2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2656412154)!
            }
            
        }
        
    }()
    
    /// Transforms the provided global position into a position in local coordinate space. The output will be local relative to the ``Node2D`` it is called on. e.g. It is appropriate for determining the positions of child nodes, but it is not appropriate for determining its own position relative to its parent.
    public final func toLocal(globalPoint: Vector2) -> Vector2 {
        var _result: Vector2 = Vector2 ()
        withUnsafePointer(to: globalPoint) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(Node2D.method_to_local, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_to_global: GDExtensionMethodBindPtr = {
        let methodName = StringName("to_global")
        return withUnsafePointer(to: &Node2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2656412154)!
            }
            
        }
        
    }()
    
    /// Transforms the provided local position into a position in global coordinate space. The input is expected to be local relative to the ``Node2D`` it is called on. e.g. Applying this method to the positions of child nodes will correctly transform their positions into the global coordinate space, but applying it to a node's own position will give an incorrect result, as it will incorporate the node's own transformation into its global position.
    public final func toGlobal(localPoint: Vector2) -> Vector2 {
        var _result: Vector2 = Vector2 ()
        withUnsafePointer(to: localPoint) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(Node2D.method_to_global, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_get_relative_transform_to_parent: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_relative_transform_to_parent")
        return withUnsafePointer(to: &Node2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 904556875)!
            }
            
        }
        
    }()
    
    /// Returns the ``Transform2D`` relative to this node's parent.
    public final func getRelativeTransformToParent(_ parent: Node?) -> Transform2D {
        var _result: Transform2D = Transform2D ()
        withUnsafePointer(to: parent?.handle) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(Node2D.method_get_relative_transform_to_parent, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
}


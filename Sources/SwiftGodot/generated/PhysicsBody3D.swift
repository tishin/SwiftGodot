// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Abstract base class for 3D game objects affected by physics.
/// 
/// ``PhysicsBody3D`` is an abstract base class for 3D game objects affected by physics. All 3D physics bodies inherit from it.
/// 
/// > Warning: With a non-uniform scale, this node will likely not behave as expected. It is advised to keep its scale the same on all axes and adjust its collision shape(s) instead.
/// 
open class PhysicsBody3D: CollisionObject3D {
    override open class var godotClassName: StringName { "PhysicsBody3D" }
    
    /* Properties */
    
    /// Lock the body's linear movement in the X axis.
    final public var axisLockLinearX: Bool {
        get {
            return get_axis_lock (PhysicsServer3D.BodyAxis (rawValue: 1)!)
        }
        
        set {
            set_axis_lock (PhysicsServer3D.BodyAxis (rawValue: 1)!, newValue)
        }
        
    }
    
    /// Lock the body's linear movement in the Y axis.
    final public var axisLockLinearY: Bool {
        get {
            return get_axis_lock (PhysicsServer3D.BodyAxis (rawValue: 2)!)
        }
        
        set {
            set_axis_lock (PhysicsServer3D.BodyAxis (rawValue: 2)!, newValue)
        }
        
    }
    
    /// Lock the body's linear movement in the Z axis.
    final public var axisLockLinearZ: Bool {
        get {
            return get_axis_lock (PhysicsServer3D.BodyAxis (rawValue: 4)!)
        }
        
        set {
            set_axis_lock (PhysicsServer3D.BodyAxis (rawValue: 4)!, newValue)
        }
        
    }
    
    /// Lock the body's rotation in the X axis.
    final public var axisLockAngularX: Bool {
        get {
            return get_axis_lock (PhysicsServer3D.BodyAxis (rawValue: 8)!)
        }
        
        set {
            set_axis_lock (PhysicsServer3D.BodyAxis (rawValue: 8)!, newValue)
        }
        
    }
    
    /// Lock the body's rotation in the Y axis.
    final public var axisLockAngularY: Bool {
        get {
            return get_axis_lock (PhysicsServer3D.BodyAxis (rawValue: 16)!)
        }
        
        set {
            set_axis_lock (PhysicsServer3D.BodyAxis (rawValue: 16)!, newValue)
        }
        
    }
    
    /// Lock the body's rotation in the Z axis.
    final public var axisLockAngularZ: Bool {
        get {
            return get_axis_lock (PhysicsServer3D.BodyAxis (rawValue: 32)!)
        }
        
        set {
            set_axis_lock (PhysicsServer3D.BodyAxis (rawValue: 32)!, newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_move_and_collide: GDExtensionMethodBindPtr = {
        let methodName = StringName("move_and_collide")
        return withUnsafePointer(to: &PhysicsBody3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3208792678)!
            }
            
        }
        
    }()
    
    /// Moves the body along the vector `motion`. In order to be frame rate independent in ``Node/_physicsProcess(delta:)`` or ``Node/_process(delta:)``, `motion` should be computed using `delta`.
    /// 
    /// The body will stop if it collides. Returns a ``KinematicCollision3D``, which contains information about the collision when stopped, or when touching another body along the motion.
    /// 
    /// If `testOnly` is `true`, the body does not move but the would-be collision information is given.
    /// 
    /// `safeMargin` is the extra margin used for collision recovery (see ``CharacterBody3D/safeMargin`` for more details).
    /// 
    /// If `recoveryAsCollision` is `true`, any depenetration from the recovery phase is also reported as a collision; this is used e.g. by ``CharacterBody3D`` for improving floor detection during floor snapping.
    /// 
    /// `maxCollisions` allows to retrieve more than one collision result.
    /// 
    public final func moveAndCollide(motion: Vector3, testOnly: Bool = false, safeMargin: Double = 0.001, recoveryAsCollision: Bool = false, maxCollisions: Int32 = 1) -> KinematicCollision3D? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        withUnsafePointer(to: motion) { pArg0 in
            withUnsafePointer(to: testOnly) { pArg1 in
                withUnsafePointer(to: safeMargin) { pArg2 in
                    withUnsafePointer(to: recoveryAsCollision) { pArg3 in
                        withUnsafePointer(to: maxCollisions) { pArg4 in
                            withUnsafePointer(to: UnsafeRawPointersN5(pArg0, pArg1, pArg2, pArg3, pArg4)) { pArgs in
                                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 5) { pArgs in
                                    gi.object_method_bind_ptrcall(PhysicsBody3D.method_move_and_collide, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                                }
                                
                            }
                            
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_test_move: GDExtensionMethodBindPtr = {
        let methodName = StringName("test_move")
        return withUnsafePointer(to: &PhysicsBody3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2481691619)!
            }
            
        }
        
    }()
    
    /// Checks for collisions without moving the body. In order to be frame rate independent in ``Node/_physicsProcess(delta:)`` or ``Node/_process(delta:)``, `motion` should be computed using `delta`.
    /// 
    /// Virtually sets the node's position, scale and rotation to that of the given ``Transform3D``, then tries to move the body along the vector `motion`. Returns `true` if a collision would stop the body from moving along the whole path.
    /// 
    /// `collision` is an optional object of type ``KinematicCollision3D``, which contains additional information about the collision when stopped, or when touching another body along the motion.
    /// 
    /// `safeMargin` is the extra margin used for collision recovery (see ``CharacterBody3D/safeMargin`` for more details).
    /// 
    /// If `recoveryAsCollision` is `true`, any depenetration from the recovery phase is also reported as a collision; this is useful for checking whether the body would _touch_ any other bodies.
    /// 
    /// `maxCollisions` allows to retrieve more than one collision result.
    /// 
    public final func testMove(from: Transform3D, motion: Vector3, collision: KinematicCollision3D? = nil, safeMargin: Double = 0.001, recoveryAsCollision: Bool = false, maxCollisions: Int32 = 1) -> Bool {
        var _result: Bool = false
        withUnsafePointer(to: from) { pArg0 in
            withUnsafePointer(to: motion) { pArg1 in
                withUnsafePointer(to: collision?.handle) { pArg2 in
                    withUnsafePointer(to: safeMargin) { pArg3 in
                        withUnsafePointer(to: recoveryAsCollision) { pArg4 in
                            withUnsafePointer(to: maxCollisions) { pArg5 in
                                withUnsafePointer(to: UnsafeRawPointersN6(pArg0, pArg1, pArg2, pArg3, pArg4, pArg5)) { pArgs in
                                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 6) { pArgs in
                                        gi.object_method_bind_ptrcall(PhysicsBody3D.method_test_move, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                                    }
                                    
                                }
                                
                            }
                            
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_get_gravity: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_gravity")
        return withUnsafePointer(to: &PhysicsBody3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3360562783)!
            }
            
        }
        
    }()
    
    /// Returns the gravity vector computed from all sources that can affect the body, including all gravity overrides from ``Area3D`` nodes and the global world gravity.
    public final func getGravity() -> Vector3 {
        var _result: Vector3 = Vector3 ()
        gi.object_method_bind_ptrcall(PhysicsBody3D.method_get_gravity, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_axis_lock: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_axis_lock")
        return withUnsafePointer(to: &PhysicsBody3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1787895195)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Locks or unlocks the specified linear or rotational `axis` depending on the value of `lock`.
    fileprivate final func set_axis_lock(_ axis: PhysicsServer3D.BodyAxis, _ lock: Bool) {
        withUnsafePointer(to: axis.rawValue) { pArg0 in
            withUnsafePointer(to: lock) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(PhysicsBody3D.method_set_axis_lock, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_axis_lock: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_axis_lock")
        return withUnsafePointer(to: &PhysicsBody3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2264617709)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Returns `true` if the specified linear or rotational `axis` is locked.
    fileprivate final func get_axis_lock(_ axis: PhysicsServer3D.BodyAxis) -> Bool {
        var _result: Bool = false
        withUnsafePointer(to: axis.rawValue) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(PhysicsBody3D.method_get_axis_lock, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_get_collision_exceptions: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_collision_exceptions")
        return withUnsafePointer(to: &PhysicsBody3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2915620761)!
            }
            
        }
        
    }()
    
    /// Returns an array of nodes that were added as collision exceptions for this body.
    public final func getCollisionExceptions() -> ObjectCollection<PhysicsBody3D> {
        var _result: Int64 = 0
        gi.object_method_bind_ptrcall(PhysicsBody3D.method_get_collision_exceptions, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return ObjectCollection<PhysicsBody3D>(content: _result)
    }
    
    fileprivate static var method_add_collision_exception_with: GDExtensionMethodBindPtr = {
        let methodName = StringName("add_collision_exception_with")
        return withUnsafePointer(to: &PhysicsBody3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1078189570)!
            }
            
        }
        
    }()
    
    /// Adds a body to the list of bodies that this body can't collide with.
    public final func addCollisionExceptionWith(body: Node?) {
        withUnsafePointer(to: body?.handle) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(PhysicsBody3D.method_add_collision_exception_with, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_remove_collision_exception_with: GDExtensionMethodBindPtr = {
        let methodName = StringName("remove_collision_exception_with")
        return withUnsafePointer(to: &PhysicsBody3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1078189570)!
            }
            
        }
        
    }()
    
    /// Removes a body from the list of bodies that this body can't collide with.
    public final func removeCollisionExceptionWith(body: Node?) {
        withUnsafePointer(to: body?.handle) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(PhysicsBody3D.method_remove_collision_exception_with, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
}


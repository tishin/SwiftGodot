// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A physics joint that restricts the movement of a 3D physics body along an axis relative to another physics body.
/// 
/// A physics joint that restricts the movement of a 3D physics body along an axis relative to another physics body. For example, Body A could be a ``StaticBody3D`` representing a piston base, while Body B could be a ``RigidBody3D`` representing the piston head, moving up and down.
open class SliderJoint3D: Joint3D {
    override open class var godotClassName: StringName { "SliderJoint3D" }
    public enum Param: Int64, CaseIterable, CustomDebugStringConvertible {
        /// Constant for accessing ``linearLimit/upperDistance``. The maximum difference between the pivot points on their X axis before damping happens.
        case linearLimitUpper = 0 // PARAM_LINEAR_LIMIT_UPPER
        /// Constant for accessing ``linearLimit/lowerDistance``. The minimum difference between the pivot points on their X axis before damping happens.
        case linearLimitLower = 1 // PARAM_LINEAR_LIMIT_LOWER
        /// Constant for accessing ``linearLimit/softness``. A factor applied to the movement across the slider axis once the limits get surpassed. The lower, the slower the movement.
        case linearLimitSoftness = 2 // PARAM_LINEAR_LIMIT_SOFTNESS
        /// Constant for accessing ``linearLimit/restitution``. The amount of restitution once the limits are surpassed. The lower, the more velocity-energy gets lost.
        case linearLimitRestitution = 3 // PARAM_LINEAR_LIMIT_RESTITUTION
        /// Constant for accessing ``linearLimit/damping``. The amount of damping once the slider limits are surpassed.
        case linearLimitDamping = 4 // PARAM_LINEAR_LIMIT_DAMPING
        /// Constant for accessing ``linearMotion/softness``. A factor applied to the movement across the slider axis as long as the slider is in the limits. The lower, the slower the movement.
        case linearMotionSoftness = 5 // PARAM_LINEAR_MOTION_SOFTNESS
        /// Constant for accessing ``linearMotion/restitution``. The amount of restitution inside the slider limits.
        case linearMotionRestitution = 6 // PARAM_LINEAR_MOTION_RESTITUTION
        /// Constant for accessing ``linearMotion/damping``. The amount of damping inside the slider limits.
        case linearMotionDamping = 7 // PARAM_LINEAR_MOTION_DAMPING
        /// Constant for accessing ``linearOrtho/softness``. A factor applied to the movement across axes orthogonal to the slider.
        case linearOrthogonalSoftness = 8 // PARAM_LINEAR_ORTHOGONAL_SOFTNESS
        /// Constant for accessing ``linearMotion/restitution``. The amount of restitution when movement is across axes orthogonal to the slider.
        case linearOrthogonalRestitution = 9 // PARAM_LINEAR_ORTHOGONAL_RESTITUTION
        /// Constant for accessing ``linearMotion/damping``. The amount of damping when movement is across axes orthogonal to the slider.
        case linearOrthogonalDamping = 10 // PARAM_LINEAR_ORTHOGONAL_DAMPING
        /// Constant for accessing ``angularLimit/upperAngle``. The upper limit of rotation in the slider.
        case angularLimitUpper = 11 // PARAM_ANGULAR_LIMIT_UPPER
        /// Constant for accessing ``angularLimit/lowerAngle``. The lower limit of rotation in the slider.
        case angularLimitLower = 12 // PARAM_ANGULAR_LIMIT_LOWER
        /// Constant for accessing ``angularLimit/softness``. A factor applied to the all rotation once the limit is surpassed.
        case angularLimitSoftness = 13 // PARAM_ANGULAR_LIMIT_SOFTNESS
        /// Constant for accessing ``angularLimit/restitution``. The amount of restitution of the rotation when the limit is surpassed.
        case angularLimitRestitution = 14 // PARAM_ANGULAR_LIMIT_RESTITUTION
        /// Constant for accessing ``angularLimit/damping``. The amount of damping of the rotation when the limit is surpassed.
        case angularLimitDamping = 15 // PARAM_ANGULAR_LIMIT_DAMPING
        /// Constant for accessing ``angularMotion/softness``. A factor applied to the all rotation in the limits.
        case angularMotionSoftness = 16 // PARAM_ANGULAR_MOTION_SOFTNESS
        /// Constant for accessing ``angularMotion/restitution``. The amount of restitution of the rotation in the limits.
        case angularMotionRestitution = 17 // PARAM_ANGULAR_MOTION_RESTITUTION
        /// Constant for accessing ``angularMotion/damping``. The amount of damping of the rotation in the limits.
        case angularMotionDamping = 18 // PARAM_ANGULAR_MOTION_DAMPING
        /// Constant for accessing ``angularOrtho/softness``. A factor applied to the all rotation across axes orthogonal to the slider.
        case angularOrthogonalSoftness = 19 // PARAM_ANGULAR_ORTHOGONAL_SOFTNESS
        /// Constant for accessing ``angularOrtho/restitution``. The amount of restitution of the rotation across axes orthogonal to the slider.
        case angularOrthogonalRestitution = 20 // PARAM_ANGULAR_ORTHOGONAL_RESTITUTION
        /// Constant for accessing ``angularOrtho/damping``. The amount of damping of the rotation across axes orthogonal to the slider.
        case angularOrthogonalDamping = 21 // PARAM_ANGULAR_ORTHOGONAL_DAMPING
        /// Represents the size of the ``SliderJoint3D/Param`` enum.
        case max = 22 // PARAM_MAX
        /// A textual representation of this instance, suitable for debugging
        public var debugDescription: String {
            switch self {
                case .linearLimitUpper: return ".linearLimitUpper"
                case .linearLimitLower: return ".linearLimitLower"
                case .linearLimitSoftness: return ".linearLimitSoftness"
                case .linearLimitRestitution: return ".linearLimitRestitution"
                case .linearLimitDamping: return ".linearLimitDamping"
                case .linearMotionSoftness: return ".linearMotionSoftness"
                case .linearMotionRestitution: return ".linearMotionRestitution"
                case .linearMotionDamping: return ".linearMotionDamping"
                case .linearOrthogonalSoftness: return ".linearOrthogonalSoftness"
                case .linearOrthogonalRestitution: return ".linearOrthogonalRestitution"
                case .linearOrthogonalDamping: return ".linearOrthogonalDamping"
                case .angularLimitUpper: return ".angularLimitUpper"
                case .angularLimitLower: return ".angularLimitLower"
                case .angularLimitSoftness: return ".angularLimitSoftness"
                case .angularLimitRestitution: return ".angularLimitRestitution"
                case .angularLimitDamping: return ".angularLimitDamping"
                case .angularMotionSoftness: return ".angularMotionSoftness"
                case .angularMotionRestitution: return ".angularMotionRestitution"
                case .angularMotionDamping: return ".angularMotionDamping"
                case .angularOrthogonalSoftness: return ".angularOrthogonalSoftness"
                case .angularOrthogonalRestitution: return ".angularOrthogonalRestitution"
                case .angularOrthogonalDamping: return ".angularOrthogonalDamping"
                case .max: return ".max"
            }
            
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_param: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_param")
        return withUnsafePointer(to: &SliderJoint3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 918243683)!
            }
            
        }
        
    }()
    
    /// Assigns `value` to the given parameter (see ``SliderJoint3D/Param`` constants).
    public final func setParam(_ param: SliderJoint3D.Param, value: Double) {
        withUnsafePointer(to: param.rawValue) { pArg0 in
            withUnsafePointer(to: value) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(SliderJoint3D.method_set_param, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_param: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_param")
        return withUnsafePointer(to: &SliderJoint3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 959925627)!
            }
            
        }
        
    }()
    
    /// Returns the value of the given parameter (see ``SliderJoint3D/Param`` constants).
    public final func getParam(_ param: SliderJoint3D.Param) -> Double {
        var _result: Double = 0.0
        withUnsafePointer(to: param.rawValue) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(SliderJoint3D.method_get_param, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
}


// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A shader implemented in the Godot shading language.
/// 
/// A custom shader program implemented in the Godot shading language, saved with the `.gdshader` extension.
/// 
/// This class is used by a ``ShaderMaterial`` and allows you to write your own custom behavior for rendering visual items or updating particle information. For a detailed explanation and usage, please see the tutorials linked below.
/// 
open class Shader: Resource {
    override open class var godotClassName: StringName { "Shader" }
    public enum Mode: Int64, CaseIterable, CustomDebugStringConvertible {
        /// Mode used to draw all 3D objects.
        case spatial = 0 // MODE_SPATIAL
        /// Mode used to draw all 2D objects.
        case canvasItem = 1 // MODE_CANVAS_ITEM
        /// Mode used to calculate particle information on a per-particle basis. Not used for drawing.
        case particles = 2 // MODE_PARTICLES
        /// Mode used for drawing skies. Only works with shaders attached to ``Sky`` objects.
        case sky = 3 // MODE_SKY
        /// Mode used for setting the color and density of volumetric fog effect.
        case fog = 4 // MODE_FOG
        /// A textual representation of this instance, suitable for debugging
        public var debugDescription: String {
            switch self {
                case .spatial: return ".spatial"
                case .canvasItem: return ".canvasItem"
                case .particles: return ".particles"
                case .sky: return ".sky"
                case .fog: return ".fog"
            }
            
        }
        
    }
    
    
    /* Properties */
    
    /// Returns the shader's code as the user has written it, not the full generated code used internally.
    final public var code: String {
        get {
            return get_code ()
        }
        
        set {
            set_code (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_get_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_mode")
        return withUnsafePointer(to: &Shader.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3392948163)!
            }
            
        }
        
    }()
    
    /// Returns the shader mode for the shader.
    public final func getMode() -> Shader.Mode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall(Shader.method_get_mode, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return Shader.Mode (rawValue: _result)!
    }
    
    fileprivate static var method_set_code: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_code")
        return withUnsafePointer(to: &Shader.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_code(_ code: String) {
        let code = GString(code)
        withUnsafePointer(to: code.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(Shader.method_set_code, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_code: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_code")
        return withUnsafePointer(to: &Shader.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_code() -> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall(Shader.method_get_code, UnsafeMutableRawPointer(mutating: handle), nil, &_result.content)
        return _result.description
    }
    
    fileprivate static var method_set_default_texture_parameter: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_default_texture_parameter")
        return withUnsafePointer(to: &Shader.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2750740428)!
            }
            
        }
        
    }()
    
    /// Sets the default texture to be used with a texture uniform. The default is used if a texture is not set in the ``ShaderMaterial``.
    /// 
    /// > Note: `name` must match the name of the uniform in the code exactly.
    /// 
    /// > Note: If the sampler array is used use `index` to access the specified texture.
    /// 
    public final func setDefaultTextureParameter(name: StringName, texture: Texture2D?, index: Int32 = 0) {
        withUnsafePointer(to: name.content) { pArg0 in
            withUnsafePointer(to: texture?.handle) { pArg1 in
                withUnsafePointer(to: index) { pArg2 in
                    withUnsafePointer(to: UnsafeRawPointersN3(pArg0, pArg1, pArg2)) { pArgs in
                        pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 3) { pArgs in
                            gi.object_method_bind_ptrcall(Shader.method_set_default_texture_parameter, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_default_texture_parameter: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_default_texture_parameter")
        return withUnsafePointer(to: &Shader.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3090538643)!
            }
            
        }
        
    }()
    
    /// Returns the texture that is set as default for the specified parameter.
    /// 
    /// > Note: `name` must match the name of the uniform in the code exactly.
    /// 
    /// > Note: If the sampler array is used use `index` to access the specified texture.
    /// 
    public final func getDefaultTextureParameter(name: StringName, index: Int32 = 0) -> Texture2D? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        withUnsafePointer(to: name.content) { pArg0 in
            withUnsafePointer(to: index) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(Shader.method_get_default_texture_parameter, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                    }
                    
                }
                
            }
            
        }
        
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_get_shader_uniform_list: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_shader_uniform_list")
        return withUnsafePointer(to: &Shader.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1230511656)!
            }
            
        }
        
    }()
    
    /// Get the list of shader uniforms that can be assigned to a ``ShaderMaterial``, for use with ``ShaderMaterial/setShaderParameter(param:value:)`` and ``ShaderMaterial/getShaderParameter(param:)``. The parameters returned are contained in dictionaries in a similar format to the ones returned by ``Object/getPropertyList()``.
    /// 
    /// If argument `getGroups` is true, parameter grouping hints will be provided.
    /// 
    public final func getShaderUniformList(getGroups: Bool = false) -> GArray {
        let _result: GArray = GArray ()
        withUnsafePointer(to: getGroups) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(Shader.method_get_shader_uniform_list, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result.content)
                }
                
            }
            
        }
        
        return _result
    }
    
}


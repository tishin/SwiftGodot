// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// The parent class of all OpenXR composition layer nodes.
/// 
/// Composition layers allow 2D viewports to be displayed inside of the headset by the XR compositor through special projections that retain their quality. This allows for rendering clear text while keeping the layer at a native resolution.
/// 
/// > Note: If the OpenXR runtime doesn't support the given composition layer type, a fallback mesh can be generated with a ``ViewportTexture``, in order to emulate the composition layer.
/// 
open class OpenXRCompositionLayer: Node3D {
    override open class var godotClassName: StringName { "OpenXRCompositionLayer" }
    
    /* Properties */
    
    /// The ``SubViewport`` to render on the composition layer.
    final public var layerViewport: SubViewport? {
        get {
            return get_layer_viewport ()
        }
        
        set {
            set_layer_viewport (newValue)
        }
        
    }
    
    /// The sort order for this composition layer. Higher numbers will be shown in front of lower numbers.
    /// 
    /// > Note: This will have no effect if a fallback mesh is being used.
    /// 
    final public var sortOrder: Int32 {
        get {
            return get_sort_order ()
        }
        
        set {
            set_sort_order (newValue)
        }
        
    }
    
    /// Enables the blending the layer using its alpha channel.
    /// 
    /// Can be combined with ``Viewport/transparentBg`` to give the layer a transparent background.
    /// 
    final public var alphaBlend: Bool {
        get {
            return get_alpha_blend ()
        }
        
        set {
            set_alpha_blend (newValue)
        }
        
    }
    
    /// Enables a technique called "hole punching", which allows putting the composition layer behind the main projection layer (i.e. setting ``sortOrder`` to a negative value) while "punching a hole" through everything rendered by Godot so that the layer is still visible.
    /// 
    /// This can be used to create the illusion that the composition layer exists in the same 3D space as everything rendered by Godot, allowing objects to appear to pass both behind or in front of the composition layer.
    /// 
    final public var enableHolePunch: Bool {
        get {
            return get_enable_hole_punch ()
        }
        
        set {
            set_enable_hole_punch (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_layer_viewport: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_layer_viewport")
        return withUnsafePointer(to: &OpenXRCompositionLayer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3888077664)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_layer_viewport(_ viewport: SubViewport?) {
        withUnsafePointer(to: viewport?.handle) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(OpenXRCompositionLayer.method_set_layer_viewport, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_layer_viewport: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_layer_viewport")
        return withUnsafePointer(to: &OpenXRCompositionLayer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3750751911)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_layer_viewport() -> SubViewport? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall(OpenXRCompositionLayer.method_get_layer_viewport, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_enable_hole_punch: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_enable_hole_punch")
        return withUnsafePointer(to: &OpenXRCompositionLayer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_enable_hole_punch(_ enable: Bool) {
        withUnsafePointer(to: enable) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(OpenXRCompositionLayer.method_set_enable_hole_punch, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_enable_hole_punch: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_enable_hole_punch")
        return withUnsafePointer(to: &OpenXRCompositionLayer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_enable_hole_punch() -> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall(OpenXRCompositionLayer.method_get_enable_hole_punch, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_sort_order: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_sort_order")
        return withUnsafePointer(to: &OpenXRCompositionLayer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_sort_order(_ order: Int32) {
        withUnsafePointer(to: order) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(OpenXRCompositionLayer.method_set_sort_order, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_sort_order: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_sort_order")
        return withUnsafePointer(to: &OpenXRCompositionLayer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_sort_order() -> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall(OpenXRCompositionLayer.method_get_sort_order, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_alpha_blend: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_alpha_blend")
        return withUnsafePointer(to: &OpenXRCompositionLayer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_alpha_blend(_ enabled: Bool) {
        withUnsafePointer(to: enabled) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(OpenXRCompositionLayer.method_set_alpha_blend, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_alpha_blend: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_alpha_blend")
        return withUnsafePointer(to: &OpenXRCompositionLayer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_alpha_blend() -> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall(OpenXRCompositionLayer.method_get_alpha_blend, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_is_natively_supported: GDExtensionMethodBindPtr = {
        let methodName = StringName("is_natively_supported")
        return withUnsafePointer(to: &OpenXRCompositionLayer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    /// Returns true if the OpenXR runtime natively supports this composition layer type.
    /// 
    /// > Note: This will only return an accurate result after the OpenXR session has started.
    /// 
    public final func isNativelySupported() -> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall(OpenXRCompositionLayer.method_is_natively_supported, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_intersects_ray: GDExtensionMethodBindPtr = {
        let methodName = StringName("intersects_ray")
        return withUnsafePointer(to: &OpenXRCompositionLayer.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1091262597)!
            }
            
        }
        
    }()
    
    /// Returns UV coordinates where the given ray intersects with the composition layer. `origin` and `direction` must be in global space.
    /// 
    /// Returns `Vector2(-1.0, -1.0)` if the ray doesn't intersect.
    /// 
    public final func intersectsRay(origin: Vector3, direction: Vector3) -> Vector2 {
        var _result: Vector2 = Vector2 ()
        withUnsafePointer(to: origin) { pArg0 in
            withUnsafePointer(to: direction) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(OpenXRCompositionLayer.method_intersects_ray, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                    }
                    
                }
                
            }
            
        }
        
        return _result
    }
    
}


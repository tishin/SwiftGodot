// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A sub-tree of many type ``AnimationNode``s used for complex animations. Used by ``AnimationTree``.
/// 
/// This animation node may contain a sub-tree of any other type animation nodes, such as ``AnimationNodeTransition``, ``AnimationNodeBlend2``, ``AnimationNodeBlend3``, ``AnimationNodeOneShot``, etc. This is one of the most commonly used animation node roots.
/// 
/// An ``AnimationNodeOutput`` node named `output` is created by default.
/// 
/// 
/// 
/// This object emits the following signals:
/// 
/// - ``nodeChanged``
open class AnimationNodeBlendTree: AnimationRootNode {
    override open class var godotClassName: StringName { "AnimationNodeBlendTree" }
    /* Constants */
    /// The connection was successful.
    public static let connectionOk = 0
    /// The input node is `null`.
    public static let connectionErrorNoInput = 1
    /// The specified input port is out of range.
    public static let connectionErrorNoInputIndex = 2
    /// The output node is `null`.
    public static let connectionErrorNoOutput = 3
    /// Input and output nodes are the same.
    public static let connectionErrorSameNode = 4
    /// The specified connection already exists.
    public static let connectionErrorConnectionExists = 5
    
    /* Properties */
    
    /// The global offset of all sub animation nodes.
    final public var graphOffset: Vector2 {
        get {
            return get_graph_offset ()
        }
        
        set {
            set_graph_offset (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_add_node: GDExtensionMethodBindPtr = {
        let methodName = StringName("add_node")
        return withUnsafePointer(to: &AnimationNodeBlendTree.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1980270704)!
            }
            
        }
        
    }()
    
    /// Adds an ``AnimationNode`` at the given `position`. The `name` is used to identify the created sub animation node later.
    public final func addNode(name: StringName, node: AnimationNode?, position: Vector2 = Vector2 (x: 0, y: 0)) {
        withUnsafePointer(to: name.content) { pArg0 in
            withUnsafePointer(to: node?.handle) { pArg1 in
                withUnsafePointer(to: position) { pArg2 in
                    withUnsafePointer(to: UnsafeRawPointersN3(pArg0, pArg1, pArg2)) { pArgs in
                        pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 3) { pArgs in
                            gi.object_method_bind_ptrcall(AnimationNodeBlendTree.method_add_node, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_node: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_node")
        return withUnsafePointer(to: &AnimationNodeBlendTree.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 625644256)!
            }
            
        }
        
    }()
    
    /// Returns the sub animation node with the specified `name`.
    public final func getNode(name: StringName) -> AnimationNode? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        withUnsafePointer(to: name.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(AnimationNodeBlendTree.method_get_node, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                }
                
            }
            
        }
        
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_remove_node: GDExtensionMethodBindPtr = {
        let methodName = StringName("remove_node")
        return withUnsafePointer(to: &AnimationNodeBlendTree.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3304788590)!
            }
            
        }
        
    }()
    
    /// Removes a sub animation node.
    public final func removeNode(name: StringName) {
        withUnsafePointer(to: name.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(AnimationNodeBlendTree.method_remove_node, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_rename_node: GDExtensionMethodBindPtr = {
        let methodName = StringName("rename_node")
        return withUnsafePointer(to: &AnimationNodeBlendTree.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3740211285)!
            }
            
        }
        
    }()
    
    /// Changes the name of a sub animation node.
    public final func renameNode(name: StringName, newName: StringName) {
        withUnsafePointer(to: name.content) { pArg0 in
            withUnsafePointer(to: newName.content) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(AnimationNodeBlendTree.method_rename_node, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_has_node: GDExtensionMethodBindPtr = {
        let methodName = StringName("has_node")
        return withUnsafePointer(to: &AnimationNodeBlendTree.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2619796661)!
            }
            
        }
        
    }()
    
    /// Returns `true` if a sub animation node with specified `name` exists.
    public final func hasNode(name: StringName) -> Bool {
        var _result: Bool = false
        withUnsafePointer(to: name.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(AnimationNodeBlendTree.method_has_node, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_connect_node: GDExtensionMethodBindPtr = {
        let methodName = StringName("connect_node")
        return withUnsafePointer(to: &AnimationNodeBlendTree.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2168001410)!
            }
            
        }
        
    }()
    
    /// Connects the output of an ``AnimationNode`` as input for another ``AnimationNode``, at the input port specified by `inputIndex`.
    public final func connectNode(inputNode: StringName, inputIndex: Int32, outputNode: StringName) {
        withUnsafePointer(to: inputNode.content) { pArg0 in
            withUnsafePointer(to: inputIndex) { pArg1 in
                withUnsafePointer(to: outputNode.content) { pArg2 in
                    withUnsafePointer(to: UnsafeRawPointersN3(pArg0, pArg1, pArg2)) { pArgs in
                        pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 3) { pArgs in
                            gi.object_method_bind_ptrcall(AnimationNodeBlendTree.method_connect_node, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_disconnect_node: GDExtensionMethodBindPtr = {
        let methodName = StringName("disconnect_node")
        return withUnsafePointer(to: &AnimationNodeBlendTree.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2415702435)!
            }
            
        }
        
    }()
    
    /// Disconnects the animation node connected to the specified input.
    public final func disconnectNode(inputNode: StringName, inputIndex: Int32) {
        withUnsafePointer(to: inputNode.content) { pArg0 in
            withUnsafePointer(to: inputIndex) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(AnimationNodeBlendTree.method_disconnect_node, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_set_node_position: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_node_position")
        return withUnsafePointer(to: &AnimationNodeBlendTree.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1999414630)!
            }
            
        }
        
    }()
    
    /// Modifies the position of a sub animation node.
    public final func setNodePosition(name: StringName, position: Vector2) {
        withUnsafePointer(to: name.content) { pArg0 in
            withUnsafePointer(to: position) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(AnimationNodeBlendTree.method_set_node_position, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_node_position: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_node_position")
        return withUnsafePointer(to: &AnimationNodeBlendTree.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3100822709)!
            }
            
        }
        
    }()
    
    /// Returns the position of the sub animation node with the specified `name`.
    public final func getNodePosition(name: StringName) -> Vector2 {
        var _result: Vector2 = Vector2 ()
        withUnsafePointer(to: name.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(AnimationNodeBlendTree.method_get_node_position, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_set_graph_offset: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_graph_offset")
        return withUnsafePointer(to: &AnimationNodeBlendTree.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 743155724)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_graph_offset(_ offset: Vector2) {
        withUnsafePointer(to: offset) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(AnimationNodeBlendTree.method_set_graph_offset, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_graph_offset: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_graph_offset")
        return withUnsafePointer(to: &AnimationNodeBlendTree.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3341600327)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_graph_offset() -> Vector2 {
        var _result: Vector2 = Vector2 ()
        gi.object_method_bind_ptrcall(AnimationNodeBlendTree.method_get_graph_offset, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    // Signals 
    /// Signal support.
    /// 
    /// 
    /// 
    /// Use the ``Signal1/connect(flags:_:)`` method to connect to the signal on the container object, and ``Signal1/disconnect(_:)`` to drop the connection.
    /// 
    /// You can also await the ``Signal1/emitted`` property for waiting for a single emission of the signal.
    /// 
    public class Signal1 {
        var target: Object
        var signalName: StringName
        init (target: Object, signalName: StringName) {
            self.target = target
            self.signalName = signalName
        }
        
        /// Connects the signal to the specified callback
        /// 
        /// 
        /// 
        /// To disconnect, call the disconnect method, with the returned token on success
        /// 
        /// - Parameters:
        /// 
        /// - callback: the method to invoke when this signal is raised
        /// 
        /// - flags: Optional, can be also added to configure the connection's behavior (see ``Object/ConnectFlags`` constants).
        /// 
        /// - Returns: an object token that can be used to disconnect the object from the target on success, or the error produced by Godot.
        /// 
        @discardableResult /* Signal1 */
        public func connect (flags: Object.ConnectFlags = [], _ callback: @escaping (_ nodeName: StringName) -> ()) -> Object {
            let signalProxy = SignalProxy()
            signalProxy.proxy =  {
                args in
                let arg_0 = StringName (args [0])!
                
                callback (arg_0)
            }
            
            let callable = Callable(object: signalProxy, method: SignalProxy.proxyName)
            let r = target.connect(signal: signalName, callable: callable, flags: UInt32 (flags.rawValue))
            if r != .ok { print ("Warning, error connecting to signal, code: \(r)") }
            return signalProxy
        }
        
        /// Disconnects a signal that was previously connected, the return value from calling ``connect(flags:_:)``
        public func disconnect (_ token: Object) {
            target.disconnect(signal: signalName, callable: Callable (object: token, method: SignalProxy.proxyName))
        }
        
        /// You can await this property to wait for the signal to be emitted once
        public var emitted: Void  {
            get async {
                await withCheckedContinuation {
                    c in
                    connect (flags: .oneShot) { _ in c.resume () }
                }
                
            }
            
        }
        
    }
    
    /// Emitted when the input port information is changed.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.nodeChanged.connect { nodeName in
    ///    print ("caught signal")
    /// }
    /// ```
    public var nodeChanged: Signal1 { Signal1 (target: self, signalName: "node_changed") }
    
}


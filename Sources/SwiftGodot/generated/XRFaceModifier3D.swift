// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A node for driving standard face meshes from ``XRFaceTracker`` weights.
/// 
/// This node applies weights from a ``XRFaceTracker`` to a mesh with supporting face blend shapes.
/// 
/// The <a href="https://docs.vrcft.io/docs/tutorial-avatars/tutorial-avatars-extras/unified-blendshapes">Unified Expressions</a> blend shapes are supported, as well as ARKit and SRanipal blend shapes.
/// 
/// The node attempts to identify blend shapes based on name matching. Blend shapes should match the names listed in the <a href="https://docs.vrcft.io/docs/tutorial-avatars/tutorial-avatars-extras/compatibility/overview">Unified Expressions Compatibility</a> chart.
/// 
open class XRFaceModifier3D: Node3D {
    override open class var godotClassName: StringName { "XRFaceModifier3D" }
    
    /* Properties */
    
    /// The ``XRFaceTracker`` path.
    final public var faceTracker: StringName {
        get {
            return get_face_tracker ()
        }
        
        set {
            set_face_tracker (newValue)
        }
        
    }
    
    /// The ``NodePath`` of the face ``MeshInstance3D``.
    final public var target: NodePath {
        get {
            return get_target ()
        }
        
        set {
            set_target (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_face_tracker: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_face_tracker")
        return withUnsafePointer(to: &XRFaceModifier3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3304788590)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_face_tracker(_ trackerName: StringName) {
        withUnsafePointer(to: trackerName.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(XRFaceModifier3D.method_set_face_tracker, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_face_tracker: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_face_tracker")
        return withUnsafePointer(to: &XRFaceModifier3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2002593661)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_face_tracker() -> StringName {
        let _result: StringName = StringName ()
        gi.object_method_bind_ptrcall(XRFaceModifier3D.method_get_face_tracker, UnsafeMutableRawPointer(mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_set_target: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_target")
        return withUnsafePointer(to: &XRFaceModifier3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1348162250)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_target(_ target: NodePath) {
        withUnsafePointer(to: target.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(XRFaceModifier3D.method_set_target, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_target: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_target")
        return withUnsafePointer(to: &XRFaceModifier3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 4075236667)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_target() -> NodePath {
        let _result: NodePath = NodePath ()
        gi.object_method_bind_ptrcall(XRFaceModifier3D.method_get_target, UnsafeMutableRawPointer(mutating: handle), nil, &_result.content)
        return _result
    }
    
}


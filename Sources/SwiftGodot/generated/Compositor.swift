// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Stores attributes used to customize how a Viewport is rendered.
/// 
/// The compositor resource stores attributes used to customize how a ``Viewport`` is rendered.
open class Compositor: Resource {
    override open class var godotClassName: StringName { "Compositor" }
    
    /* Properties */
    
    /// The custom ``CompositorEffect``s that are applied during rendering of viewports using this compositor.
    final public var compositorEffects: ObjectCollection<CompositorEffect> {
        get {
            return get_compositor_effects ()
        }
        
        set {
            set_compositor_effects (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_compositor_effects: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_compositor_effects")
        return withUnsafePointer(to: &Compositor.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 381264803)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_compositor_effects(_ compositorEffects: ObjectCollection<CompositorEffect>) {
        withUnsafePointer(to: compositorEffects.array.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(Compositor.method_set_compositor_effects, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_compositor_effects: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_compositor_effects")
        return withUnsafePointer(to: &Compositor.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3995934104)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_compositor_effects() -> ObjectCollection<CompositorEffect> {
        var _result: Int64 = 0
        gi.object_method_bind_ptrcall(Compositor.method_get_compositor_effects, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return ObjectCollection<CompositorEffect>(content: _result)
    }
    
}


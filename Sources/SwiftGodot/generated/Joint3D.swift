// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Abstract base class for all 3D physics joints.
/// 
/// Abstract base class for all joints in 3D physics. 3D joints bind together two physics bodies (``nodeA`` and ``nodeB``) and apply a constraint. If only one body is defined, it is attached to a fixed ``StaticBody3D`` without collision shapes.
open class Joint3D: Node3D {
    override open class var godotClassName: StringName { "Joint3D" }
    
    /* Properties */
    
    /// Path to the first node (A) attached to the joint. The node must inherit ``PhysicsBody3D``.
    /// 
    /// If left empty and ``nodeB`` is set, the body is attached to a fixed ``StaticBody3D`` without collision shapes.
    /// 
    final public var nodeA: NodePath {
        get {
            return get_node_a ()
        }
        
        set {
            set_node_a (newValue)
        }
        
    }
    
    /// Path to the second node (B) attached to the joint. The node must inherit ``PhysicsBody3D``.
    /// 
    /// If left empty and ``nodeA`` is set, the body is attached to a fixed ``StaticBody3D`` without collision shapes.
    /// 
    final public var nodeB: NodePath {
        get {
            return get_node_b ()
        }
        
        set {
            set_node_b (newValue)
        }
        
    }
    
    /// The priority used to define which solver is executed first for multiple joints. The lower the value, the higher the priority.
    final public var solverPriority: Int32 {
        get {
            return get_solver_priority ()
        }
        
        set {
            set_solver_priority (newValue)
        }
        
    }
    
    /// If `true`, the two bodies bound together do not collide with each other.
    final public var excludeNodesFromCollision: Bool {
        get {
            return get_exclude_nodes_from_collision ()
        }
        
        set {
            set_exclude_nodes_from_collision (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_node_a: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_node_a")
        return withUnsafePointer(to: &Joint3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1348162250)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_node_a(_ node: NodePath) {
        withUnsafePointer(to: node.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(Joint3D.method_set_node_a, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_node_a: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_node_a")
        return withUnsafePointer(to: &Joint3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 4075236667)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_node_a() -> NodePath {
        let _result: NodePath = NodePath ()
        gi.object_method_bind_ptrcall(Joint3D.method_get_node_a, UnsafeMutableRawPointer(mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_set_node_b: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_node_b")
        return withUnsafePointer(to: &Joint3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1348162250)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_node_b(_ node: NodePath) {
        withUnsafePointer(to: node.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(Joint3D.method_set_node_b, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_node_b: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_node_b")
        return withUnsafePointer(to: &Joint3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 4075236667)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_node_b() -> NodePath {
        let _result: NodePath = NodePath ()
        gi.object_method_bind_ptrcall(Joint3D.method_get_node_b, UnsafeMutableRawPointer(mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_set_solver_priority: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_solver_priority")
        return withUnsafePointer(to: &Joint3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_solver_priority(_ priority: Int32) {
        withUnsafePointer(to: priority) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(Joint3D.method_set_solver_priority, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_solver_priority: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_solver_priority")
        return withUnsafePointer(to: &Joint3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_solver_priority() -> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall(Joint3D.method_get_solver_priority, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_exclude_nodes_from_collision: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_exclude_nodes_from_collision")
        return withUnsafePointer(to: &Joint3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_exclude_nodes_from_collision(_ enable: Bool) {
        withUnsafePointer(to: enable) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(Joint3D.method_set_exclude_nodes_from_collision, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_exclude_nodes_from_collision: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_exclude_nodes_from_collision")
        return withUnsafePointer(to: &Joint3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_exclude_nodes_from_collision() -> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall(Joint3D.method_get_exclude_nodes_from_collision, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_rid: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_rid")
        return withUnsafePointer(to: &Joint3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2944877500)!
            }
            
        }
        
    }()
    
    /// Returns the joint's internal ``RID`` from the ``PhysicsServer3D``.
    public final func getRid() -> RID {
        let _result: RID = RID ()
        gi.object_method_bind_ptrcall(Joint3D.method_get_rid, UnsafeMutableRawPointer(mutating: handle), nil, &_result.content)
        return _result
    }
    
}


// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Base resource for video streams.
/// 
/// Base resource type for all video streams. Classes that derive from ``VideoStream`` can all be used as resource types to play back videos in ``VideoStreamPlayer``.
open class VideoStream: Resource {
    override open class var godotClassName: StringName { "VideoStream" }
    
    /* Properties */
    
    /// The video file path or URI that this ``VideoStream`` resource handles.
    /// 
    /// For ``VideoStreamTheora``, this filename should be an Ogg Theora video file with the `.ogv` extension.
    /// 
    final public var file: String {
        get {
            return get_file ()
        }
        
        set {
            set_file (newValue)
        }
        
    }
    
    /* Methods */
    /// Called when the video starts playing, to initialize and return a subclass of ``VideoStreamPlayback``.
    @_documentation(visibility: public)
    open func _instantiatePlayback() -> VideoStreamPlayback? {
        return VideoStreamPlayback ()
    }
    
    fileprivate static var method_set_file: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_file")
        return withUnsafePointer(to: &VideoStream.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_file(_ file: String) {
        let file = GString(file)
        withUnsafePointer(to: file.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(VideoStream.method_set_file, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_file: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_file")
        return withUnsafePointer(to: &VideoStream.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2841200299)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_file() -> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall(VideoStream.method_get_file, UnsafeMutableRawPointer(mutating: handle), nil, &_result.content)
        return _result.description
    }
    
    override class func getVirtualDispatcher (name: StringName) -> GDExtensionClassCallVirtual? {
        guard implementedOverrides().contains(name) else { return nil }
        switch name.description {
            case "_instantiate_playback":
                return _VideoStream_proxy_instantiate_playback
            default:
                return super.getVirtualDispatcher (name: name)
        }
        
    }
    
}

// Support methods for proxies
func _VideoStream_proxy_instantiate_playback (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<VideoStream>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._instantiatePlayback ()
    retPtr!.storeBytes (of: ret?.handle, as: UnsafeRawPointer?.self) // VideoStreamPlayback
}


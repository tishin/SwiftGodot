// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Container for parsed source geometry data used in navigation mesh baking.
/// 
/// Container for parsed source geometry data used in navigation mesh baking.
open class NavigationMeshSourceGeometryData2D: Resource {
    override open class var godotClassName: StringName { "NavigationMeshSourceGeometryData2D" }
    
    /* Properties */
    
    final public var traversableOutlines: VariantCollection<PackedVector2Array> {
        get {
            return get_traversable_outlines ()
        }
        
        set {
            set_traversable_outlines (newValue)
        }
        
    }
    
    final public var obstructionOutlines: VariantCollection<PackedVector2Array> {
        get {
            return get_obstruction_outlines ()
        }
        
        set {
            set_obstruction_outlines (newValue)
        }
        
    }
    
    final public var projectedObstructions: GArray {
        get {
            return get_projected_obstructions ()
        }
        
        set {
            set_projected_obstructions (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_clear: GDExtensionMethodBindPtr = {
        let methodName = StringName("clear")
        return withUnsafePointer(to: &NavigationMeshSourceGeometryData2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Clears the internal data.
    public final func clear() {
        gi.object_method_bind_ptrcall(NavigationMeshSourceGeometryData2D.method_clear, UnsafeMutableRawPointer(mutating: handle), nil, nil)
        
    }
    
    fileprivate static var method_has_data: GDExtensionMethodBindPtr = {
        let methodName = StringName("has_data")
        return withUnsafePointer(to: &NavigationMeshSourceGeometryData2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2240911060)!
            }
            
        }
        
    }()
    
    /// Returns `true` when parsed source geometry data exists.
    public final func hasData() -> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall(NavigationMeshSourceGeometryData2D.method_has_data, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_traversable_outlines: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_traversable_outlines")
        return withUnsafePointer(to: &NavigationMeshSourceGeometryData2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 381264803)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Sets all the traversable area outlines arrays.
    fileprivate final func set_traversable_outlines(_ traversableOutlines: VariantCollection<PackedVector2Array>) {
        withUnsafePointer(to: traversableOutlines.array.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(NavigationMeshSourceGeometryData2D.method_set_traversable_outlines, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_traversable_outlines: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_traversable_outlines")
        return withUnsafePointer(to: &NavigationMeshSourceGeometryData2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3995934104)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Returns all the traversable area outlines arrays.
    fileprivate final func get_traversable_outlines() -> VariantCollection<PackedVector2Array> {
        var _result: Int64 = 0
        gi.object_method_bind_ptrcall(NavigationMeshSourceGeometryData2D.method_get_traversable_outlines, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return VariantCollection<PackedVector2Array>(content: _result)
    }
    
    fileprivate static var method_set_obstruction_outlines: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_obstruction_outlines")
        return withUnsafePointer(to: &NavigationMeshSourceGeometryData2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 381264803)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Sets all the obstructed area outlines arrays.
    fileprivate final func set_obstruction_outlines(_ obstructionOutlines: VariantCollection<PackedVector2Array>) {
        withUnsafePointer(to: obstructionOutlines.array.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(NavigationMeshSourceGeometryData2D.method_set_obstruction_outlines, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_obstruction_outlines: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_obstruction_outlines")
        return withUnsafePointer(to: &NavigationMeshSourceGeometryData2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3995934104)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Returns all the obstructed area outlines arrays.
    fileprivate final func get_obstruction_outlines() -> VariantCollection<PackedVector2Array> {
        var _result: Int64 = 0
        gi.object_method_bind_ptrcall(NavigationMeshSourceGeometryData2D.method_get_obstruction_outlines, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return VariantCollection<PackedVector2Array>(content: _result)
    }
    
    fileprivate static var method_append_traversable_outlines: GDExtensionMethodBindPtr = {
        let methodName = StringName("append_traversable_outlines")
        return withUnsafePointer(to: &NavigationMeshSourceGeometryData2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 381264803)!
            }
            
        }
        
    }()
    
    /// Appends another array of `traversableOutlines` at the end of the existing traversable outlines array.
    public final func appendTraversableOutlines(_ traversableOutlines: VariantCollection<PackedVector2Array>) {
        withUnsafePointer(to: traversableOutlines.array.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(NavigationMeshSourceGeometryData2D.method_append_traversable_outlines, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_append_obstruction_outlines: GDExtensionMethodBindPtr = {
        let methodName = StringName("append_obstruction_outlines")
        return withUnsafePointer(to: &NavigationMeshSourceGeometryData2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 381264803)!
            }
            
        }
        
    }()
    
    /// Appends another array of `obstructionOutlines` at the end of the existing obstruction outlines array.
    public final func appendObstructionOutlines(_ obstructionOutlines: VariantCollection<PackedVector2Array>) {
        withUnsafePointer(to: obstructionOutlines.array.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(NavigationMeshSourceGeometryData2D.method_append_obstruction_outlines, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_add_traversable_outline: GDExtensionMethodBindPtr = {
        let methodName = StringName("add_traversable_outline")
        return withUnsafePointer(to: &NavigationMeshSourceGeometryData2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1509147220)!
            }
            
        }
        
    }()
    
    /// Adds the outline points of a shape as traversable area.
    public final func addTraversableOutline(shapeOutline: PackedVector2Array) {
        withUnsafePointer(to: shapeOutline.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(NavigationMeshSourceGeometryData2D.method_add_traversable_outline, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_add_obstruction_outline: GDExtensionMethodBindPtr = {
        let methodName = StringName("add_obstruction_outline")
        return withUnsafePointer(to: &NavigationMeshSourceGeometryData2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1509147220)!
            }
            
        }
        
    }()
    
    /// Adds the outline points of a shape as obstructed area.
    public final func addObstructionOutline(shapeOutline: PackedVector2Array) {
        withUnsafePointer(to: shapeOutline.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(NavigationMeshSourceGeometryData2D.method_add_obstruction_outline, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_merge: GDExtensionMethodBindPtr = {
        let methodName = StringName("merge")
        return withUnsafePointer(to: &NavigationMeshSourceGeometryData2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 742424872)!
            }
            
        }
        
    }()
    
    /// Adds the geometry data of another ``NavigationMeshSourceGeometryData2D`` to the navigation mesh baking data.
    public final func merge(otherGeometry: NavigationMeshSourceGeometryData2D?) {
        withUnsafePointer(to: otherGeometry?.handle) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(NavigationMeshSourceGeometryData2D.method_merge, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_add_projected_obstruction: GDExtensionMethodBindPtr = {
        let methodName = StringName("add_projected_obstruction")
        return withUnsafePointer(to: &NavigationMeshSourceGeometryData2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3882407395)!
            }
            
        }
        
    }()
    
    /// Adds a projected obstruction shape to the source geometry. If `carve` is `true` the carved shape will not be affected by additional offsets (e.g. agent radius) of the navigation mesh baking process.
    public final func addProjectedObstruction(vertices: PackedVector2Array, carve: Bool) {
        withUnsafePointer(to: vertices.content) { pArg0 in
            withUnsafePointer(to: carve) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(NavigationMeshSourceGeometryData2D.method_add_projected_obstruction, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_clear_projected_obstructions: GDExtensionMethodBindPtr = {
        let methodName = StringName("clear_projected_obstructions")
        return withUnsafePointer(to: &NavigationMeshSourceGeometryData2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Clears all projected obstructions.
    public final func clearProjectedObstructions() {
        gi.object_method_bind_ptrcall(NavigationMeshSourceGeometryData2D.method_clear_projected_obstructions, UnsafeMutableRawPointer(mutating: handle), nil, nil)
        
    }
    
    fileprivate static var method_set_projected_obstructions: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_projected_obstructions")
        return withUnsafePointer(to: &NavigationMeshSourceGeometryData2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 381264803)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Sets the projected obstructions with an Array of Dictionaries with the following key value pairs:
    /// 
    fileprivate final func set_projected_obstructions(_ projectedObstructions: GArray) {
        withUnsafePointer(to: projectedObstructions.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(NavigationMeshSourceGeometryData2D.method_set_projected_obstructions, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_projected_obstructions: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_projected_obstructions")
        return withUnsafePointer(to: &NavigationMeshSourceGeometryData2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3995934104)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Returns the projected obstructions as an ``GArray`` of dictionaries. Each ``GDictionary`` contains the following entries:
    /// 
    /// - `vertices` - A ``PackedFloat32Array`` that defines the outline points of the projected shape.
    /// 
    /// - `carve` - A [bool] that defines how the projected shape affects the navigation mesh baking. If `true` the projected shape will not be affected by addition offsets, e.g. agent radius.
    /// 
    fileprivate final func get_projected_obstructions() -> GArray {
        let _result: GArray = GArray ()
        gi.object_method_bind_ptrcall(NavigationMeshSourceGeometryData2D.method_get_projected_obstructions, UnsafeMutableRawPointer(mutating: handle), nil, &_result.content)
        return _result
    }
    
}


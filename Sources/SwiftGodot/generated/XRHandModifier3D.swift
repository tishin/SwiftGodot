// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A node for driving hand meshes from ``XRHandTracker`` data.
/// 
/// This node uses hand tracking data from an ``XRHandTracker`` to pose the skeleton of a hand mesh.
/// 
/// Positioning of hands is performed by creating an ``XRNode3D`` ancestor of the hand mesh driven by the same ``XRHandTracker``.
/// 
/// The hand tracking position-data is scaled by ``Skeleton3D/motionScale`` when applied to the skeleton, which can be used to adjust the tracked hand to match the scale of the hand model.
/// 
open class XRHandModifier3D: SkeletonModifier3D {
    override open class var godotClassName: StringName { "XRHandModifier3D" }
    public enum BoneUpdate: Int64, CaseIterable, CustomDebugStringConvertible {
        /// The skeleton's bones are fully updated (both position and rotation) to match the tracked bones.
        case full = 0 // BONE_UPDATE_FULL
        /// The skeleton's bones are only rotated to align with the tracked bones, preserving bone length.
        case rotationOnly = 1 // BONE_UPDATE_ROTATION_ONLY
        /// Represents the size of the ``XRHandModifier3D/BoneUpdate`` enum.
        case max = 2 // BONE_UPDATE_MAX
        /// A textual representation of this instance, suitable for debugging
        public var debugDescription: String {
            switch self {
                case .full: return ".full"
                case .rotationOnly: return ".rotationOnly"
                case .max: return ".max"
            }
            
        }
        
    }
    
    
    /* Properties */
    
    /// The name of the ``XRHandTracker`` registered with ``XRServer`` to obtain the hand tracking data from.
    final public var handTracker: StringName {
        get {
            return get_hand_tracker ()
        }
        
        set {
            set_hand_tracker (newValue)
        }
        
    }
    
    /// Specifies the type of updates to perform on the bones.
    final public var boneUpdate: XRHandModifier3D.BoneUpdate {
        get {
            return get_bone_update ()
        }
        
        set {
            set_bone_update (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_hand_tracker: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_hand_tracker")
        return withUnsafePointer(to: &XRHandModifier3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3304788590)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_hand_tracker(_ trackerName: StringName) {
        withUnsafePointer(to: trackerName.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(XRHandModifier3D.method_set_hand_tracker, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_hand_tracker: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_hand_tracker")
        return withUnsafePointer(to: &XRHandModifier3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2002593661)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_hand_tracker() -> StringName {
        let _result: StringName = StringName ()
        gi.object_method_bind_ptrcall(XRHandModifier3D.method_get_hand_tracker, UnsafeMutableRawPointer(mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_set_bone_update: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_bone_update")
        return withUnsafePointer(to: &XRHandModifier3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3635701455)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_bone_update(_ boneUpdate: XRHandModifier3D.BoneUpdate) {
        withUnsafePointer(to: boneUpdate.rawValue) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(XRHandModifier3D.method_set_bone_update, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_bone_update: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_bone_update")
        return withUnsafePointer(to: &XRHandModifier3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2873665691)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_bone_update() -> XRHandModifier3D.BoneUpdate {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall(XRHandModifier3D.method_get_bone_update, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return XRHandModifier3D.BoneUpdate (rawValue: _result)!
    }
    
}


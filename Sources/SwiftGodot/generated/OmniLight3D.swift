// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Omnidirectional light, such as a light bulb or a candle.
/// 
/// An Omnidirectional light is a type of ``Light3D`` that emits light in all directions. The light is attenuated by distance and this attenuation can be configured by changing its energy, radius, and attenuation parameters.
/// 
/// > Note: When using the Mobile rendering method, only 8 omni lights can be displayed on each mesh resource. Attempting to display more than 8 omni lights on a single mesh resource will result in omni lights flickering in and out as the camera moves. When using the Compatibility rendering method, only 8 omni lights can be displayed on each mesh resource by default, but this can be increased by adjusting ``ProjectSettings/rendering/limits/opengl/maxLightsPerObject``.
/// 
/// > Note: When using the Mobile or Compatibility rendering methods, omni lights will only correctly affect meshes whose visibility AABB intersects with the light's AABB. If using a shader to deform the mesh in a way that makes it go outside its AABB, ``GeometryInstance3D/extraCullMargin`` must be increased on the mesh. Otherwise, the light may not be visible on the mesh.
/// 
open class OmniLight3D: Light3D {
    override open class var godotClassName: StringName { "OmniLight3D" }
    public enum ShadowMode: Int64, CaseIterable, CustomDebugStringConvertible {
        /// Shadows are rendered to a dual-paraboloid texture. Faster than .shadowCube, but lower-quality.
        case dualParaboloid = 0 // SHADOW_DUAL_PARABOLOID
        /// Shadows are rendered to a cubemap. Slower than .shadowDualParaboloid, but higher-quality.
        case cube = 1 // SHADOW_CUBE
        /// A textual representation of this instance, suitable for debugging
        public var debugDescription: String {
            switch self {
                case .dualParaboloid: return ".dualParaboloid"
                case .cube: return ".cube"
            }
            
        }
        
    }
    
    
    /* Properties */
    
    /// The light's radius. Note that the effectively lit area may appear to be smaller depending on the ``omniAttenuation`` in use. No matter the ``omniAttenuation`` in use, the light will never reach anything outside this radius.
    /// 
    /// > Note: ``omniRange`` is not affected by ``Node3D/scale`` (the light's scale or its parent's scale).
    /// 
    final public var omniRange: Double {
        get {
            return get_param (Light3D.Param (rawValue: 4)!)
        }
        
        set {
            set_param (Light3D.Param (rawValue: 4)!, newValue)
        }
        
    }
    
    /// Controls the distance attenuation function for omnilights.
    /// 
    /// A value of `0.0` will maintain a constant brightness through most of the range, but smoothly attenuate the light at the edge of the range. Use a value of `2.0` for physically accurate lights as it results in the proper inverse square attenutation.
    /// 
    /// > Note: Setting attenuation to `2.0` or higher may result in distant objects receiving minimal light, even within range. For example, with a range of `4096`, an object at `100` units is attenuated by a factor of `0.0001`. With a default brightness of `1`, the light would not be visible at that distance.
    /// 
    /// > Note: Using negative or values higher than `10.0` may lead to unexpected results.
    /// 
    final public var omniAttenuation: Double {
        get {
            return get_param (Light3D.Param (rawValue: 6)!)
        }
        
        set {
            set_param (Light3D.Param (rawValue: 6)!, newValue)
        }
        
    }
    
    /// See ``OmniLight3D/ShadowMode``.
    final public var omniShadowMode: OmniLight3D.ShadowMode {
        get {
            return get_shadow_mode ()
        }
        
        set {
            set_shadow_mode (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_shadow_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_shadow_mode")
        return withUnsafePointer(to: &OmniLight3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 121862228)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_shadow_mode(_ mode: OmniLight3D.ShadowMode) {
        withUnsafePointer(to: mode.rawValue) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(OmniLight3D.method_set_shadow_mode, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_shadow_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_shadow_mode")
        return withUnsafePointer(to: &OmniLight3D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 4181586331)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_shadow_mode() -> OmniLight3D.ShadowMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall(OmniLight3D.method_get_shadow_mode, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return OmniLight3D.ShadowMode (rawValue: _result)!
    }
    
}


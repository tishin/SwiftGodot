// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Holds a line of text.
/// 
/// Abstraction over ``TextServer`` for handling a single line of text.
open class TextLine: RefCounted {
    override open class var godotClassName: StringName { "TextLine" }
    
    /* Properties */
    
    /// Text writing direction.
    final public var direction: TextServer.Direction {
        get {
            return get_direction ()
        }
        
        set {
            set_direction (newValue)
        }
        
    }
    
    /// Text orientation.
    final public var orientation: TextServer.Orientation {
        get {
            return get_orientation ()
        }
        
        set {
            set_orientation (newValue)
        }
        
    }
    
    /// If set to `true` text will display invalid characters.
    final public var preserveInvalid: Bool {
        get {
            return get_preserve_invalid ()
        }
        
        set {
            set_preserve_invalid (newValue)
        }
        
    }
    
    /// If set to `true` text will display control characters.
    final public var preserveControl: Bool {
        get {
            return get_preserve_control ()
        }
        
        set {
            set_preserve_control (newValue)
        }
        
    }
    
    /// Text line width.
    final public var width: Double {
        get {
            return get_width ()
        }
        
        set {
            set_width (newValue)
        }
        
    }
    
    /// Sets text alignment within the line as if the line was horizontal.
    final public var alignment: HorizontalAlignment {
        get {
            return get_horizontal_alignment ()
        }
        
        set {
            set_horizontal_alignment (newValue)
        }
        
    }
    
    /// Line alignment rules. For more info see ``TextServer``.
    final public var flags: TextServer.JustificationFlag {
        get {
            return get_flags ()
        }
        
        set {
            set_flags (newValue)
        }
        
    }
    
    /// Sets the clipping behavior when the text exceeds the text line's set width. See ``TextServer.OverrunBehavior`` for a description of all modes.
    final public var textOverrunBehavior: TextServer.OverrunBehavior {
        get {
            return get_text_overrun_behavior ()
        }
        
        set {
            set_text_overrun_behavior (newValue)
        }
        
    }
    
    /// Ellipsis character used for text clipping.
    final public var ellipsisChar: String {
        get {
            return get_ellipsis_char ()
        }
        
        set {
            set_ellipsis_char (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_clear: GDExtensionMethodBindPtr = {
        let methodName = StringName("clear")
        return withUnsafePointer(to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Clears text line (removes text and inline objects).
    public final func clear() {
        gi.object_method_bind_ptrcall(TextLine.method_clear, UnsafeMutableRawPointer(mutating: handle), nil, nil)
        
    }
    
    fileprivate static var method_set_direction: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_direction")
        return withUnsafePointer(to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1418190634)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_direction(_ direction: TextServer.Direction) {
        withUnsafePointer(to: direction.rawValue) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(TextLine.method_set_direction, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_direction: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_direction")
        return withUnsafePointer(to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2516697328)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_direction() -> TextServer.Direction {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall(TextLine.method_get_direction, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return TextServer.Direction (rawValue: _result)!
    }
    
    fileprivate static var method_set_orientation: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_orientation")
        return withUnsafePointer(to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 42823726)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_orientation(_ orientation: TextServer.Orientation) {
        withUnsafePointer(to: orientation.rawValue) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(TextLine.method_set_orientation, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_orientation: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_orientation")
        return withUnsafePointer(to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 175768116)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_orientation() -> TextServer.Orientation {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall(TextLine.method_get_orientation, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return TextServer.Orientation (rawValue: _result)!
    }
    
    fileprivate static var method_set_preserve_invalid: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_preserve_invalid")
        return withUnsafePointer(to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_preserve_invalid(_ enabled: Bool) {
        withUnsafePointer(to: enabled) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(TextLine.method_set_preserve_invalid, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_preserve_invalid: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_preserve_invalid")
        return withUnsafePointer(to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_preserve_invalid() -> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall(TextLine.method_get_preserve_invalid, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_preserve_control: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_preserve_control")
        return withUnsafePointer(to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_preserve_control(_ enabled: Bool) {
        withUnsafePointer(to: enabled) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(TextLine.method_set_preserve_control, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_preserve_control: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_preserve_control")
        return withUnsafePointer(to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_preserve_control() -> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall(TextLine.method_get_preserve_control, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_bidi_override: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_bidi_override")
        return withUnsafePointer(to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 381264803)!
            }
            
        }
        
    }()
    
    /// Overrides BiDi for the structured text.
    /// 
    /// Override ranges should cover full source text without overlaps. BiDi algorithm will be used on each range separately.
    /// 
    public final func setBidiOverride(_ override: GArray) {
        withUnsafePointer(to: override.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(TextLine.method_set_bidi_override, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_add_string: GDExtensionMethodBindPtr = {
        let methodName = StringName("add_string")
        return withUnsafePointer(to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 621426851)!
            }
            
        }
        
    }()
    
    /// Adds text span and font to draw it.
    public final func addString(text: String, font: Font?, fontSize: Int32, language: String = "", meta: Variant) -> Bool {
        var _result: Bool = false
        let text = GString(text)
        withUnsafePointer(to: text.content) { pArg0 in
            withUnsafePointer(to: font?.handle) { pArg1 in
                withUnsafePointer(to: fontSize) { pArg2 in
                    let language = GString(language)
                    withUnsafePointer(to: language.content) { pArg3 in
                        withUnsafePointer(to: meta.content) { pArg4 in
                            withUnsafePointer(to: UnsafeRawPointersN5(pArg0, pArg1, pArg2, pArg3, pArg4)) { pArgs in
                                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 5) { pArgs in
                                    gi.object_method_bind_ptrcall(TextLine.method_add_string, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                                }
                                
                            }
                            
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_add_object: GDExtensionMethodBindPtr = {
        let methodName = StringName("add_object")
        return withUnsafePointer(to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1316529304)!
            }
            
        }
        
    }()
    
    /// Adds inline object to the text buffer, `key` must be unique. In the text, object is represented as `length` object replacement characters.
    public final func addObject(key: Variant, size: Vector2, inlineAlign: InlineAlignment = .center, length: Int32 = 1, baseline: Double = 0.0) -> Bool {
        var _result: Bool = false
        withUnsafePointer(to: key.content) { pArg0 in
            withUnsafePointer(to: size) { pArg1 in
                withUnsafePointer(to: inlineAlign.rawValue) { pArg2 in
                    withUnsafePointer(to: length) { pArg3 in
                        withUnsafePointer(to: baseline) { pArg4 in
                            withUnsafePointer(to: UnsafeRawPointersN5(pArg0, pArg1, pArg2, pArg3, pArg4)) { pArgs in
                                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 5) { pArgs in
                                    gi.object_method_bind_ptrcall(TextLine.method_add_object, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                                }
                                
                            }
                            
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_resize_object: GDExtensionMethodBindPtr = {
        let methodName = StringName("resize_object")
        return withUnsafePointer(to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2095776372)!
            }
            
        }
        
    }()
    
    /// Sets new size and alignment of embedded object.
    public final func resizeObject(key: Variant, size: Vector2, inlineAlign: InlineAlignment = .center, baseline: Double = 0.0) -> Bool {
        var _result: Bool = false
        withUnsafePointer(to: key.content) { pArg0 in
            withUnsafePointer(to: size) { pArg1 in
                withUnsafePointer(to: inlineAlign.rawValue) { pArg2 in
                    withUnsafePointer(to: baseline) { pArg3 in
                        withUnsafePointer(to: UnsafeRawPointersN4(pArg0, pArg1, pArg2, pArg3)) { pArgs in
                            pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 4) { pArgs in
                                gi.object_method_bind_ptrcall(TextLine.method_resize_object, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                            }
                            
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_set_width: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_width")
        return withUnsafePointer(to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_width(_ width: Double) {
        withUnsafePointer(to: width) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(TextLine.method_set_width, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_width: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_width")
        return withUnsafePointer(to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_width() -> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall(TextLine.method_get_width, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_horizontal_alignment: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_horizontal_alignment")
        return withUnsafePointer(to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2312603777)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_horizontal_alignment(_ alignment: HorizontalAlignment) {
        withUnsafePointer(to: alignment.rawValue) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(TextLine.method_set_horizontal_alignment, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_horizontal_alignment: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_horizontal_alignment")
        return withUnsafePointer(to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 341400642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_horizontal_alignment() -> HorizontalAlignment {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall(TextLine.method_get_horizontal_alignment, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return HorizontalAlignment (rawValue: _result)!
    }
    
    fileprivate static var method_tab_align: GDExtensionMethodBindPtr = {
        let methodName = StringName("tab_align")
        return withUnsafePointer(to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2899603908)!
            }
            
        }
        
    }()
    
    /// Aligns text to the given tab-stops.
    public final func tabAlign(tabStops: PackedFloat32Array) {
        withUnsafePointer(to: tabStops.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(TextLine.method_tab_align, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_set_flags: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_flags")
        return withUnsafePointer(to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2877345813)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_flags(_ flags: TextServer.JustificationFlag) {
        withUnsafePointer(to: flags.rawValue) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(TextLine.method_set_flags, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_flags: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_flags")
        return withUnsafePointer(to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1583363614)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_flags() -> TextServer.JustificationFlag {
        var _result: TextServer.JustificationFlag = TextServer.JustificationFlag ()
        gi.object_method_bind_ptrcall(TextLine.method_get_flags, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_text_overrun_behavior: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_text_overrun_behavior")
        return withUnsafePointer(to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1008890932)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_text_overrun_behavior(_ overrunBehavior: TextServer.OverrunBehavior) {
        withUnsafePointer(to: overrunBehavior.rawValue) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(TextLine.method_set_text_overrun_behavior, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_text_overrun_behavior: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_text_overrun_behavior")
        return withUnsafePointer(to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3779142101)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_text_overrun_behavior() -> TextServer.OverrunBehavior {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall(TextLine.method_get_text_overrun_behavior, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return TextServer.OverrunBehavior (rawValue: _result)!
    }
    
    fileprivate static var method_set_ellipsis_char: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_ellipsis_char")
        return withUnsafePointer(to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_ellipsis_char(_ char: String) {
        let char = GString(char)
        withUnsafePointer(to: char.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(TextLine.method_set_ellipsis_char, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_ellipsis_char: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_ellipsis_char")
        return withUnsafePointer(to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_ellipsis_char() -> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall(TextLine.method_get_ellipsis_char, UnsafeMutableRawPointer(mutating: handle), nil, &_result.content)
        return _result.description
    }
    
    fileprivate static var method_get_objects: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_objects")
        return withUnsafePointer(to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3995934104)!
            }
            
        }
        
    }()
    
    /// Returns array of inline objects.
    public final func getObjects() -> GArray {
        let _result: GArray = GArray ()
        gi.object_method_bind_ptrcall(TextLine.method_get_objects, UnsafeMutableRawPointer(mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_get_object_rect: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_object_rect")
        return withUnsafePointer(to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1742700391)!
            }
            
        }
        
    }()
    
    /// Returns bounding rectangle of the inline object.
    public final func getObjectRect(key: Variant) -> Rect2 {
        var _result: Rect2 = Rect2 ()
        withUnsafePointer(to: key.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(TextLine.method_get_object_rect, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_get_size: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_size")
        return withUnsafePointer(to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3341600327)!
            }
            
        }
        
    }()
    
    /// Returns size of the bounding box of the text.
    public final func getSize() -> Vector2 {
        var _result: Vector2 = Vector2 ()
        gi.object_method_bind_ptrcall(TextLine.method_get_size, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_rid: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_rid")
        return withUnsafePointer(to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2944877500)!
            }
            
        }
        
    }()
    
    /// Returns TextServer buffer RID.
    public final func getRid() -> RID {
        let _result: RID = RID ()
        gi.object_method_bind_ptrcall(TextLine.method_get_rid, UnsafeMutableRawPointer(mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_get_line_ascent: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_line_ascent")
        return withUnsafePointer(to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    /// Returns the text ascent (number of pixels above the baseline for horizontal layout or to the left of baseline for vertical).
    public final func getLineAscent() -> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall(TextLine.method_get_line_ascent, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_line_descent: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_line_descent")
        return withUnsafePointer(to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    /// Returns the text descent (number of pixels below the baseline for horizontal layout or to the right of baseline for vertical).
    public final func getLineDescent() -> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall(TextLine.method_get_line_descent, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_line_width: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_line_width")
        return withUnsafePointer(to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    /// Returns width (for horizontal layout) or height (for vertical) of the text.
    public final func getLineWidth() -> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall(TextLine.method_get_line_width, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_line_underline_position: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_line_underline_position")
        return withUnsafePointer(to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    /// Returns pixel offset of the underline below the baseline.
    public final func getLineUnderlinePosition() -> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall(TextLine.method_get_line_underline_position, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_line_underline_thickness: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_line_underline_thickness")
        return withUnsafePointer(to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    /// Returns thickness of the underline.
    public final func getLineUnderlineThickness() -> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall(TextLine.method_get_line_underline_thickness, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_draw: GDExtensionMethodBindPtr = {
        let methodName = StringName("draw")
        return withUnsafePointer(to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 856975658)!
            }
            
        }
        
    }()
    
    /// Draw text into a canvas item at a given position, with `color`. `pos` specifies the top left corner of the bounding box.
    public final func draw(canvas: RID, pos: Vector2, color: Color = Color (r: 1, g: 1, b: 1, a: 1)) {
        withUnsafePointer(to: canvas.content) { pArg0 in
            withUnsafePointer(to: pos) { pArg1 in
                withUnsafePointer(to: color) { pArg2 in
                    withUnsafePointer(to: UnsafeRawPointersN3(pArg0, pArg1, pArg2)) { pArgs in
                        pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 3) { pArgs in
                            gi.object_method_bind_ptrcall(TextLine.method_draw, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_draw_outline: GDExtensionMethodBindPtr = {
        let methodName = StringName("draw_outline")
        return withUnsafePointer(to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1343401456)!
            }
            
        }
        
    }()
    
    /// Draw text into a canvas item at a given position, with `color`. `pos` specifies the top left corner of the bounding box.
    public final func drawOutline(canvas: RID, pos: Vector2, outlineSize: Int32 = 1, color: Color = Color (r: 1, g: 1, b: 1, a: 1)) {
        withUnsafePointer(to: canvas.content) { pArg0 in
            withUnsafePointer(to: pos) { pArg1 in
                withUnsafePointer(to: outlineSize) { pArg2 in
                    withUnsafePointer(to: color) { pArg3 in
                        withUnsafePointer(to: UnsafeRawPointersN4(pArg0, pArg1, pArg2, pArg3)) { pArgs in
                            pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 4) { pArgs in
                                gi.object_method_bind_ptrcall(TextLine.method_draw_outline, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                            }
                            
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_hit_test: GDExtensionMethodBindPtr = {
        let methodName = StringName("hit_test")
        return withUnsafePointer(to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2401831903)!
            }
            
        }
        
    }()
    
    /// Returns caret character offset at the specified pixel offset at the baseline. This function always returns a valid position.
    public final func hitTest(coords: Double) -> Int32 {
        var _result: Int32 = 0
        withUnsafePointer(to: coords) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(TextLine.method_hit_test, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
}


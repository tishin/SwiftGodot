// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Visual shader node for randomizing particle values.
/// 
/// Randomness node will output pseudo-random values of the given type based on the specified minimum and maximum values.
open class VisualShaderNodeParticleRandomness: VisualShaderNode {
    override open class var godotClassName: StringName { "VisualShaderNodeParticleRandomness" }
    public enum OpType: Int64, CaseIterable, CustomDebugStringConvertible {
        /// A floating-point scalar.
        case scalar = 0 // OP_TYPE_SCALAR
        /// A 2D vector type.
        case vector2d = 1 // OP_TYPE_VECTOR_2D
        /// A 3D vector type.
        case vector3d = 2 // OP_TYPE_VECTOR_3D
        /// A 4D vector type.
        case vector4d = 3 // OP_TYPE_VECTOR_4D
        /// Represents the size of the ``VisualShaderNodeParticleRandomness/OpType`` enum.
        case max = 4 // OP_TYPE_MAX
        /// A textual representation of this instance, suitable for debugging
        public var debugDescription: String {
            switch self {
                case .scalar: return ".scalar"
                case .vector2d: return ".vector2d"
                case .vector3d: return ".vector3d"
                case .vector4d: return ".vector4d"
                case .max: return ".max"
            }
            
        }
        
    }
    
    
    /* Properties */
    
    /// A type of operands and returned value.
    final public var opType: VisualShaderNodeParticleRandomness.OpType {
        get {
            return get_op_type ()
        }
        
        set {
            set_op_type (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_op_type: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_op_type")
        return withUnsafePointer(to: &VisualShaderNodeParticleRandomness.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2060089061)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_op_type(_ type: VisualShaderNodeParticleRandomness.OpType) {
        withUnsafePointer(to: type.rawValue) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(VisualShaderNodeParticleRandomness.method_set_op_type, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_op_type: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_op_type")
        return withUnsafePointer(to: &VisualShaderNodeParticleRandomness.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3597061078)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_op_type() -> VisualShaderNodeParticleRandomness.OpType {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall(VisualShaderNodeParticleRandomness.method_get_op_type, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return VisualShaderNodeParticleRandomness.OpType (rawValue: _result)!
    }
    
}


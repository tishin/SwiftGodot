// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A visual shader helper node for multiplying position and rotation of particles.
/// 
/// This node helps to multiply a position input vector by rotation using specific axis. Intended to work with emitters.
open class VisualShaderNodeParticleMultiplyByAxisAngle: VisualShaderNode {
    override open class var godotClassName: StringName { "VisualShaderNodeParticleMultiplyByAxisAngle" }
    
    /* Properties */
    
    /// If `true`, the angle will be interpreted in degrees instead of radians.
    final public var degreesMode: Bool {
        get {
            return is_degrees_mode ()
        }
        
        set {
            set_degrees_mode (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_degrees_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_degrees_mode")
        return withUnsafePointer(to: &VisualShaderNodeParticleMultiplyByAxisAngle.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_degrees_mode(_ enabled: Bool) {
        withUnsafePointer(to: enabled) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(VisualShaderNodeParticleMultiplyByAxisAngle.method_set_degrees_mode, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_is_degrees_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName("is_degrees_mode")
        return withUnsafePointer(to: &VisualShaderNodeParticleMultiplyByAxisAngle.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_degrees_mode() -> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall(VisualShaderNodeParticleMultiplyByAxisAngle.method_is_degrees_mode, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
}


// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Helper tool to access and edit ``Mesh`` data.
/// 
/// MeshDataTool provides access to individual vertices in a ``Mesh``. It allows users to read and edit vertex data of meshes. It also creates an array of faces and edges.
/// 
/// To use MeshDataTool, load a mesh with ``createFromSurface(mesh:surface:)``. When you are finished editing the data commit the data to a mesh with ``commitToSurface(mesh:compressionFlags:)``.
/// 
/// Below is an example of how MeshDataTool may be used.
/// 
/// See also ``ArrayMesh``, ``ImmediateMesh`` and ``SurfaceTool`` for procedural geometry generation.
/// 
/// > Note: Godot uses clockwise <a href="https://learnopengl.com/Advanced-OpenGL/Face-culling">winding order</a> for front faces of triangle primitive modes.
/// 
open class MeshDataTool: RefCounted {
    override open class var godotClassName: StringName { "MeshDataTool" }
    /* Methods */
    fileprivate static var method_clear: GDExtensionMethodBindPtr = {
        let methodName = StringName("clear")
        return withUnsafePointer(to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Clears all data currently in MeshDataTool.
    public final func clear() {
        gi.object_method_bind_ptrcall(MeshDataTool.method_clear, UnsafeMutableRawPointer(mutating: handle), nil, nil)
        
    }
    
    fileprivate static var method_create_from_surface: GDExtensionMethodBindPtr = {
        let methodName = StringName("create_from_surface")
        return withUnsafePointer(to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2727020678)!
            }
            
        }
        
    }()
    
    /// Uses specified surface of given ``Mesh`` to populate data for MeshDataTool.
    /// 
    /// Requires ``Mesh`` with primitive type ``Mesh/PrimitiveType/primitiveTriangles``.
    /// 
    public final func createFromSurface(mesh: ArrayMesh?, surface: Int32) -> GodotError {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        withUnsafePointer(to: mesh?.handle) { pArg0 in
            withUnsafePointer(to: surface) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(MeshDataTool.method_create_from_surface, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                    }
                    
                }
                
            }
            
        }
        
        return GodotError (rawValue: _result)!
    }
    
    fileprivate static var method_commit_to_surface: GDExtensionMethodBindPtr = {
        let methodName = StringName("commit_to_surface")
        return withUnsafePointer(to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2021686445)!
            }
            
        }
        
    }()
    
    /// Adds a new surface to specified ``Mesh`` with edited data.
    public final func commitToSurface(mesh: ArrayMesh?, compressionFlags: UInt = 0) -> GodotError {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        withUnsafePointer(to: mesh?.handle) { pArg0 in
            withUnsafePointer(to: compressionFlags) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(MeshDataTool.method_commit_to_surface, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                    }
                    
                }
                
            }
            
        }
        
        return GodotError (rawValue: _result)!
    }
    
    fileprivate static var method_get_format: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_format")
        return withUnsafePointer(to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    /// Returns the ``Mesh``'s format as a combination of the ``Mesh.ArrayFormat`` flags. For example, a mesh containing both vertices and normals would return a format of `3` because ``Mesh/ArrayFormat/vertex`` is `1` and ``Mesh/ArrayFormat/normal`` is `2`.
    public final func getFormat() -> UInt {
        var _result: UInt = 0
        gi.object_method_bind_ptrcall(MeshDataTool.method_get_format, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_vertex_count: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_vertex_count")
        return withUnsafePointer(to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    /// Returns the total number of vertices in ``Mesh``.
    public final func getVertexCount() -> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall(MeshDataTool.method_get_vertex_count, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_edge_count: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_edge_count")
        return withUnsafePointer(to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    /// Returns the number of edges in this ``Mesh``.
    public final func getEdgeCount() -> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall(MeshDataTool.method_get_edge_count, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_face_count: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_face_count")
        return withUnsafePointer(to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    /// Returns the number of faces in this ``Mesh``.
    public final func getFaceCount() -> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall(MeshDataTool.method_get_face_count, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_vertex: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_vertex")
        return withUnsafePointer(to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1530502735)!
            }
            
        }
        
    }()
    
    /// Sets the position of the given vertex.
    public final func setVertex(idx: Int32, vertex: Vector3) {
        withUnsafePointer(to: idx) { pArg0 in
            withUnsafePointer(to: vertex) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(MeshDataTool.method_set_vertex, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_vertex: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_vertex")
        return withUnsafePointer(to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 711720468)!
            }
            
        }
        
    }()
    
    /// Returns the position of the given vertex.
    public final func getVertex(idx: Int32) -> Vector3 {
        var _result: Vector3 = Vector3 ()
        withUnsafePointer(to: idx) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(MeshDataTool.method_get_vertex, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_set_vertex_normal: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_vertex_normal")
        return withUnsafePointer(to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1530502735)!
            }
            
        }
        
    }()
    
    /// Sets the normal of the given vertex.
    public final func setVertexNormal(idx: Int32, normal: Vector3) {
        withUnsafePointer(to: idx) { pArg0 in
            withUnsafePointer(to: normal) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(MeshDataTool.method_set_vertex_normal, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_vertex_normal: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_vertex_normal")
        return withUnsafePointer(to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 711720468)!
            }
            
        }
        
    }()
    
    /// Returns the normal of the given vertex.
    public final func getVertexNormal(idx: Int32) -> Vector3 {
        var _result: Vector3 = Vector3 ()
        withUnsafePointer(to: idx) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(MeshDataTool.method_get_vertex_normal, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_set_vertex_tangent: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_vertex_tangent")
        return withUnsafePointer(to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1104099133)!
            }
            
        }
        
    }()
    
    /// Sets the tangent of the given vertex.
    public final func setVertexTangent(idx: Int32, tangent: Plane) {
        withUnsafePointer(to: idx) { pArg0 in
            withUnsafePointer(to: tangent) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(MeshDataTool.method_set_vertex_tangent, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_vertex_tangent: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_vertex_tangent")
        return withUnsafePointer(to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1372055458)!
            }
            
        }
        
    }()
    
    /// Returns the tangent of the given vertex.
    public final func getVertexTangent(idx: Int32) -> Plane {
        var _result: Plane = Plane ()
        withUnsafePointer(to: idx) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(MeshDataTool.method_get_vertex_tangent, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_set_vertex_uv: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_vertex_uv")
        return withUnsafePointer(to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 163021252)!
            }
            
        }
        
    }()
    
    /// Sets the UV of the given vertex.
    public final func setVertexUv(idx: Int32, uv: Vector2) {
        withUnsafePointer(to: idx) { pArg0 in
            withUnsafePointer(to: uv) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(MeshDataTool.method_set_vertex_uv, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_vertex_uv: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_vertex_uv")
        return withUnsafePointer(to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2299179447)!
            }
            
        }
        
    }()
    
    /// Returns the UV of the given vertex.
    public final func getVertexUv(idx: Int32) -> Vector2 {
        var _result: Vector2 = Vector2 ()
        withUnsafePointer(to: idx) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(MeshDataTool.method_get_vertex_uv, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_set_vertex_uv2: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_vertex_uv2")
        return withUnsafePointer(to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 163021252)!
            }
            
        }
        
    }()
    
    /// Sets the UV2 of the given vertex.
    public final func setVertexUv2(idx: Int32, uv2: Vector2) {
        withUnsafePointer(to: idx) { pArg0 in
            withUnsafePointer(to: uv2) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(MeshDataTool.method_set_vertex_uv2, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_vertex_uv2: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_vertex_uv2")
        return withUnsafePointer(to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2299179447)!
            }
            
        }
        
    }()
    
    /// Returns the UV2 of the given vertex.
    public final func getVertexUv2(idx: Int32) -> Vector2 {
        var _result: Vector2 = Vector2 ()
        withUnsafePointer(to: idx) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(MeshDataTool.method_get_vertex_uv2, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_set_vertex_color: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_vertex_color")
        return withUnsafePointer(to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2878471219)!
            }
            
        }
        
    }()
    
    /// Sets the color of the given vertex.
    public final func setVertexColor(idx: Int32, color: Color) {
        withUnsafePointer(to: idx) { pArg0 in
            withUnsafePointer(to: color) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(MeshDataTool.method_set_vertex_color, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_vertex_color: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_vertex_color")
        return withUnsafePointer(to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3457211756)!
            }
            
        }
        
    }()
    
    /// Returns the color of the given vertex.
    public final func getVertexColor(idx: Int32) -> Color {
        var _result: Color = Color ()
        withUnsafePointer(to: idx) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(MeshDataTool.method_get_vertex_color, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_set_vertex_bones: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_vertex_bones")
        return withUnsafePointer(to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3500328261)!
            }
            
        }
        
    }()
    
    /// Sets the bones of the given vertex.
    public final func setVertexBones(idx: Int32, bones: PackedInt32Array) {
        withUnsafePointer(to: idx) { pArg0 in
            withUnsafePointer(to: bones.content) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(MeshDataTool.method_set_vertex_bones, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_vertex_bones: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_vertex_bones")
        return withUnsafePointer(to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1706082319)!
            }
            
        }
        
    }()
    
    /// Returns the bones of the given vertex.
    public final func getVertexBones(idx: Int32) -> PackedInt32Array {
        let _result: PackedInt32Array = PackedInt32Array ()
        withUnsafePointer(to: idx) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(MeshDataTool.method_get_vertex_bones, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result.content)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_set_vertex_weights: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_vertex_weights")
        return withUnsafePointer(to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1345852415)!
            }
            
        }
        
    }()
    
    /// Sets the bone weights of the given vertex.
    public final func setVertexWeights(idx: Int32, weights: PackedFloat32Array) {
        withUnsafePointer(to: idx) { pArg0 in
            withUnsafePointer(to: weights.content) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(MeshDataTool.method_set_vertex_weights, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_vertex_weights: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_vertex_weights")
        return withUnsafePointer(to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1542882410)!
            }
            
        }
        
    }()
    
    /// Returns bone weights of the given vertex.
    public final func getVertexWeights(idx: Int32) -> PackedFloat32Array {
        let _result: PackedFloat32Array = PackedFloat32Array ()
        withUnsafePointer(to: idx) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(MeshDataTool.method_get_vertex_weights, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result.content)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_set_vertex_meta: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_vertex_meta")
        return withUnsafePointer(to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2152698145)!
            }
            
        }
        
    }()
    
    /// Sets the metadata associated with the given vertex.
    public final func setVertexMeta(idx: Int32, meta: Variant) {
        withUnsafePointer(to: idx) { pArg0 in
            withUnsafePointer(to: meta.content) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(MeshDataTool.method_set_vertex_meta, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_vertex_meta: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_vertex_meta")
        return withUnsafePointer(to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 4227898402)!
            }
            
        }
        
    }()
    
    /// Returns the metadata associated with the given vertex.
    public final func getVertexMeta(idx: Int32) -> Variant {
        let _result: Variant = Variant ()
        withUnsafePointer(to: idx) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(MeshDataTool.method_get_vertex_meta, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result.content)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_get_vertex_edges: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_vertex_edges")
        return withUnsafePointer(to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1706082319)!
            }
            
        }
        
    }()
    
    /// Returns an array of edges that share the given vertex.
    public final func getVertexEdges(idx: Int32) -> PackedInt32Array {
        let _result: PackedInt32Array = PackedInt32Array ()
        withUnsafePointer(to: idx) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(MeshDataTool.method_get_vertex_edges, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result.content)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_get_vertex_faces: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_vertex_faces")
        return withUnsafePointer(to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1706082319)!
            }
            
        }
        
    }()
    
    /// Returns an array of faces that share the given vertex.
    public final func getVertexFaces(idx: Int32) -> PackedInt32Array {
        let _result: PackedInt32Array = PackedInt32Array ()
        withUnsafePointer(to: idx) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(MeshDataTool.method_get_vertex_faces, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result.content)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_get_edge_vertex: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_edge_vertex")
        return withUnsafePointer(to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3175239445)!
            }
            
        }
        
    }()
    
    /// Returns index of specified vertex connected to given edge.
    /// 
    /// Vertex argument can only be 0 or 1 because edges are comprised of two vertices.
    /// 
    public final func getEdgeVertex(idx: Int32, vertex: Int32) -> Int32 {
        var _result: Int32 = 0
        withUnsafePointer(to: idx) { pArg0 in
            withUnsafePointer(to: vertex) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(MeshDataTool.method_get_edge_vertex, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                    }
                    
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_get_edge_faces: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_edge_faces")
        return withUnsafePointer(to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1706082319)!
            }
            
        }
        
    }()
    
    /// Returns array of faces that touch given edge.
    public final func getEdgeFaces(idx: Int32) -> PackedInt32Array {
        let _result: PackedInt32Array = PackedInt32Array ()
        withUnsafePointer(to: idx) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(MeshDataTool.method_get_edge_faces, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result.content)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_set_edge_meta: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_edge_meta")
        return withUnsafePointer(to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2152698145)!
            }
            
        }
        
    }()
    
    /// Sets the metadata of the given edge.
    public final func setEdgeMeta(idx: Int32, meta: Variant) {
        withUnsafePointer(to: idx) { pArg0 in
            withUnsafePointer(to: meta.content) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(MeshDataTool.method_set_edge_meta, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_edge_meta: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_edge_meta")
        return withUnsafePointer(to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 4227898402)!
            }
            
        }
        
    }()
    
    /// Returns meta information assigned to given edge.
    public final func getEdgeMeta(idx: Int32) -> Variant {
        let _result: Variant = Variant ()
        withUnsafePointer(to: idx) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(MeshDataTool.method_get_edge_meta, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result.content)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_get_face_vertex: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_face_vertex")
        return withUnsafePointer(to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3175239445)!
            }
            
        }
        
    }()
    
    /// Returns the specified vertex index of the given face.
    /// 
    /// Vertex argument must be either 0, 1, or 2 because faces contain three vertices.
    /// 
    /// **Example:**
    /// 
    public final func getFaceVertex(idx: Int32, vertex: Int32) -> Int32 {
        var _result: Int32 = 0
        withUnsafePointer(to: idx) { pArg0 in
            withUnsafePointer(to: vertex) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(MeshDataTool.method_get_face_vertex, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                    }
                    
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_get_face_edge: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_face_edge")
        return withUnsafePointer(to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3175239445)!
            }
            
        }
        
    }()
    
    /// Returns specified edge associated with given face.
    /// 
    /// Edge argument must be either 0, 1, or 2 because a face only has three edges.
    /// 
    public final func getFaceEdge(idx: Int32, edge: Int32) -> Int32 {
        var _result: Int32 = 0
        withUnsafePointer(to: idx) { pArg0 in
            withUnsafePointer(to: edge) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(MeshDataTool.method_get_face_edge, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                    }
                    
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_set_face_meta: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_face_meta")
        return withUnsafePointer(to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2152698145)!
            }
            
        }
        
    }()
    
    /// Sets the metadata of the given face.
    public final func setFaceMeta(idx: Int32, meta: Variant) {
        withUnsafePointer(to: idx) { pArg0 in
            withUnsafePointer(to: meta.content) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(MeshDataTool.method_set_face_meta, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_face_meta: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_face_meta")
        return withUnsafePointer(to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 4227898402)!
            }
            
        }
        
    }()
    
    /// Returns the metadata associated with the given face.
    public final func getFaceMeta(idx: Int32) -> Variant {
        let _result: Variant = Variant ()
        withUnsafePointer(to: idx) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(MeshDataTool.method_get_face_meta, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result.content)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_get_face_normal: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_face_normal")
        return withUnsafePointer(to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 711720468)!
            }
            
        }
        
    }()
    
    /// Calculates and returns the face normal of the given face.
    public final func getFaceNormal(idx: Int32) -> Vector3 {
        var _result: Vector3 = Vector3 ()
        withUnsafePointer(to: idx) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(MeshDataTool.method_get_face_normal, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_set_material: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_material")
        return withUnsafePointer(to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2757459619)!
            }
            
        }
        
    }()
    
    /// Sets the material to be used by newly-constructed ``Mesh``.
    public final func setMaterial(_ material: Material?) {
        withUnsafePointer(to: material?.handle) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(MeshDataTool.method_set_material, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_material: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_material")
        return withUnsafePointer(to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 5934680)!
            }
            
        }
        
    }()
    
    /// Returns the material assigned to the ``Mesh``.
    public final func getMaterial() -> Material? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall(MeshDataTool.method_get_material, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
}


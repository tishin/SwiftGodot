// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A tracked body in XR.
/// 
/// A body tracking system will create an instance of this object and add it to the ``XRServer``. This tracking system will then obtain skeleton data, convert it to the Godot Humanoid skeleton and store this data on the ``XRBodyTracker`` object.
/// 
/// Use ``XRBodyModifier3D`` to animate a body mesh using body tracking data.
/// 
open class XRBodyTracker: XRPositionalTracker {
    override open class var godotClassName: StringName { "XRBodyTracker" }
    public struct BodyFlags: OptionSet, CustomDebugStringConvertible {
        public let rawValue: Int
        public init (rawValue: Int) {
            self.rawValue = rawValue
        }
        
        /// Upper body tracking supported.
        public static let upperBodySupported = BodyFlags (rawValue: 1)
        /// Lower body tracking supported.
        public static let lowerBodySupported = BodyFlags (rawValue: 2)
        /// Hand tracking supported.
        public static let handsSupported = BodyFlags (rawValue: 4)
        /// A textual representation of this instance, suitable for debugging
        public var debugDescription: String {
            var result = ""
            if self.contains (.upperBodySupported) { result += "upperBodySupported, " }
            if self.contains (.lowerBodySupported) { result += "lowerBodySupported, " }
            if self.contains (.handsSupported) { result += "handsSupported, " }
            if result.hasSuffix (", ") { result.removeLast (2) }
            return result
        }
        
    }
    
    public enum Joint: Int64, CaseIterable, CustomDebugStringConvertible {
        /// Root joint.
        case root = 0 // JOINT_ROOT
        /// Hips joint.
        case hips = 1 // JOINT_HIPS
        /// Spine joint.
        case spine = 2 // JOINT_SPINE
        /// Chest joint.
        case chest = 3 // JOINT_CHEST
        /// Upper chest joint.
        case upperChest = 4 // JOINT_UPPER_CHEST
        /// Neck joint.
        case neck = 5 // JOINT_NECK
        /// Head joint.
        case head = 6 // JOINT_HEAD
        /// Head tip joint.
        case headTip = 7 // JOINT_HEAD_TIP
        /// Left shoulder joint.
        case leftShoulder = 8 // JOINT_LEFT_SHOULDER
        /// Left upper arm joint.
        case leftUpperArm = 9 // JOINT_LEFT_UPPER_ARM
        /// Left lower arm joint.
        case leftLowerArm = 10 // JOINT_LEFT_LOWER_ARM
        /// Right shoulder joint.
        case rightShoulder = 11 // JOINT_RIGHT_SHOULDER
        /// Right upper arm joint.
        case rightUpperArm = 12 // JOINT_RIGHT_UPPER_ARM
        /// Right lower arm joint.
        case rightLowerArm = 13 // JOINT_RIGHT_LOWER_ARM
        /// Left upper leg joint.
        case leftUpperLeg = 14 // JOINT_LEFT_UPPER_LEG
        /// Left lower leg joint.
        case leftLowerLeg = 15 // JOINT_LEFT_LOWER_LEG
        /// Left foot joint.
        case leftFoot = 16 // JOINT_LEFT_FOOT
        /// Left toes joint.
        case leftToes = 17 // JOINT_LEFT_TOES
        /// Right upper leg joint.
        case rightUpperLeg = 18 // JOINT_RIGHT_UPPER_LEG
        /// Right lower leg joint.
        case rightLowerLeg = 19 // JOINT_RIGHT_LOWER_LEG
        /// Right foot joint.
        case rightFoot = 20 // JOINT_RIGHT_FOOT
        /// Right toes joint.
        case rightToes = 21 // JOINT_RIGHT_TOES
        /// Left hand joint.
        case leftHand = 22 // JOINT_LEFT_HAND
        /// Left palm joint.
        case leftPalm = 23 // JOINT_LEFT_PALM
        /// Left wrist joint.
        case leftWrist = 24 // JOINT_LEFT_WRIST
        /// Left thumb metacarpal joint.
        case leftThumbMetacarpal = 25 // JOINT_LEFT_THUMB_METACARPAL
        /// Left thumb phalanx proximal joint.
        case leftThumbPhalanxProximal = 26 // JOINT_LEFT_THUMB_PHALANX_PROXIMAL
        /// Left thumb phalanx distal joint.
        case leftThumbPhalanxDistal = 27 // JOINT_LEFT_THUMB_PHALANX_DISTAL
        /// Left thumb tip joint.
        case leftThumbTip = 28 // JOINT_LEFT_THUMB_TIP
        /// Left index finger metacarpal joint.
        case leftIndexFingerMetacarpal = 29 // JOINT_LEFT_INDEX_FINGER_METACARPAL
        /// Left index finger phalanx proximal joint.
        case leftIndexFingerPhalanxProximal = 30 // JOINT_LEFT_INDEX_FINGER_PHALANX_PROXIMAL
        /// Left index finger phalanx intermediate joint.
        case leftIndexFingerPhalanxIntermediate = 31 // JOINT_LEFT_INDEX_FINGER_PHALANX_INTERMEDIATE
        /// Left index finger phalanx distal joint.
        case leftIndexFingerPhalanxDistal = 32 // JOINT_LEFT_INDEX_FINGER_PHALANX_DISTAL
        /// Left index finger tip joint.
        case leftIndexFingerTip = 33 // JOINT_LEFT_INDEX_FINGER_TIP
        /// Left middle finger metacarpal joint.
        case leftMiddleFingerMetacarpal = 34 // JOINT_LEFT_MIDDLE_FINGER_METACARPAL
        /// Left middle finger phalanx proximal joint.
        case leftMiddleFingerPhalanxProximal = 35 // JOINT_LEFT_MIDDLE_FINGER_PHALANX_PROXIMAL
        /// Left middle finger phalanx intermediate joint.
        case leftMiddleFingerPhalanxIntermediate = 36 // JOINT_LEFT_MIDDLE_FINGER_PHALANX_INTERMEDIATE
        /// Left middle finger phalanx distal joint.
        case leftMiddleFingerPhalanxDistal = 37 // JOINT_LEFT_MIDDLE_FINGER_PHALANX_DISTAL
        /// Left middle finger tip joint.
        case leftMiddleFingerTip = 38 // JOINT_LEFT_MIDDLE_FINGER_TIP
        /// Left ring finger metacarpal joint.
        case leftRingFingerMetacarpal = 39 // JOINT_LEFT_RING_FINGER_METACARPAL
        /// Left ring finger phalanx proximal joint.
        case leftRingFingerPhalanxProximal = 40 // JOINT_LEFT_RING_FINGER_PHALANX_PROXIMAL
        /// Left ring finger phalanx intermediate joint.
        case leftRingFingerPhalanxIntermediate = 41 // JOINT_LEFT_RING_FINGER_PHALANX_INTERMEDIATE
        /// Left ring finger phalanx distal joint.
        case leftRingFingerPhalanxDistal = 42 // JOINT_LEFT_RING_FINGER_PHALANX_DISTAL
        /// Left ring finger tip joint.
        case leftRingFingerTip = 43 // JOINT_LEFT_RING_FINGER_TIP
        /// Left pinky finger metacarpal joint.
        case leftPinkyFingerMetacarpal = 44 // JOINT_LEFT_PINKY_FINGER_METACARPAL
        /// Left pinky finger phalanx proximal joint.
        case leftPinkyFingerPhalanxProximal = 45 // JOINT_LEFT_PINKY_FINGER_PHALANX_PROXIMAL
        /// Left pinky finger phalanx intermediate joint.
        case leftPinkyFingerPhalanxIntermediate = 46 // JOINT_LEFT_PINKY_FINGER_PHALANX_INTERMEDIATE
        /// Left pinky finger phalanx distal joint.
        case leftPinkyFingerPhalanxDistal = 47 // JOINT_LEFT_PINKY_FINGER_PHALANX_DISTAL
        /// Left pinky finger tip joint.
        case leftPinkyFingerTip = 48 // JOINT_LEFT_PINKY_FINGER_TIP
        /// Right hand joint.
        case rightHand = 49 // JOINT_RIGHT_HAND
        /// Right palm joint.
        case rightPalm = 50 // JOINT_RIGHT_PALM
        /// Right wrist joint.
        case rightWrist = 51 // JOINT_RIGHT_WRIST
        /// Right thumb metacarpal joint.
        case rightThumbMetacarpal = 52 // JOINT_RIGHT_THUMB_METACARPAL
        /// Right thumb phalanx proximal joint.
        case rightThumbPhalanxProximal = 53 // JOINT_RIGHT_THUMB_PHALANX_PROXIMAL
        /// Right thumb phalanx distal joint.
        case rightThumbPhalanxDistal = 54 // JOINT_RIGHT_THUMB_PHALANX_DISTAL
        /// Right thumb tip joint.
        case rightThumbTip = 55 // JOINT_RIGHT_THUMB_TIP
        /// Right index finger metacarpal joint.
        case rightIndexFingerMetacarpal = 56 // JOINT_RIGHT_INDEX_FINGER_METACARPAL
        /// Right index finger phalanx proximal joint.
        case rightIndexFingerPhalanxProximal = 57 // JOINT_RIGHT_INDEX_FINGER_PHALANX_PROXIMAL
        /// Right index finger phalanx intermediate joint.
        case rightIndexFingerPhalanxIntermediate = 58 // JOINT_RIGHT_INDEX_FINGER_PHALANX_INTERMEDIATE
        /// Right index finger phalanx distal joint.
        case rightIndexFingerPhalanxDistal = 59 // JOINT_RIGHT_INDEX_FINGER_PHALANX_DISTAL
        /// Right index finger tip joint.
        case rightIndexFingerTip = 60 // JOINT_RIGHT_INDEX_FINGER_TIP
        /// Right middle finger metacarpal joint.
        case rightMiddleFingerMetacarpal = 61 // JOINT_RIGHT_MIDDLE_FINGER_METACARPAL
        /// Right middle finger phalanx proximal joint.
        case rightMiddleFingerPhalanxProximal = 62 // JOINT_RIGHT_MIDDLE_FINGER_PHALANX_PROXIMAL
        /// Right middle finger phalanx intermediate joint.
        case rightMiddleFingerPhalanxIntermediate = 63 // JOINT_RIGHT_MIDDLE_FINGER_PHALANX_INTERMEDIATE
        /// Right middle finger phalanx distal joint.
        case rightMiddleFingerPhalanxDistal = 64 // JOINT_RIGHT_MIDDLE_FINGER_PHALANX_DISTAL
        /// Right middle finger tip joint.
        case rightMiddleFingerTip = 65 // JOINT_RIGHT_MIDDLE_FINGER_TIP
        /// Right ring finger metacarpal joint.
        case rightRingFingerMetacarpal = 66 // JOINT_RIGHT_RING_FINGER_METACARPAL
        /// Right ring finger phalanx proximal joint.
        case rightRingFingerPhalanxProximal = 67 // JOINT_RIGHT_RING_FINGER_PHALANX_PROXIMAL
        /// Right ring finger phalanx intermediate joint.
        case rightRingFingerPhalanxIntermediate = 68 // JOINT_RIGHT_RING_FINGER_PHALANX_INTERMEDIATE
        /// Right ring finger phalanx distal joint.
        case rightRingFingerPhalanxDistal = 69 // JOINT_RIGHT_RING_FINGER_PHALANX_DISTAL
        /// Right ring finger tip joint.
        case rightRingFingerTip = 70 // JOINT_RIGHT_RING_FINGER_TIP
        /// Right pinky finger metacarpal joint.
        case rightPinkyFingerMetacarpal = 71 // JOINT_RIGHT_PINKY_FINGER_METACARPAL
        /// Right pinky finger phalanx proximal joint.
        case rightPinkyFingerPhalanxProximal = 72 // JOINT_RIGHT_PINKY_FINGER_PHALANX_PROXIMAL
        /// Right pinky finger phalanx intermediate joint.
        case rightPinkyFingerPhalanxIntermediate = 73 // JOINT_RIGHT_PINKY_FINGER_PHALANX_INTERMEDIATE
        /// Right pinky finger phalanx distal joint.
        case rightPinkyFingerPhalanxDistal = 74 // JOINT_RIGHT_PINKY_FINGER_PHALANX_DISTAL
        /// Right pinky finger tip joint.
        case rightPinkyFingerTip = 75 // JOINT_RIGHT_PINKY_FINGER_TIP
        /// Represents the size of the ``XRBodyTracker/Joint`` enum.
        case max = 76 // JOINT_MAX
        /// A textual representation of this instance, suitable for debugging
        public var debugDescription: String {
            switch self {
                case .root: return ".root"
                case .hips: return ".hips"
                case .spine: return ".spine"
                case .chest: return ".chest"
                case .upperChest: return ".upperChest"
                case .neck: return ".neck"
                case .head: return ".head"
                case .headTip: return ".headTip"
                case .leftShoulder: return ".leftShoulder"
                case .leftUpperArm: return ".leftUpperArm"
                case .leftLowerArm: return ".leftLowerArm"
                case .rightShoulder: return ".rightShoulder"
                case .rightUpperArm: return ".rightUpperArm"
                case .rightLowerArm: return ".rightLowerArm"
                case .leftUpperLeg: return ".leftUpperLeg"
                case .leftLowerLeg: return ".leftLowerLeg"
                case .leftFoot: return ".leftFoot"
                case .leftToes: return ".leftToes"
                case .rightUpperLeg: return ".rightUpperLeg"
                case .rightLowerLeg: return ".rightLowerLeg"
                case .rightFoot: return ".rightFoot"
                case .rightToes: return ".rightToes"
                case .leftHand: return ".leftHand"
                case .leftPalm: return ".leftPalm"
                case .leftWrist: return ".leftWrist"
                case .leftThumbMetacarpal: return ".leftThumbMetacarpal"
                case .leftThumbPhalanxProximal: return ".leftThumbPhalanxProximal"
                case .leftThumbPhalanxDistal: return ".leftThumbPhalanxDistal"
                case .leftThumbTip: return ".leftThumbTip"
                case .leftIndexFingerMetacarpal: return ".leftIndexFingerMetacarpal"
                case .leftIndexFingerPhalanxProximal: return ".leftIndexFingerPhalanxProximal"
                case .leftIndexFingerPhalanxIntermediate: return ".leftIndexFingerPhalanxIntermediate"
                case .leftIndexFingerPhalanxDistal: return ".leftIndexFingerPhalanxDistal"
                case .leftIndexFingerTip: return ".leftIndexFingerTip"
                case .leftMiddleFingerMetacarpal: return ".leftMiddleFingerMetacarpal"
                case .leftMiddleFingerPhalanxProximal: return ".leftMiddleFingerPhalanxProximal"
                case .leftMiddleFingerPhalanxIntermediate: return ".leftMiddleFingerPhalanxIntermediate"
                case .leftMiddleFingerPhalanxDistal: return ".leftMiddleFingerPhalanxDistal"
                case .leftMiddleFingerTip: return ".leftMiddleFingerTip"
                case .leftRingFingerMetacarpal: return ".leftRingFingerMetacarpal"
                case .leftRingFingerPhalanxProximal: return ".leftRingFingerPhalanxProximal"
                case .leftRingFingerPhalanxIntermediate: return ".leftRingFingerPhalanxIntermediate"
                case .leftRingFingerPhalanxDistal: return ".leftRingFingerPhalanxDistal"
                case .leftRingFingerTip: return ".leftRingFingerTip"
                case .leftPinkyFingerMetacarpal: return ".leftPinkyFingerMetacarpal"
                case .leftPinkyFingerPhalanxProximal: return ".leftPinkyFingerPhalanxProximal"
                case .leftPinkyFingerPhalanxIntermediate: return ".leftPinkyFingerPhalanxIntermediate"
                case .leftPinkyFingerPhalanxDistal: return ".leftPinkyFingerPhalanxDistal"
                case .leftPinkyFingerTip: return ".leftPinkyFingerTip"
                case .rightHand: return ".rightHand"
                case .rightPalm: return ".rightPalm"
                case .rightWrist: return ".rightWrist"
                case .rightThumbMetacarpal: return ".rightThumbMetacarpal"
                case .rightThumbPhalanxProximal: return ".rightThumbPhalanxProximal"
                case .rightThumbPhalanxDistal: return ".rightThumbPhalanxDistal"
                case .rightThumbTip: return ".rightThumbTip"
                case .rightIndexFingerMetacarpal: return ".rightIndexFingerMetacarpal"
                case .rightIndexFingerPhalanxProximal: return ".rightIndexFingerPhalanxProximal"
                case .rightIndexFingerPhalanxIntermediate: return ".rightIndexFingerPhalanxIntermediate"
                case .rightIndexFingerPhalanxDistal: return ".rightIndexFingerPhalanxDistal"
                case .rightIndexFingerTip: return ".rightIndexFingerTip"
                case .rightMiddleFingerMetacarpal: return ".rightMiddleFingerMetacarpal"
                case .rightMiddleFingerPhalanxProximal: return ".rightMiddleFingerPhalanxProximal"
                case .rightMiddleFingerPhalanxIntermediate: return ".rightMiddleFingerPhalanxIntermediate"
                case .rightMiddleFingerPhalanxDistal: return ".rightMiddleFingerPhalanxDistal"
                case .rightMiddleFingerTip: return ".rightMiddleFingerTip"
                case .rightRingFingerMetacarpal: return ".rightRingFingerMetacarpal"
                case .rightRingFingerPhalanxProximal: return ".rightRingFingerPhalanxProximal"
                case .rightRingFingerPhalanxIntermediate: return ".rightRingFingerPhalanxIntermediate"
                case .rightRingFingerPhalanxDistal: return ".rightRingFingerPhalanxDistal"
                case .rightRingFingerTip: return ".rightRingFingerTip"
                case .rightPinkyFingerMetacarpal: return ".rightPinkyFingerMetacarpal"
                case .rightPinkyFingerPhalanxProximal: return ".rightPinkyFingerPhalanxProximal"
                case .rightPinkyFingerPhalanxIntermediate: return ".rightPinkyFingerPhalanxIntermediate"
                case .rightPinkyFingerPhalanxDistal: return ".rightPinkyFingerPhalanxDistal"
                case .rightPinkyFingerTip: return ".rightPinkyFingerTip"
                case .max: return ".max"
            }
            
        }
        
    }
    
    public struct JointFlags: OptionSet, CustomDebugStringConvertible {
        public let rawValue: Int
        public init (rawValue: Int) {
            self.rawValue = rawValue
        }
        
        /// The joint's orientation data is valid.
        public static let orientationValid = JointFlags (rawValue: 1)
        /// The joint's orientation is actively tracked. May not be set if tracking has been temporarily lost.
        public static let orientationTracked = JointFlags (rawValue: 2)
        /// The joint's position data is valid.
        public static let positionValid = JointFlags (rawValue: 4)
        /// The joint's position is actively tracked. May not be set if tracking has been temporarily lost.
        public static let positionTracked = JointFlags (rawValue: 8)
        /// A textual representation of this instance, suitable for debugging
        public var debugDescription: String {
            var result = ""
            if self.contains (.orientationValid) { result += "orientationValid, " }
            if self.contains (.orientationTracked) { result += "orientationTracked, " }
            if self.contains (.positionValid) { result += "positionValid, " }
            if self.contains (.positionTracked) { result += "positionTracked, " }
            if result.hasSuffix (", ") { result.removeLast (2) }
            return result
        }
        
    }
    
    
    /* Properties */
    
    /// If `true`, the body tracking data is valid.
    final public var hasTrackingData: Bool {
        get {
            return get_has_tracking_data ()
        }
        
        set {
            set_has_tracking_data (newValue)
        }
        
    }
    
    /// The type of body tracking data captured.
    final public var bodyFlags: XRBodyTracker.BodyFlags {
        get {
            return get_body_flags ()
        }
        
        set {
            set_body_flags (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_has_tracking_data: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_has_tracking_data")
        return withUnsafePointer(to: &XRBodyTracker.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_has_tracking_data(_ hasData: Bool) {
        withUnsafePointer(to: hasData) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(XRBodyTracker.method_set_has_tracking_data, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_has_tracking_data: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_has_tracking_data")
        return withUnsafePointer(to: &XRBodyTracker.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_has_tracking_data() -> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall(XRBodyTracker.method_get_has_tracking_data, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_body_flags: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_body_flags")
        return withUnsafePointer(to: &XRBodyTracker.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2103235750)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_body_flags(_ flags: XRBodyTracker.BodyFlags) {
        withUnsafePointer(to: flags.rawValue) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(XRBodyTracker.method_set_body_flags, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_body_flags: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_body_flags")
        return withUnsafePointer(to: &XRBodyTracker.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3543166366)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_body_flags() -> XRBodyTracker.BodyFlags {
        var _result: XRBodyTracker.BodyFlags = XRBodyTracker.BodyFlags ()
        gi.object_method_bind_ptrcall(XRBodyTracker.method_get_body_flags, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_joint_flags: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_joint_flags")
        return withUnsafePointer(to: &XRBodyTracker.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 592144999)!
            }
            
        }
        
    }()
    
    /// Sets flags about the validity of the tracking data for the given body joint.
    public final func setJointFlags(joint: XRBodyTracker.Joint, flags: XRBodyTracker.JointFlags) {
        withUnsafePointer(to: joint.rawValue) { pArg0 in
            withUnsafePointer(to: flags.rawValue) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(XRBodyTracker.method_set_joint_flags, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_joint_flags: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_joint_flags")
        return withUnsafePointer(to: &XRBodyTracker.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1030162609)!
            }
            
        }
        
    }()
    
    /// Returns flags about the validity of the tracking data for the given body joint (see ``XRBodyTracker.JointFlags``).
    public final func getJointFlags(joint: XRBodyTracker.Joint) -> XRBodyTracker.JointFlags {
        var _result: XRBodyTracker.JointFlags = XRBodyTracker.JointFlags ()
        withUnsafePointer(to: joint.rawValue) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(XRBodyTracker.method_get_joint_flags, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_set_joint_transform: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_joint_transform")
        return withUnsafePointer(to: &XRBodyTracker.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2635424328)!
            }
            
        }
        
    }()
    
    /// Sets the transform for the given body joint.
    public final func setJointTransform(joint: XRBodyTracker.Joint, transform: Transform3D) {
        withUnsafePointer(to: joint.rawValue) { pArg0 in
            withUnsafePointer(to: transform) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(XRBodyTracker.method_set_joint_transform, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_joint_transform: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_joint_transform")
        return withUnsafePointer(to: &XRBodyTracker.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3474811534)!
            }
            
        }
        
    }()
    
    /// Returns the transform for the given body joint.
    public final func getJointTransform(joint: XRBodyTracker.Joint) -> Transform3D {
        var _result: Transform3D = Transform3D ()
        withUnsafePointer(to: joint.rawValue) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(XRBodyTracker.method_get_joint_transform, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
}


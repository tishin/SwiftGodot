// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Default environment properties for the entire scene (post-processing effects, lighting and background settings).
/// 
/// The ``WorldEnvironment`` node is used to configure the default ``Environment`` for the scene.
/// 
/// The parameters defined in the ``WorldEnvironment`` can be overridden by an ``Environment`` node set on the current ``Camera3D``. Additionally, only one ``WorldEnvironment`` may be instantiated in a given scene at a time.
/// 
/// The ``WorldEnvironment`` allows the user to specify default lighting parameters (e.g. ambient lighting), various post-processing effects (e.g. SSAO, DOF, Tonemapping), and how to draw the background (e.g. solid color, skybox). Usually, these are added in order to improve the realism/color balance of the scene.
/// 
open class WorldEnvironment: Node {
    override open class var godotClassName: StringName { "WorldEnvironment" }
    
    /* Properties */
    
    /// The ``Environment`` resource used by this ``WorldEnvironment``, defining the default properties.
    final public var environment: Environment? {
        get {
            return get_environment ()
        }
        
        set {
            set_environment (newValue)
        }
        
    }
    
    /// The default ``CameraAttributes`` resource to use if none set on the ``Camera3D``.
    final public var cameraAttributes: CameraAttributes? {
        get {
            return get_camera_attributes ()
        }
        
        set {
            set_camera_attributes (newValue)
        }
        
    }
    
    /// The default ``Compositor`` resource to use if none set on the ``Camera3D``.
    final public var compositor: Compositor? {
        get {
            return get_compositor ()
        }
        
        set {
            set_compositor (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_environment: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_environment")
        return withUnsafePointer(to: &WorldEnvironment.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 4143518816)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_environment(_ env: Environment?) {
        withUnsafePointer(to: env?.handle) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(WorldEnvironment.method_set_environment, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_environment: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_environment")
        return withUnsafePointer(to: &WorldEnvironment.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3082064660)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_environment() -> Environment? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall(WorldEnvironment.method_get_environment, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_camera_attributes: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_camera_attributes")
        return withUnsafePointer(to: &WorldEnvironment.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2817810567)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_camera_attributes(_ cameraAttributes: CameraAttributes?) {
        withUnsafePointer(to: cameraAttributes?.handle) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(WorldEnvironment.method_set_camera_attributes, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_camera_attributes: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_camera_attributes")
        return withUnsafePointer(to: &WorldEnvironment.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3921283215)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_camera_attributes() -> CameraAttributes? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall(WorldEnvironment.method_get_camera_attributes, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_compositor: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_compositor")
        return withUnsafePointer(to: &WorldEnvironment.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1586754307)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_compositor(_ compositor: Compositor?) {
        withUnsafePointer(to: compositor?.handle) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(WorldEnvironment.method_set_compositor, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_compositor: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_compositor")
        return withUnsafePointer(to: &WorldEnvironment.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3647707413)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_compositor() -> Compositor? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall(WorldEnvironment.method_get_compositor, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
}


// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A ``Color`` function to be used within the visual shader graph.
/// 
/// Accept a ``Color`` to the input port and transform it according to ``function``.
open class VisualShaderNodeColorFunc: VisualShaderNode {
    override open class var godotClassName: StringName { "VisualShaderNodeColorFunc" }
    public enum Function: Int64, CaseIterable, CustomDebugStringConvertible {
        /// Converts the color to grayscale using the following formula:
        /// 
        case grayscale = 0 // FUNC_GRAYSCALE
        /// Converts HSV vector to RGB equivalent.
        case hsv2rgb = 1 // FUNC_HSV2RGB
        /// Converts RGB vector to HSV equivalent.
        case rgb2hsv = 2 // FUNC_RGB2HSV
        /// Applies sepia tone effect using the following formula:
        /// 
        case sepia = 3 // FUNC_SEPIA
        /// Represents the size of the ``VisualShaderNodeColorFunc/Function`` enum.
        case max = 4 // FUNC_MAX
        /// A textual representation of this instance, suitable for debugging
        public var debugDescription: String {
            switch self {
                case .grayscale: return ".grayscale"
                case .hsv2rgb: return ".hsv2rgb"
                case .rgb2hsv: return ".rgb2hsv"
                case .sepia: return ".sepia"
                case .max: return ".max"
            }
            
        }
        
    }
    
    
    /* Properties */
    
    /// A function to be applied to the input color. See ``VisualShaderNodeColorFunc/Function`` for options.
    final public var function: VisualShaderNodeColorFunc.Function {
        get {
            return get_function ()
        }
        
        set {
            set_function (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_function: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_function")
        return withUnsafePointer(to: &VisualShaderNodeColorFunc.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3973396138)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_function(_ `func`: VisualShaderNodeColorFunc.Function) {
        withUnsafePointer(to: `func`.rawValue) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(VisualShaderNodeColorFunc.method_set_function, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_function: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_function")
        return withUnsafePointer(to: &VisualShaderNodeColorFunc.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 554863321)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_function() -> VisualShaderNodeColorFunc.Function {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall(VisualShaderNodeColorFunc.method_get_function, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return VisualShaderNodeColorFunc.Function (rawValue: _result)!
    }
    
}


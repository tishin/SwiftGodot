// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// This resource allows for creating a custom rendering effect.
/// 
/// This resource defines a custom rendering effect that can be applied to ``Viewport``s through the viewports' ``Environment``. You can implement a callback that is called during rendering at a given stage of the rendering pipeline and allows you to insert additional passes. Note that this callback happens on the rendering thread.
open class CompositorEffect: Resource {
    override open class var godotClassName: StringName { "CompositorEffect" }
    public enum EffectCallbackType: Int64, CaseIterable, CustomDebugStringConvertible {
        /// The callback is called before our opaque rendering pass, but after depth prepass (if applicable).
        case preOpaque = 0 // EFFECT_CALLBACK_TYPE_PRE_OPAQUE
        /// The callback is called after our opaque rendering pass, but before our sky is rendered.
        case postOpaque = 1 // EFFECT_CALLBACK_TYPE_POST_OPAQUE
        /// The callback is called after our sky is rendered, but before our back buffers are created (and if enabled, before subsurface scattering and/or screen space reflections).
        case postSky = 2 // EFFECT_CALLBACK_TYPE_POST_SKY
        /// The callback is called before our transparent rendering pass, but after our sky is rendered and we've created our back buffers.
        case preTransparent = 3 // EFFECT_CALLBACK_TYPE_PRE_TRANSPARENT
        /// The callback is called after our transparent rendering pass, but before any build in post effects and output to our render target.
        case postTransparent = 4 // EFFECT_CALLBACK_TYPE_POST_TRANSPARENT
        /// Represents the size of the ``CompositorEffect/EffectCallbackType`` enum.
        case max = 5 // EFFECT_CALLBACK_TYPE_MAX
        /// A textual representation of this instance, suitable for debugging
        public var debugDescription: String {
            switch self {
                case .preOpaque: return ".preOpaque"
                case .postOpaque: return ".postOpaque"
                case .postSky: return ".postSky"
                case .preTransparent: return ".preTransparent"
                case .postTransparent: return ".postTransparent"
                case .max: return ".max"
            }
            
        }
        
    }
    
    
    /* Properties */
    
    /// If `true` this rendering effect is applied to any viewport it is added to.
    final public var enabled: Bool {
        get {
            return get_enabled ()
        }
        
        set {
            set_enabled (newValue)
        }
        
    }
    
    /// The type of effect that is implemented, determines at what stage of rendering the callback is called.
    final public var effectCallbackType: CompositorEffect.EffectCallbackType {
        get {
            return get_effect_callback_type ()
        }
        
        set {
            set_effect_callback_type (newValue)
        }
        
    }
    
    /// If `true` and MSAA is enabled, this will trigger a color buffer resolve before the effect is run.
    /// 
    /// > Note: In ``_renderCallback(effectCallbackType:renderData:)``, to access the resolved buffer use:
    /// 
    final public var accessResolvedColor: Bool {
        get {
            return get_access_resolved_color ()
        }
        
        set {
            set_access_resolved_color (newValue)
        }
        
    }
    
    /// If `true` and MSAA is enabled, this will trigger a depth buffer resolve before the effect is run.
    /// 
    /// > Note: In ``_renderCallback(effectCallbackType:renderData:)``, to access the resolved buffer use:
    /// 
    final public var accessResolvedDepth: Bool {
        get {
            return get_access_resolved_depth ()
        }
        
        set {
            set_access_resolved_depth (newValue)
        }
        
    }
    
    /// If `true` this triggers motion vectors being calculated during the opaque render state.
    /// 
    /// > Note: In ``_renderCallback(effectCallbackType:renderData:)``, to access the motion vector buffer use:
    /// 
    final public var needsMotionVectors: Bool {
        get {
            return get_needs_motion_vectors ()
        }
        
        set {
            set_needs_motion_vectors (newValue)
        }
        
    }
    
    /// If `true` this triggers normal and roughness data to be output during our depth pre-pass, only applicable for the Forward+ renderer.
    /// 
    /// > Note: In ``_renderCallback(effectCallbackType:renderData:)``, to access the roughness buffer use:
    /// 
    final public var needsNormalRoughness: Bool {
        get {
            return get_needs_normal_roughness ()
        }
        
        set {
            set_needs_normal_roughness (newValue)
        }
        
    }
    
    /// If `true` this triggers specular data being rendered to a separate buffer and combined after effects have been applied, only applicable for the Forward+ renderer.
    final public var needsSeparateSpecular: Bool {
        get {
            return get_needs_separate_specular ()
        }
        
        set {
            set_needs_separate_specular (newValue)
        }
        
    }
    
    /* Methods */
    /// Implement this function with your custom rendering code. `effectCallbackType` should always match the effect callback type you've specified in ``effectCallbackType``. `renderData` provides access to the rendering state, it is only valid during rendering and should not be stored.
    @_documentation(visibility: public)
    open func _renderCallback(effectCallbackType: Int32, renderData: RenderData?) {
    }
    
    fileprivate static var method_set_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_enabled")
        return withUnsafePointer(to: &CompositorEffect.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_enabled(_ enabled: Bool) {
        withUnsafePointer(to: enabled) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(CompositorEffect.method_set_enabled, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_enabled")
        return withUnsafePointer(to: &CompositorEffect.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_enabled() -> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall(CompositorEffect.method_get_enabled, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_effect_callback_type: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_effect_callback_type")
        return withUnsafePointer(to: &CompositorEffect.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1390728419)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_effect_callback_type(_ effectCallbackType: CompositorEffect.EffectCallbackType) {
        withUnsafePointer(to: effectCallbackType.rawValue) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(CompositorEffect.method_set_effect_callback_type, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_effect_callback_type: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_effect_callback_type")
        return withUnsafePointer(to: &CompositorEffect.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1221912590)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_effect_callback_type() -> CompositorEffect.EffectCallbackType {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall(CompositorEffect.method_get_effect_callback_type, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return CompositorEffect.EffectCallbackType (rawValue: _result)!
    }
    
    fileprivate static var method_set_access_resolved_color: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_access_resolved_color")
        return withUnsafePointer(to: &CompositorEffect.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_access_resolved_color(_ enable: Bool) {
        withUnsafePointer(to: enable) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(CompositorEffect.method_set_access_resolved_color, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_access_resolved_color: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_access_resolved_color")
        return withUnsafePointer(to: &CompositorEffect.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_access_resolved_color() -> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall(CompositorEffect.method_get_access_resolved_color, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_access_resolved_depth: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_access_resolved_depth")
        return withUnsafePointer(to: &CompositorEffect.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_access_resolved_depth(_ enable: Bool) {
        withUnsafePointer(to: enable) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(CompositorEffect.method_set_access_resolved_depth, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_access_resolved_depth: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_access_resolved_depth")
        return withUnsafePointer(to: &CompositorEffect.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_access_resolved_depth() -> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall(CompositorEffect.method_get_access_resolved_depth, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_needs_motion_vectors: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_needs_motion_vectors")
        return withUnsafePointer(to: &CompositorEffect.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_needs_motion_vectors(_ enable: Bool) {
        withUnsafePointer(to: enable) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(CompositorEffect.method_set_needs_motion_vectors, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_needs_motion_vectors: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_needs_motion_vectors")
        return withUnsafePointer(to: &CompositorEffect.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_needs_motion_vectors() -> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall(CompositorEffect.method_get_needs_motion_vectors, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_needs_normal_roughness: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_needs_normal_roughness")
        return withUnsafePointer(to: &CompositorEffect.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_needs_normal_roughness(_ enable: Bool) {
        withUnsafePointer(to: enable) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(CompositorEffect.method_set_needs_normal_roughness, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_needs_normal_roughness: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_needs_normal_roughness")
        return withUnsafePointer(to: &CompositorEffect.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_needs_normal_roughness() -> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall(CompositorEffect.method_get_needs_normal_roughness, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_needs_separate_specular: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_needs_separate_specular")
        return withUnsafePointer(to: &CompositorEffect.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_needs_separate_specular(_ enable: Bool) {
        withUnsafePointer(to: enable) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(CompositorEffect.method_set_needs_separate_specular, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_needs_separate_specular: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_needs_separate_specular")
        return withUnsafePointer(to: &CompositorEffect.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_needs_separate_specular() -> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall(CompositorEffect.method_get_needs_separate_specular, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    override class func getVirtualDispatcher (name: StringName) -> GDExtensionClassCallVirtual? {
        guard implementedOverrides().contains(name) else { return nil }
        switch name.description {
            case "_render_callback":
                return _CompositorEffect_proxy_render_callback
            default:
                return super.getVirtualDispatcher (name: name)
        }
        
    }
    
}

// Support methods for proxies
func _CompositorEffect_proxy_render_callback (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<CompositorEffect>.fromOpaque(instance).takeUnretainedValue()
    let resolved_1 = args [1]!.load (as: UnsafeRawPointer.self)
    
    swiftObject._renderCallback (effectCallbackType: args [0]!.assumingMemoryBound (to: Int32.self).pointee, renderData: lookupLiveObject (handleAddress: resolved_1) as? RenderData ?? RenderData (nativeHandle: resolved_1))
}


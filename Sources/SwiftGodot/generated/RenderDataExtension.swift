// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
import Foundation
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// This class allows for a RenderData implementation to be made in GDExtension.
/// 
/// This class allows for a RenderData implementation to be made in GDExtension.
open class RenderDataExtension: RenderData {
    override open class var godotClassName: StringName { "RenderDataExtension" }
    /* Methods */
    /// Implement this in GDExtension to return the ``RID`` of the implementations environment object.
    @_documentation(visibility: public)
    open func _getRenderSceneBuffers() -> RenderSceneBuffers? {
        return RenderSceneBuffers ()
    }
    
    /// Implement this in GDExtension to return the implementations ``RenderSceneDataExtension`` object.
    @_documentation(visibility: public)
    open func _getRenderSceneData() -> RenderSceneData? {
        return RenderSceneData ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _getEnvironment() -> RID {
        return RID ()
    }
    
    /// Implement this in GDExtension to return the ``RID`` for the implementations camera attributes object.
    @_documentation(visibility: public)
    open func _getCameraAttributes() -> RID {
        return RID ()
    }
    
    override class func getVirtualDispatcher (name: StringName) -> GDExtensionClassCallVirtual? {
        guard implementedOverrides().contains(name) else { return nil }
        switch name.description {
            case "_get_camera_attributes":
                return _RenderDataExtension_proxy_get_camera_attributes
            case "_get_environment":
                return _RenderDataExtension_proxy_get_environment
            case "_get_render_scene_buffers":
                return _RenderDataExtension_proxy_get_render_scene_buffers
            case "_get_render_scene_data":
                return _RenderDataExtension_proxy_get_render_scene_data
            default:
                return super.getVirtualDispatcher (name: name)
        }
        
    }
    
}

// Support methods for proxies
func _RenderDataExtension_proxy_get_camera_attributes (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<RenderDataExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._getCameraAttributes ()
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // RID
    ret.content = RID.zero
}

func _RenderDataExtension_proxy_get_environment (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<RenderDataExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._getEnvironment ()
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // RID
    ret.content = RID.zero
}

func _RenderDataExtension_proxy_get_render_scene_buffers (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<RenderDataExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._getRenderSceneBuffers ()
    retPtr!.storeBytes (of: ret?.handle, as: UnsafeRawPointer?.self) // RenderSceneBuffers
}

func _RenderDataExtension_proxy_get_render_scene_data (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<RenderDataExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._getRenderSceneData ()
    retPtr!.storeBytes (of: ret?.handle, as: UnsafeRawPointer?.self) // RenderSceneData
}

